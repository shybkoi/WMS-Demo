#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336169.096
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:49 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\INCOMEDC\\templates\\taskPrinter.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskPrinter(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 4, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''    <b><u>''')
        _v = VFFSL(SL,"ALIAS",True) # '$ALIAS' on line 5, col 11
        if _v is not None: write(_filter(_v, rawExpr='$ALIAS')) # from line 5, col 11.
        write('''</u></b><br><br>
    <hr>
''')
        if VFFSL(SL,"datalist",True) and len(VFFSL(SL,"datalist",True)) > 0: # generated from line 7, col 5
            write('''        <form action=taskPrinter id=frm>
            <input type="hidden" name="prid" value="''')
            _v = VFFSL(SL,"printerid",True) # '$printerid' on line 9, col 53
            if _v is not None: write(_filter(_v, rawExpr='$printerid')) # from line 9, col 53.
            write('''">
            <input type="hidden" name="tid" value="''')
            _v = VFFSL(SL,"tid",True) # '$tid' on line 10, col 52
            if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 10, col 52.
            write('''">
            <input type=submit value="''')
            if False:
                _('Печать')
            _v = VFFSL(SL,"_",False)('Печать') # "$_('\xcf\xe5\xf7\xe0\xf2\xfc')" on line 11, col 39
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xe5\xf7\xe0\xf2\xfc')")) # from line 11, col 39.
            write('''"><br><br>
            ''')
            if False:
                _('Кол-во каждой этикетки')
            _v = VFFSL(SL,"_",False)('Кол-во каждой этикетки') # "$_('\xca\xee\xeb-\xe2\xee \xea\xe0\xe6\xe4\xee\xe9 \xfd\xf2\xe8\xea\xe5\xf2\xea\xe8')" on line 12, col 13
            if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xee\xeb-\xe2\xee \xea\xe0\xe6\xe4\xee\xe9 \xfd\xf2\xe8\xea\xe5\xf2\xea\xe8')")) # from line 12, col 13.
            write(''': <input type=text id="globalq:focus:int" value=1 onchange="globalSetQ()" size=2>
            <br><br>
''')
            for item in VFFSL(SL,"datalist",True): # generated from line 14, col 9
                write('''            <b>''')
                _v = VFFSL(SL,"item.CLIENTNAME",True) # '$item.CLIENTNAME' on line 15, col 16
                if _v is not None: write(_filter(_v, rawExpr='$item.CLIENTNAME')) # from line 15, col 16.
                write('''</b><br>
''')
                _orig_filter_70165193 = _filter
                filterName = 'DateFilter2'
                if self._CHEETAH__filters.has_key("DateFilter2"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                write('''                ''')
                _v = VFFSL(SL,"item.CLIENTDATE",True) # '$item.CLIENTDATE' on line 17, col 17
                if _v is not None: write(_filter(_v, rawExpr='$item.CLIENTDATE')) # from line 17, col 17.
                write('''
            ''')
                _filter = _orig_filter_70165193
                write('''
''')
                name = 'q_' + str(VFFSL(SL,"item.CLIENTID",True)) + '_'
                write('''            : <input type=text id=\'::int\' name="''')
                _v = VFFSL(SL,"name",True) # '$name' on line 20, col 49
                if _v is not None: write(_filter(_v, rawExpr='$name')) # from line 20, col 49.
                _orig_filter_79254742 = _filter
                filterName = 'DateFilter2'
                if self._CHEETAH__filters.has_key("DateFilter2"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.CLIENTDATE",True) # '$item.CLIENTDATE' on line 20, col 73
                if _v is not None: write(_filter(_v, rawExpr='$item.CLIENTDATE')) # from line 20, col 73.
                _filter = _orig_filter_79254742
                write('''" value=1 size=2><br>
''')
            write("""        </form>

        <script>
            function globalSetQ(){
                var val = document.getElementById('globalq:focus:int').value;
                var inputs = document.getElementById('frm').getElementsByTagName('input');
                for (var i = 0; i < inputs.length; i++)
                    if (inputs[i].name.indexOf('q_')>-1) inputs[i].value = val;
            }

            globalSetQ();
        </script>
""")
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskPrinter= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskPrinter, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskPrinter, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskPrinter)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskPrinter()).run()


