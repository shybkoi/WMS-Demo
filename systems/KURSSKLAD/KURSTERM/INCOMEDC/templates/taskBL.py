#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336169.0810001
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:49 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\INCOMEDC\\templates\\taskBL.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskBL(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 5, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''   
   <b><u>''')
        _v = VFFSL(SL,"FROMNAME",True) # '$FROMNAME' on line 7, col 10
        if _v is not None: write(_filter(_v, rawExpr='$FROMNAME')) # from line 7, col 10.
        write('''</u></b><br>
   <b>''')
        _orig_filter_84914998 = _filter
        filterName = 'DateFilter'
        if self._CHEETAH__filters.has_key("DateFilter"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"DOCDATE",True) # '$DOCDATE' on line 8, col 25
        if _v is not None: write(_filter(_v, rawExpr='$DOCDATE')) # from line 8, col 25.
        _filter = _orig_filter_84914998
        write('''</b> \xb9<b>''')
        _v = VFFSL(SL,"DOCNUM",True) # '$DOCNUM' on line 8, col 54
        if _v is not None: write(_filter(_v, rawExpr='$DOCNUM')) # from line 8, col 54.
        write("""</b>
   <hr>
    <form action='taskBL' name=frm>
    <input type=hidden name=tid value=""")
        _v = VFFSL(SL,"TID",True) # '$TID' on line 11, col 39
        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 11, col 39.
        write('''>
      <table>
        <thead>
            <tr>
                <th>''')
        if False:
            _('Код')
        _v = VFFSL(SL,"_",False)('Код') # "$_('\xca\xee\xe4')" on line 15, col 21
        if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xee\xe4')")) # from line 15, col 21.
        write('''</th>
                <th>%</th>
                <th>''')
        if False:
            _('Док')
        _v = VFFSL(SL,"_",False)('Док') # "$_('\xc4\xee\xea')" on line 17, col 21
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xee\xea')")) # from line 17, col 21.
        write('''</th>
                <th>+</th>
            </tr>
        </thead>
        <tbody>
''')
        for item in VFFSL(SL,"datalist",True): # generated from line 22, col 9
            if VFFSL(SL,"item.QFACT",True): # generated from line 23, col 13
                qFact = float(VFFSL(SL,"item.QFACT",True))
            else: # generated from line 25, col 13
                qFact = 0.0000
            write('''            
''')
            if VFFSL(SL,"item.PERCENTBL",True): # generated from line 29, col 13
                qDoc = VFFSL(SL,"qFact",True) - VFFSL(SL,"qFact",True) * float(VFFSL(SL,"item.PERCENTBL",True)) / 100.000
            else: # generated from line 31, col 13
                qDoc = VFFSL(SL,"qFact",True)
            qAdd = VFFSL(SL,"qFact",True) - VFFSL(SL,"qDoc",True)
            write('''            <tr id=tr''')
            _v = VFFSL(SL,"item.WID",True) # '$item.WID' on line 35, col 22
            if _v is not None: write(_filter(_v, rawExpr='$item.WID')) # from line 35, col 22.
            write('''>
                <td><b>''')
            _v = VFFSL(SL,"item.WCODE",True) # '$item.WCODE' on line 36, col 24
            if _v is not None: write(_filter(_v, rawExpr='$item.WCODE')) # from line 36, col 24.
            write('''</b></td>
                <td><input title="''')
            _v = VFN(VFFSL(SL,"item.WNAME",True),"replace",False)('"',"'") # '$item.WNAME.replace(\'"\',"\'")' on line 37, col 35
            if _v is not None: write(_filter(_v, rawExpr='$item.WNAME.replace(\'"\',"\'")')) # from line 37, col 35.
            write('''" type=text id="w''')
            _v = VFFSL(SL,"item.WID",True) # '$item.WID' on line 37, col 80
            if _v is not None: write(_filter(_v, rawExpr='$item.WID')) # from line 37, col 80.
            write('''::float" name=w''')
            _v = VFFSL(SL,"item.WID",True) # '$item.WID' on line 37, col 104
            if _v is not None: write(_filter(_v, rawExpr='$item.WID')) # from line 37, col 104.
            write(''' value="''')
            _v = VFFSL(SL,"item.PERCENTBL",True) # '$item.PERCENTBL' on line 37, col 121
            if _v is not None: write(_filter(_v, rawExpr='$item.PERCENTBL')) # from line 37, col 121.
            write('''" size=2 onchange="chgPercent(''')
            _v = VFFSL(SL,"item.WID",True) # '$item.WID' on line 37, col 166
            if _v is not None: write(_filter(_v, rawExpr='$item.WID')) # from line 37, col 166.
            write(''');"></td>
                <td>''')
            _orig_filter_45239442 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"qDoc",True) # '$qDoc' on line 38, col 37
            if _v is not None: write(_filter(_v, rawExpr='$qDoc')) # from line 38, col 37.
            _filter = _orig_filter_45239442
            write('''</td>
                <td>''')
            _orig_filter_14032829 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"qAdd",True) # '$qAdd' on line 39, col 37
            if _v is not None: write(_filter(_v, rawExpr='$qAdd')) # from line 39, col 37.
            _filter = _orig_filter_14032829
            write('''</td>
            </tr>
''')
        write('''        </tbody>    
      </table>
''')
        if len(VFFSL(SL,"datalist",True))>0: # generated from line 44, col 7
            write('''        <hr>
        <a href="javascript: if (confirm(\'''')
            if False:
                _('Вы  уверены?')
            _v = VFFSL(SL,"_",False)('Вы  уверены?') # "$_('\xc2\xfb  \xf3\xe2\xe5\xf0\xe5\xed\xfb?')" on line 46, col 43
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc2\xfb  \xf3\xe2\xe5\xf0\xe5\xed\xfb?')")) # from line 46, col 43.
            write('''\')) document.frm.submit();">''')
            if False:
                _('Сохранить')
            _v = VFFSL(SL,"_",False)('Сохранить') # "$_('\xd1\xee\xf5\xf0\xe0\xed\xe8\xf2\xfc')" on line 46, col 89
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd1\xee\xf5\xf0\xe0\xed\xe8\xf2\xfc')")) # from line 46, col 89.
            write('''</a>
''')
        write('''    </form>  

    <script language="javascript" src="''')
        _v = VFFSL(SL,"sps_js.KURSTERM",True) # '$sps_js.KURSTERM' on line 50, col 40
        if _v is not None: write(_filter(_v, rawExpr='$sps_js.KURSTERM')) # from line 50, col 40.
        write('''/term.formats.js"></script>
    
    <script language="javascript">
        function tdFromTr(tr,tdIndex){
            var childNodes = tr.childNodes;
            var ind = 0;
            for (var i=0; i<childNodes.length; i++){   
                var nodeI = childNodes[i];
                if (nodeI.nodeName == \'TD\'){
                    if (ind==tdIndex) return nodeI;                        
                    ind++;
                }
            }        
        }
        
        function qDoc(tr,val){
            var td = tdFromTr(tr,2);
            if (val || typeof val != \'undefined\') td.innerHTML = (val ? val : \'0\');
            return td.innerHTML;
        }
        
        function qAdd(tr,val){
            var td = tdFromTr(tr,3);
            if (val || typeof val != \'undefined\') td.innerHTML = (val ? val : \'0\');
            return td.innerHTML;
        }
        
        function chgPercent(wid){
            var tr = document.getElementById(\'tr\'+wid);
            var per = kFloat(document.getElementById(\'w\'+wid+\'::float\').value);
            var qfact = kFloat(qDoc(tr)) + kFloat(qAdd(tr));
            var qdoc = qfact - qfact*per/100.000;
            var qadd = qfact - qdoc;
            qDoc(tr,kNumber(qdoc));
            qAdd(tr,kNumber(qadd));
        }
    </script>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''


''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskBL= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskBL, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskBL, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskBL)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskBL()).run()


