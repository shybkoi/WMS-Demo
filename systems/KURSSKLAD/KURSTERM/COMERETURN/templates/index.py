#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336168.2820001
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:48 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\COMERETURN\\templates\\index.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class index(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 4, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''\t<form action="main">
        ''')
        if False:
            _('ШК')
        _v = VFFSL(SL,"_",False)('ШК') # "$_('\xd8\xca')" on line 6, col 9
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd8\xca')")) # from line 6, col 9.
        write(''': <input type="text" id=":scan:text" name="barcode" title="''')
        if False:
            _('Документ')
        _v = VFFSL(SL,"_",False)('Документ') # "$_('\xc4\xee\xea\xf3\xec\xe5\xed\xf2')" on line 6, col 76
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xee\xea\xf3\xec\xe5\xed\xf2')")) # from line 6, col 76.
        write(''', ''')
        if False:
            _('Принтер')
        _v = VFFSL(SL,"_",False)('Принтер') # "$_('\xcf\xf0\xe8\xed\xf2\xe5\xf0')" on line 6, col 92
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xf0\xe8\xed\xf2\xe5\xf0')")) # from line 6, col 92.
        write('''">
\t</form>  
    <br>
''')
        if VFFSL(SL,"varExists",False)('$datalist'): # generated from line 9, col 3
            for item in VFFSL(SL,"datalist",True): # generated from line 10, col 5
                if VFFSL(SL,"item.TSTAT",True) == '0': # generated from line 11, col 9
                    write('''            <a href="task?tid=''')
                    _v = VFFSL(SL,"item.taskid",True) # '$item.taskid' on line 12, col 31
                    if _v is not None: write(_filter(_v, rawExpr='$item.taskid')) # from line 12, col 31.
                    write('''" title="''')
                    _orig_filter_78548874 = _filter
                    filterName = 'DateFilter'
                    if self._CHEETAH__filters.has_key("DateFilter"):
                        _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                    else:
                        _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                    _v = VFFSL(SL,"item.DOCDATE",True) # '$item.DOCDATE' on line 12, col 70
                    if _v is not None: write(_filter(_v, rawExpr='$item.DOCDATE')) # from line 12, col 70.
                    _filter = _orig_filter_78548874
                    write(''' \xb9''')
                    _v = VFFSL(SL,"item.NUMBER",True) # '$item.NUMBER' on line 12, col 97
                    if _v is not None: write(_filter(_v, rawExpr='$item.NUMBER')) # from line 12, col 97.
                    write('''">''')
                    _v = VFFSL(SL,"item.objname",True) # '$item.objname' on line 12, col 111
                    if _v is not None: write(_filter(_v, rawExpr='$item.objname')) # from line 12, col 111.
                    write('''</a><br><br>
''')
                elif VFFSL(SL,"item.TSTAT",True) == '1': # generated from line 13, col 9
                    write('''            <a class=green href="task?tid=''')
                    _v = VFFSL(SL,"item.taskid",True) # '$item.taskid' on line 14, col 43
                    if _v is not None: write(_filter(_v, rawExpr='$item.taskid')) # from line 14, col 43.
                    write('''" title="''')
                    _orig_filter_59976890 = _filter
                    filterName = 'DateFilter'
                    if self._CHEETAH__filters.has_key("DateFilter"):
                        _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                    else:
                        _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                    _v = VFFSL(SL,"item.DOCDATE",True) # '$item.DOCDATE' on line 14, col 82
                    if _v is not None: write(_filter(_v, rawExpr='$item.DOCDATE')) # from line 14, col 82.
                    _filter = _orig_filter_59976890
                    write(''' \xb9''')
                    _v = VFFSL(SL,"item.NUMBER",True) # '$item.NUMBER' on line 14, col 109
                    if _v is not None: write(_filter(_v, rawExpr='$item.NUMBER')) # from line 14, col 109.
                    write('''">''')
                    _v = VFFSL(SL,"item.objname",True) # '$item.objname' on line 14, col 123
                    if _v is not None: write(_filter(_v, rawExpr='$item.objname')) # from line 14, col 123.
                    write('''</a><br><br>
''')
                else: # generated from line 15, col 9
                    write('''            <a class=red href="task?tid=''')
                    _v = VFFSL(SL,"item.taskid",True) # '$item.taskid' on line 16, col 41
                    if _v is not None: write(_filter(_v, rawExpr='$item.taskid')) # from line 16, col 41.
                    write('''" title="''')
                    _orig_filter_24974925 = _filter
                    filterName = 'DateFilter'
                    if self._CHEETAH__filters.has_key("DateFilter"):
                        _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                    else:
                        _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                    _v = VFFSL(SL,"item.DOCDATE",True) # '$item.DOCDATE' on line 16, col 80
                    if _v is not None: write(_filter(_v, rawExpr='$item.DOCDATE')) # from line 16, col 80.
                    _filter = _orig_filter_24974925
                    write(''' \xb9''')
                    _v = VFFSL(SL,"item.NUMBER",True) # '$item.NUMBER' on line 16, col 107
                    if _v is not None: write(_filter(_v, rawExpr='$item.NUMBER')) # from line 16, col 107.
                    write('''">''')
                    _v = VFFSL(SL,"item.objname",True) # '$item.objname' on line 16, col 121
                    if _v is not None: write(_filter(_v, rawExpr='$item.objname')) # from line 16, col 121.
                    write('''</a><br><br>
''')
                write('''        
''')
        write('''  <hr>
''')
        if VFFSL(SL,"varExists",False)('$zd'): # generated from line 22, col 3
            for item in VFFSL(SL,"zd",True): # generated from line 23, col 5
                write('''        <a href="chgZone?id=''')
                _v = VFFSL(SL,"item.ZONEID",True) # '$item.ZONEID' on line 24, col 29
                if _v is not None: write(_filter(_v, rawExpr='$item.ZONEID')) # from line 24, col 29.
                write('''">''')
                _v = VFFSL(SL,"item.ZONENAME",True) # '$item.ZONENAME' on line 24, col 43
                if _v is not None: write(_filter(_v, rawExpr='$item.ZONENAME')) # from line 24, col 43.
                write('''</a> - ''')
                _v = VFFSL(SL,"item.CNTDOCS",True) # '$item.CNTDOCS' on line 24, col 64
                if _v is not None: write(_filter(_v, rawExpr='$item.CNTDOCS')) # from line 24, col 64.
                write('''
''')
                if VFFSL(SL,"item.CNTDOCS2",True) and VFFSL(SL,"item.CNTDOCS2",True) > 0: # generated from line 25, col 9
                    write('''            <font class="green">(''')
                    _v = VFFSL(SL,"item.CNTDOCS2",True) # '$item.CNTDOCS2' on line 26, col 34
                    if _v is not None: write(_filter(_v, rawExpr='$item.CNTDOCS2')) # from line 26, col 34.
                    write(''')</font>
''')
                write('''        <br>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_index= 'writeBody'

## END CLASS DEFINITION

if not hasattr(index, '_initCheetahAttributes'):
    templateAPIClass = getattr(index, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(index)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=index()).run()


