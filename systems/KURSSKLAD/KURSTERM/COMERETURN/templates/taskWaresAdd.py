#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336168.401
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:48 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\COMERETURN\\templates\\taskWaresAdd.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskWaresAdd(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData             at line 4, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''    <b><u>''')
        _v = VFFSL(SL,"FROMNAME",True) # '$FROMNAME' on line 5, col 11
        if _v is not None: write(_filter(_v, rawExpr='$FROMNAME')) # from line 5, col 11.
        write('''</u></b><br>
    <b>''')
        _orig_filter_90641021 = _filter
        filterName = 'DateFilter'
        if self._CHEETAH__filters.has_key("DateFilter"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"DOCDATE",True) # '$DOCDATE' on line 6, col 26
        if _v is not None: write(_filter(_v, rawExpr='$DOCDATE')) # from line 6, col 26.
        _filter = _orig_filter_90641021
        write('''</b> \xb9<b>''')
        _v = VFFSL(SL,"DOCNUM",True) # '$DOCNUM' on line 6, col 55
        if _v is not None: write(_filter(_v, rawExpr='$DOCNUM')) # from line 6, col 55.
        write('''</b><br>
    <b>(<u>''')
        _v = VFFSL(SL,"WCODE",True) # '$WCODE' on line 7, col 12
        if _v is not None: write(_filter(_v, rawExpr='$WCODE')) # from line 7, col 12.
        write('''</u>)</b> ''')
        _v = VFFSL(SL,"WNAME",True) # '$WNAME' on line 7, col 28
        if _v is not None: write(_filter(_v, rawExpr='$WNAME')) # from line 7, col 28.
        write('''<br>    
''')
        if VFFSL(SL,"VWUID",True): # generated from line 8, col 5
            write('''        <b>''')
            _v = VFFSL(SL,"VWUCODE",True) # '$VWUCODE' on line 9, col 12
            if _v is not None: write(_filter(_v, rawExpr='$VWUCODE')) # from line 9, col 12.
            write(''' = ''')
            _orig_filter_23632647 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"VWUFACTOR",True) # '$VWUFACTOR' on line 9, col 39
            if _v is not None: write(_filter(_v, rawExpr='$VWUFACTOR')) # from line 9, col 39.
            _filter = _orig_filter_23632647
            write(''' ''')
            _v = VFFSL(SL,"MWUCODE",True) # '$MWUCODE' on line 9, col 62
            if _v is not None: write(_filter(_v, rawExpr='$MWUCODE')) # from line 9, col 62.
            write(''' </b>
''')
        if VFFSL(SL,"varExists",False)('$ZID') and VFFSL(SL,"ZID",True): # generated from line 11, col 5
            write('''        <font color="gray">(''')
            _v = VFFSL(SL,"ZNAME",True) # '$ZNAME' on line 12, col 29
            if _v is not None: write(_filter(_v, rawExpr='$ZNAME')) # from line 12, col 29.
            write(''')</font>
''')
        write('''    <br>
''')
        if VFFSL(SL,"WSITENAME",True): # generated from line 15, col 5
            write('''        ''')
            if False:
                _('МО')
            _v = VFFSL(SL,"_",False)('МО') # "$_('\xcc\xce')" on line 16, col 9
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcc\xce')")) # from line 16, col 9.
            write(''': <b><u>''')
            _v = VFFSL(SL,"WSITENAME",True) # '$WSITENAME' on line 16, col 25
            if _v is not None: write(_filter(_v, rawExpr='$WSITENAME')) # from line 16, col 25.
            write('''</u></b><br>
''')
        write('''    <hr>
''')
        if VFFSL(SL,"prdate",True) and VFFSL(SL,"prdate",True) != '__.__.__': # generated from line 19, col 5
            dateid = 'id="::date"'
            amountid = 'id=":focus:float"'
        else: # generated from line 22, col 5
            dateid = 'id=":focus:date"'
            amountid = 'id="::float"'
        write('''    <form action=taskWaresAdd>
        <input type=hidden name=tid value=''')
        _v = VFFSL(SL,"tid",True) # '$tid' on line 27, col 43
        if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 27, col 43.
        write('''>
        <input type=hidden name=wid value=''')
        _v = VFFSL(SL,"wid",True) # '$wid' on line 28, col 43
        if _v is not None: write(_filter(_v, rawExpr='$wid')) # from line 28, col 43.
        write('''>
        ''')
        if False:
            _('Производство')
        _v = VFFSL(SL,"_",False)('Производство') # "$_('\xcf\xf0\xee\xe8\xe7\xe2\xee\xe4\xf1\xf2\xe2\xee')" on line 29, col 9
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xf0\xee\xe8\xe7\xe2\xee\xe4\xf1\xf2\xe2\xee')")) # from line 29, col 9.
        write(''': <input type=text size=6 ''')
        _v = VFFSL(SL,"dateid",True) # '$dateid' on line 29, col 53
        if _v is not None: write(_filter(_v, rawExpr='$dateid')) # from line 29, col 53.
        write(''' name=prdate value="''')
        _v = VFFSL(SL,"prdate",True) # '$prdate' on line 29, col 80
        if _v is not None: write(_filter(_v, rawExpr='$prdate')) # from line 29, col 80.
        write('''" autocomplete=false><br>
        <select name=wuid>
            <option value=''')
        _v = VFFSL(SL,"MWUID",True) # '$MWUID' on line 31, col 27
        if _v is not None: write(_filter(_v, rawExpr='$MWUID')) # from line 31, col 27.
        write('''>''')
        _v = VFFSL(SL,"MWUCODE",True) # '$MWUCODE' on line 31, col 34
        if _v is not None: write(_filter(_v, rawExpr='$MWUCODE')) # from line 31, col 34.
        write('''</option>        
''')
        if VFFSL(SL,"WTYPE",True)=='U' and VFFSL(SL,"VWUID",True): # generated from line 32, col 13
            write('''                <option value=''')
            _v = VFFSL(SL,"VWUID",True) # '$VWUID' on line 33, col 31
            if _v is not None: write(_filter(_v, rawExpr='$VWUID')) # from line 33, col 31.
            write('''>''')
            _v = VFFSL(SL,"VWUCODE",True) # '$VWUCODE' on line 33, col 38
            if _v is not None: write(_filter(_v, rawExpr='$VWUCODE')) # from line 33, col 38.
            write('''</option>
''')
        write('''        </select> :
\t\t<input type=text name=amount ''')
        _v = VFFSL(SL,"amountid",True) # '$amountid' on line 36, col 32
        if _v is not None: write(_filter(_v, rawExpr='$amountid')) # from line 36, col 32.
        write(''' value="''')
        _orig_filter_26348548 = _filter
        filterName = 'Quantity'
        if self._CHEETAH__filters.has_key("Quantity"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"amount",True) # '$amount' on line 36, col 65
        if _v is not None: write(_filter(_v, rawExpr='$amount')) # from line 36, col 65.
        _filter = _orig_filter_26348548
        write('''" size="6"><br><br>
        ''')
        if False:
            _('ШК Поддона')
        _v = VFFSL(SL,"_",False)('ШК Поддона') # "$_('\xd8\xca \xcf\xee\xe4\xe4\xee\xed\xe0')" on line 37, col 9
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd8\xca \xcf\xee\xe4\xe4\xee\xed\xe0')")) # from line 37, col 9.
        write(''': <input type=text size=7 id="barcode:scan:text" name=barcode>
        <button type="submit">OK</button>
\t</form>     

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskWaresAdd= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskWaresAdd, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskWaresAdd, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskWaresAdd)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskWaresAdd()).run()


