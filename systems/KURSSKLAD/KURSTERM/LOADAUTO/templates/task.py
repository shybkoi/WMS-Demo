#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.cheetahutils import coalesceValue
from systems.KURSSKLAD.cheetahutils import getNumFromName
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336169.7390001
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:49 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\LOADAUTO\\templates\\task.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class task(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 7, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''    <u> ''')
        _v = VFFSL(SL,"SNAME",True) # '$SNAME' on line 8, col 9
        if _v is not None: write(_filter(_v, rawExpr='$SNAME')) # from line 8, col 9.
        write(''' </u><br>    
''')
        coma = ','
        canEnd = True
        write('''    <b>''')
        _v = VFFSL(SL,"INFONAME",True) # '$INFONAME' on line 11, col 8
        if _v is not None: write(_filter(_v, rawExpr='$INFONAME')) # from line 11, col 8.
        write('''</b><br>
''')
        if VFFSL(SL,"varExists",False)('$TPRIORITY') and VFFSL(SL,"TPRIORITY",True): # generated from line 12, col 2
            write('''\t\t''')
            _orig_filter_68238853 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"TPRIORITY",True) # '$TPRIORITY' on line 13, col 19
            if _v is not None: write(_filter(_v, rawExpr='$TPRIORITY')) # from line 13, col 19.
            _filter = _orig_filter_68238853
            write(''':
''')
        write('''\t<a href="taskPriority?tid=''')
        _v = VFFSL(SL,"TID",True) # '$TID' on line 15, col 28
        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 15, col 28.
        write('''" title="''')
        if False:
            _('Изменить приоритет')
        _v = VFFSL(SL,"_",False)('Изменить приоритет') # "$_('\xc8\xe7\xec\xe5\xed\xe8\xf2\xfc \xef\xf0\xe8\xee\xf0\xe8\xf2\xe5\xf2')" on line 15, col 41
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc8\xe7\xec\xe5\xed\xe8\xf2\xfc \xef\xf0\xe8\xee\xf0\xe8\xf2\xe5\xf2')")) # from line 15, col 41.
        write('''">''')
        _orig_filter_23226290 = _filter
        filterName = 'DateTimeFilter'
        if self._CHEETAH__filters.has_key("DateTimeFilter"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"plandt",True) # '$plandt' on line 15, col 90
        if _v is not None: write(_filter(_v, rawExpr='$plandt')) # from line 15, col 90.
        write(''' ''')
        _filter = _orig_filter_23226290
        write('''</a><br>
    
''')
        if VFFSL(SL,"varExists",False)('$TCAPACITY') and VFFSL(SL,"TCAPACITY",True): # generated from line 17, col 2
            write('''\t\t''')
            if False:
                _('Поддонов')
            _v = VFFSL(SL,"_",False)('Поддонов') # "$_('\xcf\xee\xe4\xe4\xee\xed\xee\xe2')" on line 18, col 3
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xee\xe4\xe4\xee\xed\xee\xe2')")) # from line 18, col 3.
            write(''' <b>~ <u>''')
            _orig_filter_97370552 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"TCAPACITY",True) # '$TCAPACITY' on line 18, col 43
            if _v is not None: write(_filter(_v, rawExpr='$TCAPACITY')) # from line 18, col 43.
            write(''' ''')
            _filter = _orig_filter_97370552
            write('''</u></b>
''')
        write('''\t
    <hr>    
''')
        clientName = ''
        docID = 0
        if VFFSL(SL,"varExists",False)('$datalist') and VFFSL(SL,"datalist",True): # generated from line 24, col 5
            for item in VFFSL(SL,"datalist",True): # generated from line 25, col 9
                if VFFSL(SL,"clientName",True) != VFFSL(SL,"item.CLIENTNAME",True): # generated from line 26, col 13
                    if VFFSL(SL,"clientName",True) != '': # generated from line 27, col 17
                        write('''                    <br>
''')
                    write('''                <b><u>''')
                    _v = VFFSL(SL,"item.CLIENTNAME",True) # '$item.CLIENTNAME' on line 30, col 23
                    if _v is not None: write(_filter(_v, rawExpr='$item.CLIENTNAME')) # from line 30, col 23.
                    write('''</u><b>
''')
                    clientName = VFFSL(SL,"item.CLIENTNAME",True)
                    docID = 0
                write('''            
''')
                if VFFSL(SL,"docID",True) != VFFSL(SL,"item.DOCID",True): # generated from line 35, col 13
                    write('''                <br>
                <u>''')
                    _v = VFFSL(SL,"item.DNUM",True) # '$item.DNUM' on line 37, col 20
                    if _v is not None: write(_filter(_v, rawExpr='$item.DNUM')) # from line 37, col 20.
                    write('''</u>:
''')
                    docID = VFFSL(SL,"item.DOCID",True)
                else: # generated from line 39, col 13
                    write('''                ''')
                    _v = VFFSL(SL,"coma",True) # '$coma' on line 40, col 17
                    if _v is not None: write(_filter(_v, rawExpr='$coma')) # from line 40, col 17.
                    write('''
''')
                write('''            
''')
                if VFFSL(SL,"item.TSTAT",True) and VFFSL(SL,"item.TSTAT",True) == '2': # generated from line 43, col 13
                    if VFFSL(SL,"item.TUID",True): # generated from line 44, col 17
                        write('''                    <font class="green">''')
                        _v = VFFSL(SL,"item.TUTYPESHORT",True) # '$item.TUTYPESHORT' on line 45, col 41
                        if _v is not None: write(_filter(_v, rawExpr='$item.TUTYPESHORT')) # from line 45, col 41.
                        _v = VFFSL(SL,"getNumFromName",False)(VFFSL(SL,"item.TUNAME",True)) # '$getNumFromName($item.TUNAME)' on line 45, col 58
                        if _v is not None: write(_filter(_v, rawExpr='$getNumFromName($item.TUNAME)')) # from line 45, col 58.
                        write('''</font> =
''')
                    write('''                <font class="green">''')
                    _v = VFFSL(SL,"item.TNUMBER",True) # '$item.TNUMBER' on line 47, col 37
                    if _v is not None: write(_filter(_v, rawExpr='$item.TNUMBER')) # from line 47, col 37.
                    write('''</font>
''')
                else: # generated from line 48, col 13
                    if VFFSL(SL,"item.TUID",True): # generated from line 49, col 17
                        if VFFSL(SL,"item.TUSTAT",True) == '2': # generated from line 50, col 21
                            write('''                        <font class="green">''')
                            _v = VFFSL(SL,"item.TUTYPESHORT",True) # '$item.TUTYPESHORT' on line 51, col 45
                            if _v is not None: write(_filter(_v, rawExpr='$item.TUTYPESHORT')) # from line 51, col 45.
                            _v = VFFSL(SL,"getNumFromName",False)(VFFSL(SL,"item.TUNAME",True)) # '$getNumFromName($item.TUNAME)' on line 51, col 62
                            if _v is not None: write(_filter(_v, rawExpr='$getNumFromName($item.TUNAME)')) # from line 51, col 62.
                            write('''</font> =
''')
                        else: # generated from line 52, col 21
                            write('''                        <font class="red">''')
                            _v = VFFSL(SL,"item.TUTYPESHORT",True) # '$item.TUTYPESHORT' on line 53, col 43
                            if _v is not None: write(_filter(_v, rawExpr='$item.TUTYPESHORT')) # from line 53, col 43.
                            _v = VFFSL(SL,"getNumFromName",False)(VFFSL(SL,"item.TUNAME",True)) # '$getNumFromName($item.TUNAME)' on line 53, col 60
                            if _v is not None: write(_filter(_v, rawExpr='$getNumFromName($item.TUNAME)')) # from line 53, col 60.
                            write('''</font> =
''')
                    write('''                

''')
                    if VFFSL(SL,"item.TNUMBER",True): # generated from line 58, col 17
                        str = VFFSL(SL,"item.TNUMBER",True)
                        if VFFSL(SL,"item.TSNAME",True): # generated from line 60, col 21
                            str += '(' +VFFSL(SL,"item.TSNAME",True) +')'
                    else: # generated from line 63, col 17
                        str = '?????'
                    write('''
''')
                    if VFFSL(SL,"item.DSTAT",True) != 'e' or VFFSL(SL,"item.TID",True): # generated from line 67, col 17
                        write('''                    <font class="red">''')
                        _v = VFFSL(SL,"str",True) # '$str' on line 68, col 39
                        if _v is not None: write(_filter(_v, rawExpr='$str')) # from line 68, col 39.
                        write('''</font>
''')
                    else: # generated from line 69, col 17
                        write('''                    <font class="yellow">''')
                        _v = VFFSL(SL,"str",True) # '$str' on line 70, col 42
                        if _v is not None: write(_filter(_v, rawExpr='$str')) # from line 70, col 42.
                        write('''</font>
''')
                write('''
''')
                if VFFSL(SL,"item.DSTAT",True) != 'e': # generated from line 74, col 13
                    canEnd = False
        if VFFSL(SL,"canEnd",True): # generated from line 79, col 5
            write("""        <hr>
        <a href='gateTaskEnd?tid=""")
            _v = VFFSL(SL,"TID",True) # '$TID' on line 81, col 34
            if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 81, col 34.
            write("""'>""")
            if False:
                _('Завершить')
            _v = VFFSL(SL,"_",False)('Завершить') # "$_('\xc7\xe0\xe2\xe5\xf0\xf8\xe8\xf2\xfc')" on line 81, col 40
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc7\xe0\xe2\xe5\xf0\xf8\xe8\xf2\xfc')")) # from line 81, col 40.
            write('''</a>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''



''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_task= 'writeBody'

## END CLASS DEFINITION

if not hasattr(task, '_initCheetahAttributes'):
    templateAPIClass = getattr(task, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(task)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=task()).run()


