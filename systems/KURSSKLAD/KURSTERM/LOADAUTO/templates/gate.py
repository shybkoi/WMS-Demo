#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.cheetahutils import coalesceValue
from systems.KURSSKLAD.cheetahutils import getNumFromName
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336169.6359999
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:49 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\LOADAUTO\\templates\\gate.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class gate(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 7, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''    <b><u> ''')
        _v = VFFSL(SL,"GNAME",True) # '$GNAME' on line 8, col 12
        if _v is not None: write(_filter(_v, rawExpr='$GNAME')) # from line 8, col 12.
        write(''' </u></b><br>
    
''')
        coma = ','
        canEnd = True
        if VFFSL(SL,"tid",True): # generated from line 12, col 5
            write('''        <b><u> ''')
            _v = VFFSL(SL,"ANAME",True) # '$ANAME' on line 13, col 16
            if _v is not None: write(_filter(_v, rawExpr='$ANAME')) # from line 13, col 16.
            write(''' </u></b><br>
        ''')
            _orig_filter_63962175 = _filter
            filterName = 'DateTimeFilter'
            if self._CHEETAH__filters.has_key("DateTimeFilter"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"plandt",True) # '$plandt' on line 14, col 32
            if _v is not None: write(_filter(_v, rawExpr='$plandt')) # from line 14, col 32.
            write(''' ''')
            _filter = _orig_filter_63962175
            write('''
        <hr>    
''')
            clientName = ''
            docID = 0
            if VFFSL(SL,"varExists",False)('$datalist') and VFFSL(SL,"datalist",True): # generated from line 18, col 9
                for item in VFFSL(SL,"datalist",True): # generated from line 19, col 13
                    if VFFSL(SL,"clientName",True) != VFFSL(SL,"item.CLIENTNAME",True): # generated from line 20, col 17
                        if VFFSL(SL,"clientName",True) != '': # generated from line 21, col 21
                            write('''                        <br>
''')
                        write('''                    <b><u>''')
                        _v = VFFSL(SL,"item.CLIENTNAME",True) # '$item.CLIENTNAME' on line 24, col 27
                        if _v is not None: write(_filter(_v, rawExpr='$item.CLIENTNAME')) # from line 24, col 27.
                        write('''</u><b>
''')
                        clientName = VFFSL(SL,"item.CLIENTNAME",True)
                        docID = 0
                    write('''                
''')
                    if VFFSL(SL,"docID",True) != VFFSL(SL,"item.DOCID",True): # generated from line 29, col 17
                        write('''                    <br>
                    <u>''')
                        _v = VFFSL(SL,"item.DNUM",True) # '$item.DNUM' on line 31, col 24
                        if _v is not None: write(_filter(_v, rawExpr='$item.DNUM')) # from line 31, col 24.
                        write('''</u>:
''')
                        docID = VFFSL(SL,"item.DOCID",True)
                    else: # generated from line 33, col 17
                        write('''                    ''')
                        _v = VFFSL(SL,"coma",True) # '$coma' on line 34, col 21
                        if _v is not None: write(_filter(_v, rawExpr='$coma')) # from line 34, col 21.
                        write('''
''')
                    write('''                
''')
                    if VFFSL(SL,"item.TSTAT",True) == '2': # generated from line 37, col 17
                        write('''                    <font class="green">''')
                        _v = VFFSL(SL,"item.TNUMBER",True) # '$item.TNUMBER' on line 38, col 41
                        if _v is not None: write(_filter(_v, rawExpr='$item.TNUMBER')) # from line 38, col 41.
                        write('''</font>
''')
                    else: # generated from line 39, col 17
                        canEnd = False
                        str = VFFSL(SL,"item.TNUMBER",True)+'('+VFFSL(SL,"item.TSNAME",True)+')'
                        write('''                    <font class="red">''')
                        _v = VFFSL(SL,"str",True) # '$str' on line 42, col 39
                        if _v is not None: write(_filter(_v, rawExpr='$str')) # from line 42, col 39.
                        write('''</font>
''')
            if VFFSL(SL,"canEnd",True): # generated from line 46, col 9
                write("""            <hr>
            <a href='gateTaskEnd?tid=""")
                _v = VFFSL(SL,"TID",True) # '$TID' on line 48, col 38
                if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 48, col 38.
                write("""'>""")
                if False:
                    _('Завершить')
                _v = VFFSL(SL,"_",False)('Завершить') # "$_('\xc7\xe0\xe2\xe5\xf0\xf8\xe8\xf2\xfc')" on line 48, col 44
                if _v is not None: write(_filter(_v, rawExpr="$_('\xc7\xe0\xe2\xe5\xf0\xf8\xe8\xf2\xfc')")) # from line 48, col 44.
                write('''</a>
''')
        else: # generated from line 50, col 5
            write('''        <form action=gate>
            <input type=hidden name=id value=''')
            _v = VFFSL(SL,"gid",True) # '$gid' on line 52, col 46
            if _v is not None: write(_filter(_v, rawExpr='$gid')) # from line 52, col 46.
            write('''>
            \xd8\xca: <input type="text" id="barcode:scan:text" name="barcode" title="''')
            if False:
                _('Авто')
            _v = VFFSL(SL,"_",False)('Авто') # "$_('\xc0\xe2\xf2\xee')" on line 53, col 81
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc0\xe2\xf2\xee')")) # from line 53, col 81.
            write(''',''')
            if False:
                _('Ворота')
            _v = VFFSL(SL,"_",False)('Ворота') # "$_('\xc2\xee\xf0\xee\xf2\xe0')" on line 53, col 92
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc2\xee\xf0\xee\xf2\xe0')")) # from line 53, col 92.
            write('''"><br>
        </form>
        <hr>
''')
            if VFFSL(SL,"varExists",False)('$datalist') and VFFSL(SL,"datalist",True): # generated from line 56, col 9
                for item in VFFSL(SL,"datalist",True): # generated from line 57, col 13
                    write('''                <b><u>''')
                    _v = VFFSL(SL,"item.ANAME",True) # '$item.ANAME' on line 58, col 23
                    if _v is not None: write(_filter(_v, rawExpr='$item.ANAME')) # from line 58, col 23.
                    write('''</u></b><br>''')
                    _orig_filter_31072735 = _filter
                    filterName = 'DateTimeFilter'
                    if self._CHEETAH__filters.has_key("DateTimeFilter"):
                        _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                    else:
                        _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                    _v = VFFSL(SL,"item.TPLANDT",True) # '$item.TPLANDT' on line 58, col 69
                    if _v is not None: write(_filter(_v, rawExpr='$item.TPLANDT')) # from line 58, col 69.
                    _filter = _orig_filter_31072735
                    write('''<br><br>                
''')
        write('''\t
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''



''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_gate= 'writeBody'

## END CLASS DEFINITION

if not hasattr(gate, '_initCheetahAttributes'):
    templateAPIClass = getattr(gate, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(gate)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=gate()).run()


