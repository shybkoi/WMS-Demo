#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336169.694
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:49 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\LOADAUTO\\templates\\pallet.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class pallet(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 4, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        if VFFSL(SL,"TID_GATEAUTO",True): # generated from line 5, col 2
            write('''\t\t<u>''')
            _v = VFFSL(SL,"GNAME",True) # '$GNAME' on line 6, col 6
            if _v is not None: write(_filter(_v, rawExpr='$GNAME')) # from line 6, col 6.
            write('''</u><br>
\t\t<font class="yellow">''')
            _v = VFFSL(SL,"ANAME",True) # '$ANAME' on line 7, col 24
            if _v is not None: write(_filter(_v, rawExpr='$ANAME')) # from line 7, col 24.
            write('''</font><br>
\t\t''')
            _orig_filter_45071542 = _filter
            filterName = 'DateTimeFilter'
            if self._CHEETAH__filters.has_key("DateTimeFilter"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"PLANDATETIME",True) # '$PLANDATETIME' on line 8, col 25
            if _v is not None: write(_filter(_v, rawExpr='$PLANDATETIME')) # from line 8, col 25.
            write(''' ''')
            _filter = _orig_filter_45071542
            write('''
\t\t<hr>
''')
        write('''\t
    ''')
        _v = VFFSL(SL,"CLIENTNAME",True) # '$CLIENTNAME' on line 12, col 5
        if _v is not None: write(_filter(_v, rawExpr='$CLIENTNAME')) # from line 12, col 5.
        write('''<br>
    ''')
        _orig_filter_88845666 = _filter
        filterName = 'DateFilter2'
        if self._CHEETAH__filters.has_key("DateFilter2"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"DDATE",True) # '$DDATE' on line 13, col 25
        if _v is not None: write(_filter(_v, rawExpr='$DDATE')) # from line 13, col 25.
        write(''' ''')
        _filter = _orig_filter_88845666
        write(''' ''')
        if False:
            _('№')
        _v = VFFSL(SL,"_",False)('№') # "$_('\xb9')" on line 13, col 45
        if _v is not None: write(_filter(_v, rawExpr="$_('\xb9')")) # from line 13, col 45.
        write(''' <b>''')
        _v = VFFSL(SL,"DNUM",True) # '$DNUM' on line 13, col 56
        if _v is not None: write(_filter(_v, rawExpr='$DNUM')) # from line 13, col 56.
        write('''</b><br>
\t<b>''')
        _v = VFFSL(SL,"PNUMBER",True) # '$PNUMBER' on line 14, col 5
        if _v is not None: write(_filter(_v, rawExpr='$PNUMBER')) # from line 14, col 5.
        write('''</b>(''')
        _v = VFFSL(SL,"SNAME",True) # '$SNAME' on line 14, col 18
        if _v is not None: write(_filter(_v, rawExpr='$SNAME')) # from line 14, col 18.
        write(''')<br>
''')
        if VFFSL(SL,"TUID",True): # generated from line 15, col 5
            write('''        <b><u>''')
            _v = VFFSL(SL,"TUNAME",True) # '$TUNAME' on line 16, col 15
            if _v is not None: write(_filter(_v, rawExpr='$TUNAME')) # from line 16, col 15.
            write('''</u></b><br>
''')
        if VFFSL(SL,"TSTAT_LOADPALLET",True) == '2': # generated from line 18, col 5
            write('''        <font class="green">''')
            if False:
                _('Выполнено')
            _v = VFFSL(SL,"_",False)('Выполнено') # "$_('\xc2\xfb\xef\xee\xeb\xed\xe5\xed\xee')" on line 19, col 29
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc2\xfb\xef\xee\xeb\xed\xe5\xed\xee')")) # from line 19, col 29.
            write('''</font>
''')
            # <hr>
            # <a href = 'palletCancel?id=$TID_SELECT'>$_('Отменить')</a>
        else: # generated from line 22, col 5
            write('''        <font class="red">''')
            if False:
                _('Не выполнено')
            _v = VFFSL(SL,"_",False)('Не выполнено') # "$_('\xcd\xe5 \xe2\xfb\xef\xee\xeb\xed\xe5\xed\xee')" on line 23, col 27
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xe5 \xe2\xfb\xef\xee\xeb\xed\xe5\xed\xee')")) # from line 23, col 27.
            write('''</font>
''')
        write('''\t
\t<br><br>
''')
        if VFFSL(SL,"TID_SELECT",True): # generated from line 27, col 2
            write('''\t\t''')
            if False:
                _('Отборка')
            _v = VFFSL(SL,"_",False)('Отборка') # "$_('\xce\xf2\xe1\xee\xf0\xea\xe0')" on line 28, col 3
            if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xf2\xe1\xee\xf0\xea\xe0')")) # from line 28, col 3.
            write(''' \xb9<b>''')
            _v = VFFSL(SL,"TID_SELECT",True) # '$TID_SELECT' on line 28, col 21
            if _v is not None: write(_filter(_v, rawExpr='$TID_SELECT')) # from line 28, col 21.
            write('''</b><br>
''')
            if VFFSL(SL,"MANSELECT",True): # generated from line 29, col 3
                write('''\t\t\t''')
                _v = VFFSL(SL,"MANSELECT",True) # '$MANSELECT' on line 30, col 4
                if _v is not None: write(_filter(_v, rawExpr='$MANSELECT')) # from line 30, col 4.
                write('''<br>
''')
            write('''\t\t<br>
''')
        write('''\t
''')
        if VFFSL(SL,"TID_LOADPALLET",True): # generated from line 35, col 2
            write('''\t\t''')
            if False:
                _('Погрузка')
            _v = VFFSL(SL,"_",False)('Погрузка') # "$_('\xcf\xee\xe3\xf0\xf3\xe7\xea\xe0')" on line 36, col 3
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xee\xe3\xf0\xf3\xe7\xea\xe0')")) # from line 36, col 3.
            write(''' \xb9<b>''')
            _v = VFFSL(SL,"TID_LOADPALLET",True) # '$TID_LOADPALLET' on line 36, col 22
            if _v is not None: write(_filter(_v, rawExpr='$TID_LOADPALLET')) # from line 36, col 22.
            write('''</b><br>
''')
            if VFFSL(SL,"MANLOAD",True): # generated from line 37, col 3
                write('''\t\t\t''')
                _v = VFFSL(SL,"MANLOAD",True) # '$MANLOAD' on line 38, col 4
                if _v is not None: write(_filter(_v, rawExpr='$MANLOAD')) # from line 38, col 4.
                write('''<br>
''')
            write('''\t\t<br>
''')
        write('''\t
''')
        if VFFSL(SL,"TID_LOADDOC",True): # generated from line 43, col 2
            write('''\t\t''')
            if False:
                _('Документ')
            _v = VFFSL(SL,"_",False)('Документ') # "$_('\xc4\xee\xea\xf3\xec\xe5\xed\xf2')" on line 44, col 3
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xee\xea\xf3\xec\xe5\xed\xf2')")) # from line 44, col 3.
            write(''' \xb9<b>''')
            _v = VFFSL(SL,"TID_LOADDOC",True) # '$TID_LOADDOC' on line 44, col 22
            if _v is not None: write(_filter(_v, rawExpr='$TID_LOADDOC')) # from line 44, col 22.
            write('''</b><br>
''')
            if VFFSL(SL,"MANLOADDOC",True): # generated from line 45, col 3
                write('''\t\t\t''')
                _v = VFFSL(SL,"MANLOADDOC",True) # '$MANLOADDOC' on line 46, col 4
                if _v is not None: write(_filter(_v, rawExpr='$MANLOADDOC')) # from line 46, col 4.
                write('''<br>
''')
            write('''\t\t<br>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_pallet= 'writeBody'

## END CLASS DEFINITION

if not hasattr(pallet, '_initCheetahAttributes'):
    templateAPIClass = getattr(pallet, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(pallet)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=pallet()).run()


