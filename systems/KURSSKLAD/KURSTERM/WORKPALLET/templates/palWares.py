#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main
from systems.KURSSKLAD.cheetahutils import viewQuantity

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336171.5669999
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:51 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\WORKPALLET\\templates\\palWares.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class palWares(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData     at line 5, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        if VFFSL(SL,"varExists",False)('$PAL_NUM') and VFFSL(SL,"PAL_NUM",True): # generated from line 6, col 5
            write('''\t\t<b><u>''')
            _v = VFFSL(SL,"PAL_NUM",True) # '$PAL_NUM' on line 7, col 9
            if _v is not None: write(_filter(_v, rawExpr='$PAL_NUM')) # from line 7, col 9.
            write('''</u></b>(''')
            _v = VFFSL(SL,"PAL_SNAME",True) # '$PAL_SNAME' on line 7, col 26
            if _v is not None: write(_filter(_v, rawExpr='$PAL_SNAME')) # from line 7, col 26.
            write(''')
''')
        else : # generated from line 8, col 2
            write('''\t\t<b>''')
            _v = VFFSL(SL,"PAL_SNAME",True) # '$PAL_SNAME' on line 9, col 6
            if _v is not None: write(_filter(_v, rawExpr='$PAL_SNAME')) # from line 9, col 6.
            write('''</b>
''')
        if VFFSL(SL,"varExists",False)('$PALSELECT_TASKID') and VFFSL(SL,"PALSELECT_TASKID",True): # generated from line 11, col 2
            write('''    <hr>
''')
            if VFFSL(SL,"varExists",False)('$PALSELECT_CLIENTNAME') and VFFSL(SL,"PALSELECT_CLIENTNAME",True): # generated from line 13, col 9
                write('''            <b><u>''')
                _v = VFFSL(SL,"PALSELECT_CLIENTNAME",True) # '$PALSELECT_CLIENTNAME' on line 14, col 19
                if _v is not None: write(_filter(_v, rawExpr='$PALSELECT_CLIENTNAME')) # from line 14, col 19.
                write('''</u></b><br>
''')
            if VFFSL(SL,"varExists",False)('$PALSELECT_DOCID') and VFFSL(SL,"PALSELECT_DOCID",True): # generated from line 16, col 9
                write('''            ''')
                _orig_filter_56792194 = _filter
                filterName = 'DateFilter2'
                if self._CHEETAH__filters.has_key("DateFilter2"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"PALSELECT_DOCDATE",True) # '$PALSELECT_DOCDATE' on line 17, col 32
                if _v is not None: write(_filter(_v, rawExpr='$PALSELECT_DOCDATE')) # from line 17, col 32.
                _filter = _orig_filter_56792194
                write(''' ''')
                if False:
                    _('№')
                _v = VFFSL(SL,"_",False)('№') # "$_('\xb9')" on line 17, col 63
                if _v is not None: write(_filter(_v, rawExpr="$_('\xb9')")) # from line 17, col 63.
                write(''' ''')
                _v = VFFSL(SL,"PALSELECT_DOCNUM",True) # '$PALSELECT_DOCNUM' on line 17, col 71
                if _v is not None: write(_filter(_v, rawExpr='$PALSELECT_DOCNUM')) # from line 17, col 71.
                write(''' <br>
''')
            write('''        ''')
            _v = VFFSL(SL,"PALSELECT_TASKID",True) # '$PALSELECT_TASKID' on line 19, col 9
            if _v is not None: write(_filter(_v, rawExpr='$PALSELECT_TASKID')) # from line 19, col 9.
            write('''
''')
            if VFFSL(SL,"varExists",False)('$PALSELECT_MANFIO') and VFFSL(SL,"PALSELECT_MANFIO",True): # generated from line 20, col 9
                write('''            - <b>''')
                _v = VFFSL(SL,"PALSELECT_MANFIO",True) # '$PALSELECT_MANFIO' on line 21, col 18
                if _v is not None: write(_filter(_v, rawExpr='$PALSELECT_MANFIO')) # from line 21, col 18.
                write('''</b>
''')
            write('''    <hr>
''')
        else: # generated from line 24, col 5
            write('''        <br><br>
''')
        write('''    <b><u>(''')
        _v = VFFSL(SL,"WCODE",True) # '$WCODE' on line 27, col 12
        if _v is not None: write(_filter(_v, rawExpr='$WCODE')) # from line 27, col 12.
        write(''')</u></b>''')
        _v = VFFSL(SL,"WNAME",True) # '$WNAME' on line 27, col 27
        if _v is not None: write(_filter(_v, rawExpr='$WNAME')) # from line 27, col 27.
        write('''<br>
''')
        if VFFSL(SL,"varExists",False)('$WSITENAME') and VFFSL(SL,"WSITENAME",True): # generated from line 28, col 5
            write('''        <font color="gray">''')
            _v = VFFSL(SL,"WSITENAME",True) # '$WSITENAME' on line 29, col 28
            if _v is not None: write(_filter(_v, rawExpr='$WSITENAME')) # from line 29, col 28.
            write('''</font>
''')
        write('''    <br>

''')
        if VFFSL(SL,"varExists",False)('$datalist'): # generated from line 33, col 5
            if len(VFFSL(SL,"datalist",True))>0: # generated from line 34, col 9
                write('''            <form action=palWaresMove>
''')
            write('''        <table>
            <thead>
                <tr>
                    <th>''')
            if False:
                _('Дата')
            _v = VFFSL(SL,"_",False)('Дата') # "$_('\xc4\xe0\xf2\xe0')" on line 40, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xe0\xf2\xe0')")) # from line 40, col 25.
            write('''</th>
                    <th>''')
            if False:
                _('Кол-во')
            _v = VFFSL(SL,"_",False)('Кол-во') # "$_('\xca\xee\xeb-\xe2\xee')" on line 41, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xee\xeb-\xe2\xee')")) # from line 41, col 25.
            write('''</th>
                    <th><select name=wuid>
''')
            if VFFSL(SL,"VWUID",True): # generated from line 43, col 27
                write('''                            <option value=''')
                _v = VFFSL(SL,"VWUID",True) # '$VWUID' on line 44, col 43
                if _v is not None: write(_filter(_v, rawExpr='$VWUID')) # from line 44, col 43.
                write('''>''')
                _v = VFFSL(SL,"VWUCODE",True) # '$VWUCODE' on line 44, col 50
                if _v is not None: write(_filter(_v, rawExpr='$VWUCODE')) # from line 44, col 50.
                write('''</option>
''')
            write('''                            <option value=''')
            _v = VFFSL(SL,"MWUID",True) # '$MWUID' on line 46, col 43
            if _v is not None: write(_filter(_v, rawExpr='$MWUID')) # from line 46, col 43.
            write('''>''')
            _v = VFFSL(SL,"MWUCODE",True) # '$MWUCODE' on line 46, col 50
            if _v is not None: write(_filter(_v, rawExpr='$MWUCODE')) # from line 46, col 50.
            write('''</option>
                        </select>
                    </th>
                <tr>
            </thead>
            <tbody>
''')
            for item in VFFSL(SL,"datalist",True): # generated from line 52, col 13
                write('''                <tr>
                    <td>''')
                _orig_filter_75924302 = _filter
                filterName = 'DateFilter2'
                if self._CHEETAH__filters.has_key("DateFilter2"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.productdate",True) # '$item.productdate' on line 54, col 44
                if _v is not None: write(_filter(_v, rawExpr='$item.productdate')) # from line 54, col 44.
                _filter = _orig_filter_75924302
                write('''</td>
                    <td>''')
                _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.AMOUNT",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($item.AMOUNT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 55, col 25
                if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.AMOUNT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 55, col 25.
                write('''(<b><u>''')
                _orig_filter_93519472 = _filter
                filterName = 'Quantity'
                if self._CHEETAH__filters.has_key("Quantity"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.AMOUNT",True) # '$item.AMOUNT' on line 55, col 115
                if _v is not None: write(_filter(_v, rawExpr='$item.AMOUNT')) # from line 55, col 115.
                _filter = _orig_filter_93519472
                write('''</u></b>)</td>
''')
                if VFFSL(SL,"item.WLNUMBER",True): # generated from line 56, col 17
                    write('''                    <td><input name=wl''')
                    _v = VFFSL(SL,"item.WLOTID",True) # '$item.WLOTID' on line 57, col 39
                    if _v is not None: write(_filter(_v, rawExpr='$item.WLOTID')) # from line 57, col 39.
                    write(''' id=":scan:float" type=text size=6 title="''')
                    _v = VFN(VFFSL(SL,"item.WLNUMBER",True),"replace",False)('"',"'") # '$item.WLNUMBER.replace(\'"\',"\'")' on line 57, col 93
                    if _v is not None: write(_filter(_v, rawExpr='$item.WLNUMBER.replace(\'"\',"\'")')) # from line 57, col 93.
                    write('''" value=0></td>
''')
                else: # generated from line 58, col 17
                    write('''                    <td><input name=wl''')
                    _v = VFFSL(SL,"item.WLOTID",True) # '$item.WLOTID' on line 59, col 39
                    if _v is not None: write(_filter(_v, rawExpr='$item.WLOTID')) # from line 59, col 39.
                    write(''' id=":scan:float" type=text size=6 value=0></td>
''')
                write('''                </tr>
''')
            write('''            </tbody>
        </table>
''')
            if len(VFFSL(SL,"datalist",True))>0: # generated from line 65, col 9
                write('''                <input type=hidden name=pid value=''')
                _v = VFFSL(SL,"PAL_ID",True) # '$PAL_ID' on line 66, col 51
                if _v is not None: write(_filter(_v, rawExpr='$PAL_ID')) # from line 66, col 51.
                write('''>
                <input type=hidden name=wid value=''')
                _v = VFFSL(SL,"WID",True) # '$WID' on line 67, col 51
                if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 67, col 51.
                write('''>
                <input type=hidden name=ctm value="''')
                _v = VFFSL(SL,"CURRENTDATETIME",True) # '$CURRENTDATETIME' on line 68, col 52
                if _v is not None: write(_filter(_v, rawExpr='$CURRENTDATETIME')) # from line 68, col 52.
                write('''">
                ''')
                if False:
                    _('ШК')
                _v = VFFSL(SL,"_",False)('ШК') # "$_('\xd8\xca')" on line 69, col 17
                if _v is not None: write(_filter(_v, rawExpr="$_('\xd8\xca')")) # from line 69, col 17.
                write(''': <input type="text" id=":scan:text" name="barcode" value="" title="''')
                if False:
                    _('Паллет')
                _v = VFFSL(SL,"_",False)('Паллет') # "$_('\xcf\xe0\xeb\xeb\xe5\xf2')" on line 69, col 93
                if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xe0\xeb\xeb\xe5\xf2')")) # from line 69, col 93.
                write(''', ''')
                if False:
                    _('Товар')
                _v = VFFSL(SL,"_",False)('Товар') # "$_('\xd2\xee\xe2\xe0\xf0')" on line 69, col 107
                if _v is not None: write(_filter(_v, rawExpr="$_('\xd2\xee\xe2\xe0\xf0')")) # from line 69, col 107.
                write('''">
                <input type=submit value=Ok />
            </form>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_palWares= 'writeBody'

## END CLASS DEFINITION

if not hasattr(palWares, '_initCheetahAttributes'):
    templateAPIClass = getattr(palWares, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(palWares)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=palWares()).run()


