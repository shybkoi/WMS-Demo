#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main
from systems.KURSSKLAD.cheetahutils import viewQuantity
from systems.KURSSKLAD.cheetahutils import TimeStampToDate

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336171.592
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:51 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\WORKPALLET\\templates\\U3S\\palletFPCreate.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 15:22:10 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class palletFPCreate(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 7, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''    <b>(''')
        _v = VFFSL(SL,"WCODE",True) # '$WCODE' on line 8, col 9
        if _v is not None: write(_filter(_v, rawExpr='$WCODE')) # from line 8, col 9.
        write(''')</b> ''')
        _v = VFFSL(SL,"WNAME",True) # '$WNAME' on line 8, col 21
        if _v is not None: write(_filter(_v, rawExpr='$WNAME')) # from line 8, col 21.
        write('''
    <br><br>
    ''')
        if False:
            _('На паллете')
        _v = VFFSL(SL,"_",False)('На паллете') # "$_('\xcd\xe0 \xef\xe0\xeb\xeb\xe5\xf2\xe5')" on line 10, col 5
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xe0 \xef\xe0\xeb\xeb\xe5\xf2\xe5')")) # from line 10, col 5.
        write(''': ''')
        _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"WQ",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($WQ,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 10, col 23
        if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($WQ,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 10, col 23.
        write(''' (<b><u>''')
        _orig_filter_53834588 = _filter
        filterName = 'Quantity'
        if self._CHEETAH__filters.has_key("Quantity"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"WQ",True) # '$WQ' on line 10, col 105
        if _v is not None: write(_filter(_v, rawExpr='$WQ')) # from line 10, col 105.
        _filter = _orig_filter_53834588
        write('''</u></b>)<br>
    ''')
        _v = VFFSL(SL,"TimeStampToDate",False)(VFFSL(SL,"PRODUCTDATE",True)) # '$TimeStampToDate($PRODUCTDATE)' on line 11, col 5
        if _v is not None: write(_filter(_v, rawExpr='$TimeStampToDate($PRODUCTDATE)')) # from line 11, col 5.
        write(''' - ''')
        _v = VFFSL(SL,"TimeStampToDate",False)(VFFSL(SL,"BESTBEFOREDATE",True)) # '$TimeStampToDate($BESTBEFOREDATE)' on line 11, col 38
        if _v is not None: write(_filter(_v, rawExpr='$TimeStampToDate($BESTBEFOREDATE)')) # from line 11, col 38.
        write('''
    <hr>

''')
        if VFFSL(SL,"varExists",False)('$FeatureId'): # generated from line 14, col 5
            if VFFSL(SL,"varExists",False)('$PFID'): # generated from line 15, col 9
                write('''            <form action="uvPalletFPCreate" id=frm>
                <input type="hidden" name="barcode1" value="''')
                _v = VFFSL(SL,"barcode",True) # '$barcode' on line 17, col 61
                if _v is not None: write(_filter(_v, rawExpr='$barcode')) # from line 17, col 61.
                write('''">
                <input type="hidden" name="dt" value="''')
                _v = VFFSL(SL,"dbCurrentTimestamp",False)() # '$dbCurrentTimestamp()' on line 18, col 55
                if _v is not None: write(_filter(_v, rawExpr='$dbCurrentTimestamp()')) # from line 18, col 55.
                write('''">
                <input type="hidden" name="featureid" value="''')
                _v = VFFSL(SL,"PFID",True) # '$PFID' on line 19, col 62
                if _v is not None: write(_filter(_v, rawExpr='$PFID')) # from line 19, col 62.
                write('''">
                <a href="wpMain?barcode=''')
                _v = VFFSL(SL,"barcode",True) # '$barcode' on line 20, col 41
                if _v is not None: write(_filter(_v, rawExpr='$barcode')) # from line 20, col 41.
                write('''">''')
                _v = VFFSL(SL,"PFNAME",True) # '$PFNAME' on line 20, col 51
                if _v is not None: write(_filter(_v, rawExpr='$PFNAME')) # from line 20, col 51.
                write('''</a><br>
                ''')
                if False:
                    _('Количество')
                _v = VFFSL(SL,"_",False)('Количество') # "$_('\xca\xee\xeb\xe8\xf7\xe5\xf1\xf2\xe2\xee')" on line 21, col 17
                if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xee\xeb\xe8\xf7\xe5\xf1\xf2\xe2\xee')")) # from line 21, col 17.
                write(''': <input type=text id="::int" size=4 name=q value="''')
                _orig_filter_33690919 = _filter
                filterName = 'Quantity'
                if self._CHEETAH__filters.has_key("Quantity"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"WQ",True) # '$WQ' on line 21, col 100
                if _v is not None: write(_filter(_v, rawExpr='$WQ')) # from line 21, col 100.
                _filter = _orig_filter_33690919
                write('''"/><b>''')
                _v = VFFSL(SL,"MWUCODE",True) # '$MWUCODE' on line 21, col 121
                if _v is not None: write(_filter(_v, rawExpr='$MWUCODE')) # from line 21, col 121.
                write('''</b><br>
                ''')
                if False:
                    _('ШК паллета для создания')
                _v = VFFSL(SL,"_",False)('ШК паллета для создания') # "$_('\xd8\xca \xef\xe0\xeb\xeb\xe5\xf2\xe0 \xe4\xeb\xff \xf1\xee\xe7\xe4\xe0\xed\xe8\xff')" on line 22, col 17
                if _v is not None: write(_filter(_v, rawExpr="$_('\xd8\xca \xef\xe0\xeb\xeb\xe5\xf2\xe0 \xe4\xeb\xff \xf1\xee\xe7\xe4\xe0\xed\xe8\xff')")) # from line 22, col 17.
                write(''': <input type="text" id=":scan:text" name="barcode2" value=""><br>
                <button type="submit">OK</button>
            </form>
''')
            elif VFFSL(SL,"varExists",False)('$datalist'): # generated from line 25, col 9
                for item in VFFSL(SL,"datalist",True): # generated from line 26, col 13
                    write('''                <a href="wpMain?barcode=''')
                    _v = VFFSL(SL,"barcode",True) # '$barcode' on line 27, col 41
                    if _v is not None: write(_filter(_v, rawExpr='$barcode')) # from line 27, col 41.
                    write('''&featureid=''')
                    _v = VFFSL(SL,"item.PFID",True) # '$item.PFID' on line 27, col 60
                    if _v is not None: write(_filter(_v, rawExpr='$item.PFID')) # from line 27, col 60.
                    write('''">''')
                    _v = VFFSL(SL,"item.PFNAME",True) # '$item.PFNAME' on line 27, col 72
                    if _v is not None: write(_filter(_v, rawExpr='$item.PFNAME')) # from line 27, col 72.
                    write('''</a><br><br>
''')
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_palletFPCreate= 'writeBody'

## END CLASS DEFINITION

if not hasattr(palletFPCreate, '_initCheetahAttributes'):
    templateAPIClass = getattr(palletFPCreate, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(palletFPCreate)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=palletFPCreate()).run()


