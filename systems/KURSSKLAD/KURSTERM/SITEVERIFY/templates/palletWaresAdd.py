#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336170.8959999
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:50 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\SITEVERIFY\\templates\\palletWaresAdd.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class palletWaresAdd(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 3, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        if VFFSL(SL,"varExists",False)('$use_wlnumber') and VFFSL(SL,"use_wlnumber",True): # generated from line 4, col 5
            write('''        <script language="javascript" src="''')
            _v = VFFSL(SL,"sps_js.KURSTERM",True) # '$sps_js.KURSTERM' on line 5, col 44
            if _v is not None: write(_filter(_v, rawExpr='$sps_js.KURSTERM')) # from line 5, col 44.
            write('''/request.js"></script>
        <script language="javascript" src="''')
            _v = VFFSL(SL,"sps_js.KURSTERM",True) # '$sps_js.KURSTERM' on line 6, col 44
            if _v is not None: write(_filter(_v, rawExpr='$sps_js.KURSTERM')) # from line 6, col 44.
            write('''/wlnumber.js"></script>
''')
        write('''    
''')
        if VFFSL(SL,"PNUM",True): # generated from line 9, col 5
            write('''        ''')
            if False:
                _('Поддон')
            _v = VFFSL(SL,"_",False)('Поддон') # "$_('\xcf\xee\xe4\xe4\xee\xed')" on line 10, col 9
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xee\xe4\xe4\xee\xed')")) # from line 10, col 9.
            write(''': <b><u>''')
            _v = VFFSL(SL,"PNUM",True) # '$PNUM' on line 10, col 29
            if _v is not None: write(_filter(_v, rawExpr='$PNUM')) # from line 10, col 29.
            write('''</u></b>(''')
            _v = VFFSL(SL,"SNAME",True) # '$SNAME' on line 10, col 43
            if _v is not None: write(_filter(_v, rawExpr='$SNAME')) # from line 10, col 43.
            write(''')<br>
''')
        else: # generated from line 11, col 5
            write('''        <b><u>''')
            _v = VFFSL(SL,"SNAME",True) # '$SNAME' on line 12, col 15
            if _v is not None: write(_filter(_v, rawExpr='$SNAME')) # from line 12, col 15.
            write('''</u></b><br>
''')
        write('''    <b>(<u>''')
        _v = VFFSL(SL,"WCODE",True) # '$WCODE' on line 14, col 12
        if _v is not None: write(_filter(_v, rawExpr='$WCODE')) # from line 14, col 12.
        write('''</u>) </b> ''')
        _v = VFFSL(SL,"WNAME",True) # '$WNAME' on line 14, col 29
        if _v is not None: write(_filter(_v, rawExpr='$WNAME')) # from line 14, col 29.
        write('''<br>
    <hr>
''')
        if VFFSL(SL,"varExists",False)('$use_wlnumber') and VFFSL(SL,"use_wlnumber",True): # generated from line 16, col 5
            onsubmit = 'onsubmit="javascript: return frmSubmit();"'
            dateonblur = 'onblur="chgDate();"'
        else: # generated from line 19, col 5
            onsubmit = ''
            dateonblur = ''
        write('''    <form action="palWaresAdd" name="frm" ''')
        _v = VFFSL(SL,"onsubmit",True) # '$onsubmit' on line 23, col 43
        if _v is not None: write(_filter(_v, rawExpr='$onsubmit')) # from line 23, col 43.
        write(''' method=post>
        <input type=hidden name=wid value=''')
        _v = VFFSL(SL,"WID",True) # '$WID' on line 24, col 43
        if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 24, col 43.
        write('''>
        <input type=hidden name=id value=''')
        _v = VFFSL(SL,"PID",True) # '$PID' on line 25, col 42
        if _v is not None: write(_filter(_v, rawExpr='$PID')) # from line 25, col 42.
        write('''>
        <input type=hidden name=dbeg value="''')
        _v = VFFSL(SL,"dbeg",True) # '$dbeg' on line 26, col 45
        if _v is not None: write(_filter(_v, rawExpr='$dbeg')) # from line 26, col 45.
        write('''">
        <select name=wuid>
''')
        if VFFSL(SL,"wuid",True)==VFFSL(SL,"MWUID",True): # generated from line 28, col 11
            write('''            <option value=''')
            _v = VFFSL(SL,"MWUID",True) # '$MWUID' on line 29, col 27
            if _v is not None: write(_filter(_v, rawExpr='$MWUID')) # from line 29, col 27.
            write(''' selected>''')
            _v = VFFSL(SL,"MWUCODE",True) # '$MWUCODE' on line 29, col 43
            if _v is not None: write(_filter(_v, rawExpr='$MWUCODE')) # from line 29, col 43.
            write('''</option>
''')
        if VFFSL(SL,"VWUID",True): # generated from line 31, col 11
            write('''            <option value=''')
            _v = VFFSL(SL,"VWUID",True) # '$VWUID' on line 32, col 27
            if _v is not None: write(_filter(_v, rawExpr='$VWUID')) # from line 32, col 27.
            write('''>''')
            _v = VFFSL(SL,"VWUCODE",True) # '$VWUCODE' on line 32, col 34
            if _v is not None: write(_filter(_v, rawExpr='$VWUCODE')) # from line 32, col 34.
            write('''</option>
''')
        if VFFSL(SL,"wuid",True) != VFFSL(SL,"MWUID",True): # generated from line 34, col 11
            write('''            <option value=''')
            _v = VFFSL(SL,"MWUID",True) # '$MWUID' on line 35, col 27
            if _v is not None: write(_filter(_v, rawExpr='$MWUID')) # from line 35, col 27.
            write('''>''')
            _v = VFFSL(SL,"MWUCODE",True) # '$MWUCODE' on line 35, col 34
            if _v is not None: write(_filter(_v, rawExpr='$MWUCODE')) # from line 35, col 34.
            write('''</option>
''')
        write('''        </select>: 
        <input type="text" name="amount" id=":focus:float" value="''')
        _v = VFFSL(SL,"amount",True) # '$amount' on line 38, col 67
        if _v is not None: write(_filter(_v, rawExpr='$amount')) # from line 38, col 67.
        write('''" size="6"><br><br>
        ''')
        if False:
            _('Дата')
        _v = VFFSL(SL,"_",False)('Дата') # "$_('\xc4\xe0\xf2\xe0')" on line 39, col 9
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xe0\xf2\xe0')")) # from line 39, col 9.
        write(''': <input type="text" name="productdate" id="::date" value="''')
        _v = VFFSL(SL,"productdate",True) # '$productdate' on line 39, col 78
        if _v is not None: write(_filter(_v, rawExpr='$productdate')) # from line 39, col 78.
        write('''" size="6" ''')
        _v = VFFSL(SL,"dateonblur",True) # '$dateonblur' on line 39, col 101
        if _v is not None: write(_filter(_v, rawExpr='$dateonblur')) # from line 39, col 101.
        write('''"><br>
''')
        if VFFSL(SL,"varExists",False)('$use_wlnumber') and VFFSL(SL,"use_wlnumber",True): # generated from line 40, col 3
            write('''\t\t\t<br>''')
            if False:
                _('Партия')
            _v = VFFSL(SL,"_",False)('Партия') # "$_('\xcf\xe0\xf0\xf2\xe8\xff')" on line 41, col 8
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xe0\xf0\xf2\xe8\xff')")) # from line 41, col 8.
            write(''' \xb9 <select name="wlnumber"></select><br>
''')
        else: # generated from line 42, col 3
            write('''\t\t\t<input type="hidden" name="wlnumber" value=" ">
''')
        write('''        <hr>
        <input type=submit value="''')
        if False:
            _('Сохранить')
        _v = VFFSL(SL,"_",False)('Сохранить') # "$_('\xd1\xee\xf5\xf0\xe0\xed\xe8\xf2\xfc')" on line 46, col 35
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd1\xee\xf5\xf0\xe0\xed\xe8\xf2\xfc')")) # from line 46, col 35.
        write('''">
    </form>
    
''')
        if VFFSL(SL,"varExists",False)('$use_wlnumber') and VFFSL(SL,"use_wlnumber",True): # generated from line 49, col 5
            write('''        <script>
''')
            if VFFSL(SL,"varExists",False)('$wlnumber') and VFFSL(SL,"wlnumber",True): # generated from line 51, col 13
                write("""                defaultWLNumber = '""")
                _v = VFFSL(SL,"wlnumber",True) # '$wlnumber' on line 52, col 36
                if _v is not None: write(_filter(_v, rawExpr='$wlnumber')) # from line 52, col 36.
                write("""';
""")
            write("""            
            function frmSubmit(){
                if (document.frm.wlnumber.disabled){
                    alert('""")
            if False:
                _('Номер партии не установлен')
            _v = VFFSL(SL,"_",False)('Номер партии не установлен') # "$_('\xcd\xee\xec\xe5\xf0 \xef\xe0\xf0\xf2\xe8\xe8 \xed\xe5 \xf3\xf1\xf2\xe0\xed\xee\xe2\xeb\xe5\xed')" on line 57, col 28
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xee\xec\xe5\xf0 \xef\xe0\xf0\xf2\xe8\xe8 \xed\xe5 \xf3\xf1\xf2\xe0\xed\xee\xe2\xeb\xe5\xed')")) # from line 57, col 28.
            write('''! ''')
            if False:
                _('Ожидайте окончания заполнения списка для выбора!')
            _v = VFFSL(SL,"_",False)('Ожидайте окончания заполнения списка для выбора!') # "$_('\xce\xe6\xe8\xe4\xe0\xe9\xf2\xe5 \xee\xea\xee\xed\xf7\xe0\xed\xe8\xff \xe7\xe0\xef\xee\xeb\xed\xe5\xed\xe8\xff \xf1\xef\xe8\xf1\xea\xe0 \xe4\xeb\xff \xe2\xfb\xe1\xee\xf0\xe0!')" on line 57, col 62
            if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xe6\xe8\xe4\xe0\xe9\xf2\xe5 \xee\xea\xee\xed\xf7\xe0\xed\xe8\xff \xe7\xe0\xef\xee\xeb\xed\xe5\xed\xe8\xff \xf1\xef\xe8\xf1\xea\xe0 \xe4\xeb\xff \xe2\xfb\xe1\xee\xf0\xe0!')")) # from line 57, col 62.
            write("""');
                    document.frm.sbarcode.value = '';
                    return false;
                }
                else if (!document.frm.wlnumber.value){
                        alert('""")
            if False:
                _('Номер партии не установлен')
            _v = VFFSL(SL,"_",False)('Номер партии не установлен') # "$_('\xcd\xee\xec\xe5\xf0 \xef\xe0\xf0\xf2\xe8\xe8 \xed\xe5 \xf3\xf1\xf2\xe0\xed\xee\xe2\xeb\xe5\xed')" on line 62, col 32
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xee\xec\xe5\xf0 \xef\xe0\xf0\xf2\xe8\xe8 \xed\xe5 \xf3\xf1\xf2\xe0\xed\xee\xe2\xeb\xe5\xed')")) # from line 62, col 32.
            write("""!');
                        return false;
                    }
                else
                    return true;
            }
            
            function chgDate(){
                reqWLNumbers(""")
            _v = VFFSL(SL,"wid",True) # '$wid' on line 70, col 30
            if _v is not None: write(_filter(_v, rawExpr='$wid')) # from line 70, col 30.
            write(''');
            }
                   
            chgDate();
        </script>    
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_palletWaresAdd= 'writeBody'

## END CLASS DEFINITION

if not hasattr(palletWaresAdd, '_initCheetahAttributes'):
    templateAPIClass = getattr(palletWaresAdd, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(palletWaresAdd)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=palletWaresAdd()).run()


