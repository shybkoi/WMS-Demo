#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main
from systems.KURSSKLAD.cheetahutils import viewQuantity

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336171.017
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:51 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\SITEVERIFY\\templates\\wares.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class wares(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData     at line 5, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''    <b><u>(''')
        _v = VFFSL(SL,"WCODE",True) # '$WCODE' on line 6, col 12
        if _v is not None: write(_filter(_v, rawExpr='$WCODE')) # from line 6, col 12.
        write(''')</u></b>''')
        _v = VFFSL(SL,"WNAME",True) # '$WNAME' on line 6, col 27
        if _v is not None: write(_filter(_v, rawExpr='$WNAME')) # from line 6, col 27.
        write('''<br><br>
''')
        if VFFSL(SL,"SLOTID",True): # generated from line 7, col 5
            write('''        <a href="palSlotWares?id=''')
            _v = VFFSL(SL,"SLOTPALLETID",True) # '$SLOTPALLETID' on line 8, col 34
            if _v is not None: write(_filter(_v, rawExpr='$SLOTPALLETID')) # from line 8, col 34.
            write('''&wid=''')
            _v = VFFSL(SL,"WID",True) # '$WID' on line 8, col 52
            if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 8, col 52.
            write('''">''')
            _v = VFFSL(SL,"SPNAME",True) # '$SPNAME' on line 8, col 58
            if _v is not None: write(_filter(_v, rawExpr='$SPNAME')) # from line 8, col 58.
            write(''': ''')
            _v = VFFSL(SL,"SLOTNAME",True) # '$SLOTNAME' on line 8, col 67
            if _v is not None: write(_filter(_v, rawExpr='$SLOTNAME')) # from line 8, col 67.
            write('''</a>
''')
        write('''    
''')
        if VFFSL(SL,"varExists",False)('$datalist') and VFFSL(SL,"datalist",True) and len(VFFSL(SL,"datalist",True))>0: # generated from line 11, col 5
            write('''        <table>
            <thead>
                <tr>
                    <th>''')
            if False:
                _('Дата')
            _v = VFFSL(SL,"_",False)('Дата') # "$_('\xc4\xe0\xf2\xe0')" on line 15, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xe0\xf2\xe0')")) # from line 15, col 25.
            write('''</th>
                    <th>''')
            if False:
                _('Поддон')
            _v = VFFSL(SL,"_",False)('Поддон') # "$_('\xcf\xee\xe4\xe4\xee\xed')" on line 16, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xee\xe4\xe4\xee\xed')")) # from line 16, col 25.
            write('''</th>
                    <th>''')
            if False:
                _('Кол-во')
            _v = VFFSL(SL,"_",False)('Кол-во') # "$_('\xca\xee\xeb-\xe2\xee')" on line 17, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xee\xeb-\xe2\xee')")) # from line 17, col 25.
            write('''</th>
                <tr>
            </thead>
            <tbody>
''')
            Q = 0
            for item in VFFSL(SL,"datalist",True): # generated from line 22, col 13
                Q += float(VFFSL(SL,"item.Q",True))
                if VFFSL(SL,"item.canedit",True) == '0': # generated from line 24, col 17
                    trClass = 'class="inactive"'
                else: # generated from line 26, col 17
                    trClass = ''
                write('''                <tr ''')
                _v = VFFSL(SL,"trClass",True) # '$trClass' on line 29, col 21
                if _v is not None: write(_filter(_v, rawExpr='$trClass')) # from line 29, col 21.
                write('''>
                    <td>''')
                _orig_filter_49731186 = _filter
                filterName = 'DateFilter2'
                if self._CHEETAH__filters.has_key("DateFilter2"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.PRODUCTDATE",True) # '$item.PRODUCTDATE' on line 30, col 45
                if _v is not None: write(_filter(_v, rawExpr='$item.PRODUCTDATE')) # from line 30, col 45.
                write(''' ''')
                _filter = _orig_filter_49731186
                write('''</td>
''')
                if not VFFSL(SL,"item.pnum",True): # generated from line 31, col 6
                    write('''\t\t\t\t\t\t<td>''')
                    _v = VFFSL(SL,"item.SNAME",True) # '$item.SNAME' on line 32, col 11
                    if _v is not None: write(_filter(_v, rawExpr='$item.SNAME')) # from line 32, col 11.
                    write('''</td>
''')
                else: # generated from line 33, col 6
                    write('''\t\t\t\t\t\t<td><a href="#" title="''')
                    _v = VFFSL(SL,"item.SNAME",True) # '$item.SNAME' on line 34, col 30
                    if _v is not None: write(_filter(_v, rawExpr='$item.SNAME')) # from line 34, col 30.
                    write('''">''')
                    _v = VFFSL(SL,"item.PNUM",True) # '$item.PNUM' on line 34, col 43
                    if _v is not None: write(_filter(_v, rawExpr='$item.PNUM')) # from line 34, col 43.
                    write('''</a></td>
''')
                write('''                    <td>''')
                _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.Q",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($item.Q,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 36, col 25
                if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.Q,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 36, col 25.
                write(''' (<u><b>''')
                _orig_filter_85980370 = _filter
                filterName = 'Quantity'
                if self._CHEETAH__filters.has_key("Quantity"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.Q",True) # '$item.Q' on line 36, col 111
                if _v is not None: write(_filter(_v, rawExpr='$item.Q')) # from line 36, col 111.
                _filter = _orig_filter_85980370
                write('''</b></u>)</td>
                </tr>
''')
            write('''            </tbody>
            <tfoot>
                <tr>
                    <th colspan="2">''')
            if False:
                _('Итого')
            _v = VFFSL(SL,"_",False)('Итого') # "$_('\xc8\xf2\xee\xe3\xee')" on line 42, col 37
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc8\xf2\xee\xe3\xee')")) # from line 42, col 37.
            write(''':</th>
                    <th>''')
            _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"Q",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($Q,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 43, col 25
            if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($Q,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 43, col 25.
            write(''' (<u><b>''')
            _orig_filter_35166999 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"Q",True) # '$Q' on line 43, col 106
            if _v is not None: write(_filter(_v, rawExpr='$Q')) # from line 43, col 106.
            _filter = _orig_filter_35166999
            write('''</b></u>)</th>
                </tr>
            </tfoot>
        </table>
''')
        write('''    
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_wares= 'writeBody'

## END CLASS DEFINITION

if not hasattr(wares, '_initCheetahAttributes'):
    templateAPIClass = getattr(wares, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(wares)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=wares()).run()


