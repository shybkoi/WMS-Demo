#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main
from systems.KURSSKLAD.cheetahutils import TimeStampToDate
from systems.KURSSKLAD.cheetahutils import Quantity

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336169.8169999
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:49 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\MODELSTACK\\templates\\stack.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class stack(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 6, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write("""    <form action='main'>
        """)
        if False:
            _('ШК')
        _v = VFFSL(SL,"_",False)('ШК') # "$_('\xd8\xca')" on line 8, col 9
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd8\xca')")) # from line 8, col 9.
        write(''': <input type="text" name="barcode" id="barcode:scan:text" title="''')
        if False:
            _('МП')
        _v = VFFSL(SL,"_",False)('МП') # "$_('\xcc\xcf')" on line 8, col 83
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcc\xcf')")) # from line 8, col 83.
        write(''', ''')
        if False:
            _('Поддон')
        _v = VFFSL(SL,"_",False)('Поддон') # "$_('\xcf\xee\xe4\xe4\xee\xed')" on line 8, col 93
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xee\xe4\xe4\xee\xed')")) # from line 8, col 93.
        write(''', ''')
        if False:
            _('Товар')
        _v = VFFSL(SL,"_",False)('Товар') # "$_('\xd2\xee\xe2\xe0\xf0')" on line 8, col 107
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd2\xee\xe2\xe0\xf0')")) # from line 8, col 107.
        write('''">
    </form>  
    <hr>

    <b>''')
        _v = VFFSL(SL,"S_NAME",True) # '$S_NAME' on line 12, col 8
        if _v is not None: write(_filter(_v, rawExpr='$S_NAME')) # from line 12, col 8.
        write('''</b>
''')
        if VFFSL(SL,"S_MODELID",True): # generated from line 13, col 5
            write('''        (''')
            _v = VFFSL(SL,"S_PALCURCNT",True) # '$S_PALCURCNT' on line 14, col 10
            if _v is not None: write(_filter(_v, rawExpr='$S_PALCURCNT')) # from line 14, col 10.
            write(''' / ''')
            _v = VFFSL(SL,"S_PALMAXCNT",True) # '$S_PALMAXCNT' on line 14, col 25
            if _v is not None: write(_filter(_v, rawExpr='$S_PALMAXCNT')) # from line 14, col 25.
            write(''')
        <br>
        <b>(''')
            _v = VFFSL(SL,"S_WCODE",True) # '$S_WCODE' on line 16, col 13
            if _v is not None: write(_filter(_v, rawExpr='$S_WCODE')) # from line 16, col 13.
            write(''')</b> ''')
            _v = VFFSL(SL,"S_WNAME",True) # '$S_WNAME' on line 16, col 27
            if _v is not None: write(_filter(_v, rawExpr='$S_WNAME')) # from line 16, col 27.
            write('''
        <br>
        <b>''')
            _v = VFFSL(SL,"TimeStampToDate",False)(VFFSL(SL,"S_WPRODUCTDATE",True)) # '$TimeStampToDate($S_WPRODUCTDATE)' on line 18, col 12
            if _v is not None: write(_filter(_v, rawExpr='$TimeStampToDate($S_WPRODUCTDATE)')) # from line 18, col 12.
            write('''</b> - ''')
            _v = VFFSL(SL,"TimeStampToDate",False)(VFFSL(SL,"S_WBESTBEFOREDATE",True)) # '$TimeStampToDate($S_WBESTBEFOREDATE)' on line 18, col 52
            if _v is not None: write(_filter(_v, rawExpr='$TimeStampToDate($S_WBESTBEFOREDATE)')) # from line 18, col 52.
            write('''
''')
        write('''    
    <hr>
''')
        if VFFSL(SL,"S_MODELID",True): # generated from line 22, col 5
            write('''        ''')
            if False:
                _('Длина')
            _v = VFFSL(SL,"_",False)('Длина') # "$_('\xc4\xeb\xe8\xed\xe0')" on line 23, col 9
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xeb\xe8\xed\xe0')")) # from line 23, col 9.
            write(''': <input disabled type=text id="::int" value="''')
            _v = VFFSL(SL,"Quantity",False)(VFFSL(SL,"S_PL",True)) # '$Quantity($S_PL)' on line 23, col 66
            if _v is not None: write(_filter(_v, rawExpr='$Quantity($S_PL)')) # from line 23, col 66.
            write('''" size="2"><br>
        ''')
            if False:
                _('Ширина')
            _v = VFFSL(SL,"_",False)('Ширина') # "$_('\xd8\xe8\xf0\xe8\xed\xe0')" on line 24, col 9
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd8\xe8\xf0\xe8\xed\xe0')")) # from line 24, col 9.
            write(''': <input disabled type=text id="::int" value="''')
            _v = VFFSL(SL,"Quantity",False)(VFFSL(SL,"S_PW",True)) # '$Quantity($S_PW)' on line 24, col 67
            if _v is not None: write(_filter(_v, rawExpr='$Quantity($S_PW)')) # from line 24, col 67.
            write('''" size="2"><br>
        ''')
            if False:
                _('Высота')
            _v = VFFSL(SL,"_",False)('Высота') # "$_('\xc2\xfb\xf1\xee\xf2\xe0')" on line 25, col 9
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc2\xfb\xf1\xee\xf2\xe0')")) # from line 25, col 9.
            write(''': <input disabled type=text id="::int" value="''')
            _v = VFFSL(SL,"Quantity",False)(VFFSL(SL,"S_PH",True)) # '$Quantity($S_PH)' on line 25, col 67
            if _v is not None: write(_filter(_v, rawExpr='$Quantity($S_PH)')) # from line 25, col 67.
            write('''" size="2"><br>
        ''')
            if False:
                _('в паллетоместах')
            _v = VFFSL(SL,"_",False)('в паллетоместах') # "$_('\xe2 \xef\xe0\xeb\xeb\xe5\xf2\xee\xec\xe5\xf1\xf2\xe0\xf5')" on line 26, col 9
            if _v is not None: write(_filter(_v, rawExpr="$_('\xe2 \xef\xe0\xeb\xeb\xe5\xf2\xee\xec\xe5\xf1\xf2\xe0\xf5')")) # from line 26, col 9.
            write('''
''')
        else: # generated from line 27, col 5
            write('''        <form action="stackSetLWH">
            <input type=hidden name=siteid value="''')
            _v = VFFSL(SL,"S_ID",True) # '$S_ID' on line 29, col 51
            if _v is not None: write(_filter(_v, rawExpr='$S_ID')) # from line 29, col 51.
            write('''">
            ''')
            if False:
                _('Длина')
            _v = VFFSL(SL,"_",False)('Длина') # "$_('\xc4\xeb\xe8\xed\xe0')" on line 30, col 13
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xeb\xe8\xed\xe0')")) # from line 30, col 13.
            write(''': <input type=text name="pl" id="::int" value="''')
            _v = VFFSL(SL,"Quantity",False)(VFFSL(SL,"S_PL",True)) # '$Quantity($S_PL)' on line 30, col 71
            if _v is not None: write(_filter(_v, rawExpr='$Quantity($S_PL)')) # from line 30, col 71.
            write('''" size="2"><br>
            ''')
            if False:
                _('Ширина')
            _v = VFFSL(SL,"_",False)('Ширина') # "$_('\xd8\xe8\xf0\xe8\xed\xe0')" on line 31, col 13
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd8\xe8\xf0\xe8\xed\xe0')")) # from line 31, col 13.
            write(''': <input type=text name="pw" id="::int" value="''')
            _v = VFFSL(SL,"Quantity",False)(VFFSL(SL,"S_PW",True)) # '$Quantity($S_PW)' on line 31, col 72
            if _v is not None: write(_filter(_v, rawExpr='$Quantity($S_PW)')) # from line 31, col 72.
            write('''" size="2"><br>
            ''')
            if False:
                _('Высота')
            _v = VFFSL(SL,"_",False)('Высота') # "$_('\xc2\xfb\xf1\xee\xf2\xe0')" on line 32, col 13
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc2\xfb\xf1\xee\xf2\xe0')")) # from line 32, col 13.
            write(''': <input type=text name="ph" id="::int" value="''')
            _v = VFFSL(SL,"Quantity",False)(VFFSL(SL,"S_PH",True)) # '$Quantity($S_PH)' on line 32, col 72
            if _v is not None: write(_filter(_v, rawExpr='$Quantity($S_PH)')) # from line 32, col 72.
            write('''" size="2"><br>
            ''')
            if False:
                _('в паллетоместах')
            _v = VFFSL(SL,"_",False)('в паллетоместах') # "$_('\xe2 \xef\xe0\xeb\xeb\xe5\xf2\xee\xec\xe5\xf1\xf2\xe0\xf5')" on line 33, col 13
            if _v is not None: write(_filter(_v, rawExpr="$_('\xe2 \xef\xe0\xeb\xeb\xe5\xf2\xee\xec\xe5\xf1\xf2\xe0\xf5')")) # from line 33, col 13.
            write('''<br>
            <input type=submit value="''')
            if False:
                _('Сохранить')
            _v = VFFSL(SL,"_",False)('Сохранить') # "$_('\xd1\xee\xf5\xf0\xe0\xed\xe8\xf2\xfc')" on line 34, col 39
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd1\xee\xf5\xf0\xe0\xed\xe8\xf2\xfc')")) # from line 34, col 39.
            write('''">
        </form>        
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_stack= 'writeBody'

## END CLASS DEFINITION

if not hasattr(stack, '_initCheetahAttributes'):
    templateAPIClass = getattr(stack, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(stack)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=stack()).run()


