#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main
from systems.KURSSKLAD.cheetahutils import TimeStampToDate
from systems.KURSSKLAD.cheetahutils import Quantity

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336169.8299999
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:49 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\MODELSTACK\\templates\\wares.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class wares(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 6, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write("""    <form action='main'>
        """)
        if False:
            _('ШК')
        _v = VFFSL(SL,"_",False)('ШК') # "$_('\xd8\xca')" on line 8, col 9
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd8\xca')")) # from line 8, col 9.
        write(''': <input type="text" name="barcode" id="barcode:scan:text" title="''')
        if False:
            _('МП')
        _v = VFFSL(SL,"_",False)('МП') # "$_('\xcc\xcf')" on line 8, col 83
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcc\xcf')")) # from line 8, col 83.
        write(''', ''')
        if False:
            _('Поддон')
        _v = VFFSL(SL,"_",False)('Поддон') # "$_('\xcf\xee\xe4\xe4\xee\xed')" on line 8, col 93
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xee\xe4\xe4\xee\xed')")) # from line 8, col 93.
        write(''', ''')
        if False:
            _('Товар')
        _v = VFFSL(SL,"_",False)('Товар') # "$_('\xd2\xee\xe2\xe0\xf0')" on line 8, col 107
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd2\xee\xe2\xe0\xf0')")) # from line 8, col 107.
        write('''">
    </form>  
    <hr>

    <b>(''')
        _v = VFFSL(SL,"WCODE",True) # '$WCODE' on line 12, col 9
        if _v is not None: write(_filter(_v, rawExpr='$WCODE')) # from line 12, col 9.
        write(''')</b>''')
        _v = VFFSL(SL,"WNAME",True) # '$WNAME' on line 12, col 20
        if _v is not None: write(_filter(_v, rawExpr='$WNAME')) # from line 12, col 20.
        write('''<br>
''')
        if VFFSL(SL,"varExists",False)('$datalist') and VFFSL(SL,"datalist",True): # generated from line 13, col 5
            write('''        <form action="waresSetModels">
            <input type="hidden" name="wid" value="''')
            _v = VFFSL(SL,"WID",True) # '$WID' on line 15, col 52
            if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 15, col 52.
            write('''">
        <table>
            <thead>
                <tr>
                    <th>''')
            if False:
                _('Модель')
            _v = VFFSL(SL,"_",False)('Модель') # "$_('\xcc\xee\xe4\xe5\xeb\xfc')" on line 19, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcc\xee\xe4\xe5\xeb\xfc')")) # from line 19, col 25.
            write('''</th>
                    <th>''')
            if False:
                _('Пр-т')
            _v = VFFSL(SL,"_",False)('Пр-т') # "$_('\xcf\xf0-\xf2')" on line 20, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xf0-\xf2')")) # from line 20, col 25.
            write('''</th>
                </tr>
            </thead>
            <tbody>
''')
            for item in VFFSL(SL,"datalist",True): # generated from line 24, col 13
                write('''                <tr>
                    <td>''')
                _v = VFFSL(SL,"item.MODELNAME",True) # '$item.MODELNAME' on line 26, col 25
                if _v is not None: write(_filter(_v, rawExpr='$item.MODELNAME')) # from line 26, col 25.
                write('''</td>
                    <td><input type=\'text\' id="::int" name="m''')
                _v = VFFSL(SL,"item.MODELID",True) # '$item.MODELID' on line 27, col 62
                if _v is not None: write(_filter(_v, rawExpr='$item.MODELID')) # from line 27, col 62.
                write('''" value="''')
                _v = VFFSL(SL,"item.PRIORITY",True) # '$item.PRIORITY' on line 27, col 84
                if _v is not None: write(_filter(_v, rawExpr='$item.PRIORITY')) # from line 27, col 84.
                write('''" size="2"></td>
''')
            write('''            </tbody>
        </table>
            <input type="submit" value="''')
            if False:
                _('Сохранить')
            _v = VFFSL(SL,"_",False)('Сохранить') # "$_('\xd1\xee\xf5\xf0\xe0\xed\xe8\xf2\xfc')" on line 31, col 41
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd1\xee\xf5\xf0\xe0\xed\xe8\xf2\xfc')")) # from line 31, col 41.
            write('''">
        </form>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_wares= 'writeBody'

## END CLASS DEFINITION

if not hasattr(wares, '_initCheetahAttributes'):
    templateAPIClass = getattr(wares, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(wares)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=wares()).run()


