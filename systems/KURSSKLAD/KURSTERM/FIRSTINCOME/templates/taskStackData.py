#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336168.8110001
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:48 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\FIRSTINCOME\\templates\\taskStackData.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskStackData(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 5, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''    ''')
        _v = VFFSL(SL,"FROMNAME",True) # '$FROMNAME' on line 6, col 5
        if _v is not None: write(_filter(_v, rawExpr='$FROMNAME')) # from line 6, col 5.
        write('''<br>
    <b>''')
        _orig_filter_81755054 = _filter
        filterName = 'DateFilter'
        if self._CHEETAH__filters.has_key("DateFilter"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"DOCDATE",True) # '$DOCDATE' on line 7, col 26
        if _v is not None: write(_filter(_v, rawExpr='$DOCDATE')) # from line 7, col 26.
        _filter = _orig_filter_81755054
        write('''</b> \xb9<b>''')
        _v = VFFSL(SL,"DOCNUM",True) # '$DOCNUM' on line 7, col 55
        if _v is not None: write(_filter(_v, rawExpr='$DOCNUM')) # from line 7, col 55.
        write('''</b><br>
    <b>''')
        _v = VFFSL(SL,"S_NAME",True) # '$S_NAME' on line 8, col 8
        if _v is not None: write(_filter(_v, rawExpr='$S_NAME')) # from line 8, col 8.
        write('''</b><br>
    <b><u>(''')
        _v = VFFSL(SL,"WCODE",True) # '$WCODE' on line 9, col 12
        if _v is not None: write(_filter(_v, rawExpr='$WCODE')) # from line 9, col 12.
        write(''')</u></b> ''')
        _v = VFFSL(SL,"WNAME",True) # '$WNAME' on line 9, col 28
        if _v is not None: write(_filter(_v, rawExpr='$WNAME')) # from line 9, col 28.
        write('''
    <hr>
    <form action="taskStackData">
        <input type="hidden" name="tid" value="''')
        _v = VFFSL(SL,"TID",True) # '$TID' on line 12, col 48
        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 12, col 48.
        write('''">
        <input type="hidden" name="wid" value="''')
        _v = VFFSL(SL,"WID",True) # '$WID' on line 13, col 48
        if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 13, col 48.
        write('''">
        <input type="hidden" name="sid" value="''')
        _v = VFFSL(SL,"S_ID",True) # '$S_ID' on line 14, col 48
        if _v is not None: write(_filter(_v, rawExpr='$S_ID')) # from line 14, col 48.
        write('''">
        <input type="hidden" name="prid" value="''')
        _v = VFFSL(SL,"PRODUCERID",True) # '$PRODUCERID' on line 15, col 49
        if _v is not None: write(_filter(_v, rawExpr='$PRODUCERID')) # from line 15, col 49.
        write('''">
        <input type="hidden" name="lid" value="''')
        _v = VFFSL(SL,"PRODLINEID",True) # '$PRODLINEID' on line 16, col 48
        if _v is not None: write(_filter(_v, rawExpr='$PRODLINEID')) # from line 16, col 48.
        write('''">
''')
        if VFFSL(SL,"varExists",False)('$STACKMODELID'): # generated from line 17, col 9
            write('''            <b>''')
            _v = VFFSL(SL,"STACKMODELNAME",True) # '$STACKMODELNAME' on line 18, col 16
            if _v is not None: write(_filter(_v, rawExpr='$STACKMODELNAME')) # from line 18, col 16.
            write('''</b><br>
            <input type="hidden" name="mid" value="''')
            _v = VFFSL(SL,"STACKMODELID",True) # '$STACKMODELID' on line 19, col 52
            if _v is not None: write(_filter(_v, rawExpr='$STACKMODELID')) # from line 19, col 52.
            write('''">
''')
        else: # generated from line 20, col 9
            write('''            <input type="hidden" name="mid" value="0">
''')
        write('''        <u>''')
        _v = VFFSL(SL,"PRODLINENAME",True) # '$PRODLINENAME' on line 23, col 12
        if _v is not None: write(_filter(_v, rawExpr='$PRODLINENAME')) # from line 23, col 12.
        write('''</u><br>
        <u>''')
        _v = VFFSL(SL,"PRODUCERNAME",True) # '$PRODUCERNAME' on line 24, col 12
        if _v is not None: write(_filter(_v, rawExpr='$PRODUCERNAME')) # from line 24, col 12.
        write('''</u><br>
        <br>
''')
        if VFFSL(SL,"PRODLINECHGDATE",True) == '1': # generated from line 26, col 9
            write('''            ''')
            if False:
                _('Производство')
            _v = VFFSL(SL,"_",False)('Производство') # "$_('\xcf\xf0\xee\xe8\xe7\xe2\xee\xe4\xf1\xf2\xe2\xee')" on line 27, col 13
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xf0\xee\xe8\xe7\xe2\xee\xe4\xf1\xf2\xe2\xee')")) # from line 27, col 13.
            write(''' <input type="text" name="prdate" id="productdate::date" size="7" value="''')
            _v = VFFSL(SL,"GetCurDate",False)(shortYear=True) # '$GetCurDate(shortYear=True)' on line 27, col 104
            if _v is not None: write(_filter(_v, rawExpr='$GetCurDate(shortYear=True)')) # from line 27, col 104.
            write('''"><br>
''')
            # $_('Годен до') <input type="text" name="bbdate" id="bestbeforedate::date" size="7" value="$GetCurDate(shortYear=True, deltadays=$WUBDAYS)" onblur="bbdatechg();"><br>
        else: # generated from line 29, col 9
            write('''            <input type="hidden" name="prdate" value="''')
            _v = VFFSL(SL,"GetCurDate",False)(shortYear=True) # '$GetCurDate(shortYear=True)' on line 30, col 55
            if _v is not None: write(_filter(_v, rawExpr='$GetCurDate(shortYear=True)')) # from line 30, col 55.
            write('''">
''')
            # <input type="hidden" name="bbdate" value="$GetCurDate(shortYear=True, deltadays=$WUBDAYS)">
            write('''            ''')
            if False:
                _('Производство')
            _v = VFFSL(SL,"_",False)('Производство') # "$_('\xcf\xf0\xee\xe8\xe7\xe2\xee\xe4\xf1\xf2\xe2\xee')" on line 32, col 13
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xf0\xee\xe8\xe7\xe2\xee\xe4\xf1\xf2\xe2\xee')")) # from line 32, col 13.
            write(''': <b>''')
            _v = VFFSL(SL,"GetCurDate",False)(shortYear=True) # '$GetCurDate(shortYear=True)' on line 32, col 36
            if _v is not None: write(_filter(_v, rawExpr='$GetCurDate(shortYear=True)')) # from line 32, col 36.
            write('''</b><br>
''')
            # $_('Годен до'): $GetCurDate(shortYear=True, deltadays=$WUBDAYS) <br>
        if VFFSL(SL,"S_SPCODE",True) == 'STACK': # generated from line 35, col 9
            write('''            <input type="hidden" name="pq" value="''')
            _orig_filter_91952096 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"W_PUFACTOR",True) # '$W_PUFACTOR' on line 36, col 67
            if _v is not None: write(_filter(_v, rawExpr='$W_PUFACTOR')) # from line 36, col 67.
            _filter = _orig_filter_91952096
            write('''">
            ''')
            if False:
                _('На паллете')
            _v = VFFSL(SL,"_",False)('На паллете') # "$_('\xcd\xe0 \xef\xe0\xeb\xeb\xe5\xf2\xe5')" on line 37, col 13
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xe0 \xef\xe0\xeb\xeb\xe5\xf2\xe5')")) # from line 37, col 13.
            write(''': <b>''')
            _orig_filter_96322772 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"W_PUFACTOR",True) # '$W_PUFACTOR' on line 37, col 50
            if _v is not None: write(_filter(_v, rawExpr='$W_PUFACTOR')) # from line 37, col 50.
            _filter = _orig_filter_96322772
            write('''</b><br>
            ''')
            if False:
                _('Паллетов')
            _v = VFFSL(SL,"_",False)('Паллетов') # "$_('\xcf\xe0\xeb\xeb\xe5\xf2\xee\xe2')" on line 38, col 13
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xe0\xeb\xeb\xe5\xf2\xee\xe2')")) # from line 38, col 13.
            write(''': <input type="text" name="pcnt" id="pcnt::int" size="2" value=""><br>
''')
        else: # generated from line 39, col 9
            write('''            <input type="hidden" name="pcnt" value="1">
            ''')
            if False:
                _('Паллетов')
            _v = VFFSL(SL,"_",False)('Паллетов') # "$_('\xcf\xe0\xeb\xeb\xe5\xf2\xee\xe2')" on line 41, col 13
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xe0\xeb\xeb\xe5\xf2\xee\xe2')")) # from line 41, col 13.
            write(''': <b>1</b><br>
            ''')
            if False:
                _('На паллете')
            _v = VFFSL(SL,"_",False)('На паллете') # "$_('\xcd\xe0 \xef\xe0\xeb\xeb\xe5\xf2\xe5')" on line 42, col 13
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xe0 \xef\xe0\xeb\xeb\xe5\xf2\xe5')")) # from line 42, col 13.
            write(''': <input type="text" name="pq" id="pq::float" size="4" value="">
''')
        write('''        <hr>
        <input type="submit" value="''')
        if False:
            _('Сохранить')
        _v = VFFSL(SL,"_",False)('Сохранить') # "$_('\xd1\xee\xf5\xf0\xe0\xed\xe8\xf2\xfc')" on line 45, col 37
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd1\xee\xf5\xf0\xe0\xed\xe8\xf2\xfc')")) # from line 45, col 37.
        write('''">
    </form>
    <script language="javascript">
        function prdatechg(){
            var prd = document.getElementById(\'productdate::date\').value ;
            var spl =  prd.split(\'.\');
            var d = new Date(\'20\'+spl[2],spl[1]-1,spl[0]);
            var ms = d.valueOf() + ''')
        _v = VFFSL(SL,"WUBDAYS",True) # '$WUBDAYS' on line 52, col 36
        if _v is not None: write(_filter(_v, rawExpr='$WUBDAYS')) # from line 52, col 36.
        write(""" * 24 * 60 * 60 * 1000;
            var d2 = new Date(ms);
            document.getElementById('bestbeforedate::date').value = ( (d2.getDate()>9) ? d2.getDate() : '0' + d2.getDate() ) + '.' +
              ( (d2.getMonth()>8) ? (d2.getMonth()+1) : '0' + (d2.getMonth()+1) ) + '.' +
              ( (d2.getFullYear()-2000 > 9) ? d2.getFullYear()-2000 : '0' + d2.getFullYear()-2000 );
        }

        function bbdatechg(){
            var bbd = document.getElementById('bestbeforedate::date').value ;
            var spl =  bbd.split('.');
            var d = new Date('20'+spl[2],spl[1]-1,spl[0]);
            var ms = d.valueOf() - """)
        _v = VFFSL(SL,"WUBDAYS",True) # '$WUBDAYS' on line 63, col 36
        if _v is not None: write(_filter(_v, rawExpr='$WUBDAYS')) # from line 63, col 36.
        write(""" * 24 * 60 * 60 * 1000;
            var d2 = new Date(ms);
            document.getElementById('productdate::date').value = ( (d2.getDate()>9) ? d2.getDate() : '0' + d2.getDate() ) + '.' +
              ( (d2.getMonth()>8) ? (d2.getMonth()+1) : '0' + (d2.getMonth()+1) ) + '.' +
              ( (d2.getFullYear()-2000 > 9) ? d2.getFullYear()-2000 : '0' + d2.getFullYear()-2000 );
        }

    </script>
""")
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskStackData= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskStackData, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskStackData, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskStackData)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskStackData()).run()


