#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336168.868
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:48 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\FIRSTINCOME\\templates\\taskStackWaresProdLine.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskStackWaresProdLine(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 4, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''    <b><u>''')
        _v = VFFSL(SL,"FROMNAME",True) # '$FROMNAME' on line 5, col 11
        if _v is not None: write(_filter(_v, rawExpr='$FROMNAME')) # from line 5, col 11.
        write('''</u></b><br>
    <b>''')
        _orig_filter_35119556 = _filter
        filterName = 'DateFilter'
        if self._CHEETAH__filters.has_key("DateFilter"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"DOCDATE",True) # '$DOCDATE' on line 6, col 26
        if _v is not None: write(_filter(_v, rawExpr='$DOCDATE')) # from line 6, col 26.
        _filter = _orig_filter_35119556
        write('''</b> \xb9<b>''')
        _v = VFFSL(SL,"DOCNUM",True) # '$DOCNUM' on line 6, col 55
        if _v is not None: write(_filter(_v, rawExpr='$DOCNUM')) # from line 6, col 55.
        write('''</b><br>
    <b>''')
        _v = VFFSL(SL,"S_NAME",True) # '$S_NAME' on line 7, col 8
        if _v is not None: write(_filter(_v, rawExpr='$S_NAME')) # from line 7, col 8.
        write('''</b>
    <hr>
    <b><u>(''')
        _v = VFFSL(SL,"WCODE",True) # '$WCODE' on line 9, col 12
        if _v is not None: write(_filter(_v, rawExpr='$WCODE')) # from line 9, col 12.
        write(''')</u></b> ''')
        _v = VFFSL(SL,"WNAME",True) # '$WNAME' on line 9, col 28
        if _v is not None: write(_filter(_v, rawExpr='$WNAME')) # from line 9, col 28.
        write('''<br>
''')
        if VFFSL(SL,"varExists",False)('$STACKMODELID'): # generated from line 10, col 5
            write('''        <b>''')
            _v = VFFSL(SL,"STACKMODELNAME",True) # '$STACKMODELNAME' on line 11, col 12
            if _v is not None: write(_filter(_v, rawExpr='$STACKMODELNAME')) # from line 11, col 12.
            write('''</b><br>
        <hr>
''')
        else: # generated from line 13, col 5
            write('''        <br>
''')
        write('''    
    ''')
        if False:
            _('Выберите линию производства')
        _v = VFFSL(SL,"_",False)('Выберите линию производства') # "$_('\xc2\xfb\xe1\xe5\xf0\xe8\xf2\xe5 \xeb\xe8\xed\xe8\xfe \xef\xf0\xee\xe8\xe7\xe2\xee\xe4\xf1\xf2\xe2\xe0')" on line 17, col 5
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc2\xfb\xe1\xe5\xf0\xe8\xf2\xe5 \xeb\xe8\xed\xe8\xfe \xef\xf0\xee\xe8\xe7\xe2\xee\xe4\xf1\xf2\xe2\xe0')")) # from line 17, col 5.
        write('''<br>
''')
        if VFFSL(SL,"varExists",False)('$datalist') and VFFSL(SL,"datalist",True): # generated from line 18, col 5
            if VFFSL(SL,"varExists",False)('$STACKMODELID'): # generated from line 19, col 9
                for item in VFFSL(SL,"datalist",True): # generated from line 20, col 13
                    write('''                <a href="taskStackWaresProducer?tid=''')
                    _v = VFFSL(SL,"TID",True) # '$TID' on line 21, col 53
                    if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 21, col 53.
                    write('''&sid=''')
                    _v = VFFSL(SL,"S_ID",True) # '$S_ID' on line 21, col 62
                    if _v is not None: write(_filter(_v, rawExpr='$S_ID')) # from line 21, col 62.
                    write('''&wid=''')
                    _v = VFFSL(SL,"WID",True) # '$WID' on line 21, col 72
                    if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 21, col 72.
                    write('''&mid=''')
                    _v = VFFSL(SL,"STACKMODELID",True) # '$STACKMODELID' on line 21, col 81
                    if _v is not None: write(_filter(_v, rawExpr='$STACKMODELID')) # from line 21, col 81.
                    write('''&lid=''')
                    _v = VFFSL(SL,"item.ID_PRODLINE",True) # '$item.ID_PRODLINE' on line 21, col 99
                    if _v is not None: write(_filter(_v, rawExpr='$item.ID_PRODLINE')) # from line 21, col 99.
                    write('''">''')
                    _v = VFFSL(SL,"item.NUMBER",True) # '$item.NUMBER' on line 21, col 118
                    if _v is not None: write(_filter(_v, rawExpr='$item.NUMBER')) # from line 21, col 118.
                    write(''' - ''')
                    _v = VFFSL(SL,"item.NAME",True) # '$item.NAME' on line 21, col 133
                    if _v is not None: write(_filter(_v, rawExpr='$item.NAME')) # from line 21, col 133.
                    write('''</a><br>
''')
            else: # generated from line 23, col 9
                for item in VFFSL(SL,"datalist",True): # generated from line 24, col 13
                    write('''                <a href="taskStackWaresProducer?tid=''')
                    _v = VFFSL(SL,"TID",True) # '$TID' on line 25, col 53
                    if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 25, col 53.
                    write('''&sid=''')
                    _v = VFFSL(SL,"S_ID",True) # '$S_ID' on line 25, col 62
                    if _v is not None: write(_filter(_v, rawExpr='$S_ID')) # from line 25, col 62.
                    write('''&wid=''')
                    _v = VFFSL(SL,"WID",True) # '$WID' on line 25, col 72
                    if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 25, col 72.
                    write('''&lid=''')
                    _v = VFFSL(SL,"item.ID_PRODLINE",True) # '$item.ID_PRODLINE' on line 25, col 81
                    if _v is not None: write(_filter(_v, rawExpr='$item.ID_PRODLINE')) # from line 25, col 81.
                    write('''">''')
                    _v = VFFSL(SL,"item.NUMBER",True) # '$item.NUMBER' on line 25, col 100
                    if _v is not None: write(_filter(_v, rawExpr='$item.NUMBER')) # from line 25, col 100.
                    write(''' - ''')
                    _v = VFFSL(SL,"item.NAME",True) # '$item.NAME' on line 25, col 115
                    if _v is not None: write(_filter(_v, rawExpr='$item.NAME')) # from line 25, col 115.
                    write('''</a><br>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskStackWaresProdLine= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskStackWaresProdLine, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskStackWaresProdLine, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskStackWaresProdLine)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskStackWaresProdLine()).run()


