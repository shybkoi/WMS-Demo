#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main
from systems.KURSSKLAD.cheetahutils import viewQuantity

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336171.359
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:51 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\WARESSLOT\\templates\\wares.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class wares(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData  at line 5, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        if VFFSL(SL,"objname",True): # generated from line 6, col 5
            write('''        <b>''')
            _v = VFFSL(SL,"objname",True) # '$objname' on line 7, col 12
            if _v is not None: write(_filter(_v, rawExpr='$objname')) # from line 7, col 12.
            write('''</b> <br><br>
''')
        write('''    
    <b><u>(''')
        _v = VFFSL(SL,"WCODE",True) # '$WCODE' on line 10, col 12
        if _v is not None: write(_filter(_v, rawExpr='$WCODE')) # from line 10, col 12.
        write(''')</u></b>''')
        _v = VFFSL(SL,"WNAME",True) # '$WNAME' on line 10, col 27
        if _v is not None: write(_filter(_v, rawExpr='$WNAME')) # from line 10, col 27.
        write('''<br>
''')
        if VFFSL(SL,"VWUCODE",True): # generated from line 11, col 5
            write('''        ''')
            _v = VFFSL(SL,"VWUCODE",True) # '$VWUCODE' on line 12, col 9
            if _v is not None: write(_filter(_v, rawExpr='$VWUCODE')) # from line 12, col 9.
            write(''' = ''')
            _orig_filter_97580455 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"VWUFACTOR",True) # '$VWUFACTOR' on line 12, col 36
            if _v is not None: write(_filter(_v, rawExpr='$VWUFACTOR')) # from line 12, col 36.
            _filter = _orig_filter_97580455
            write(''' ''')
            _v = VFFSL(SL,"MWUCODE",True) # '$MWUCODE' on line 12, col 59
            if _v is not None: write(_filter(_v, rawExpr='$MWUCODE')) # from line 12, col 59.
            write(''' <br>
''')
        if VFFSL(SL,"WSITEID",True): # generated from line 14, col 5
            write('''        <b>''')
            _v = VFFSL(SL,"WSITENAME",True) # '$WSITENAME' on line 15, col 12
            if _v is not None: write(_filter(_v, rawExpr='$WSITENAME')) # from line 15, col 12.
            write('''</b> :
''')
            if VFFSL(SL,"WSITEQ",True): # generated from line 16, col 9
                write('''            ''')
                _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"WSITEQ",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($WSITEQ,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 17, col 13
                if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($WSITEQ,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 17, col 13.
                write('''
            <b>(''')
                _orig_filter_20044409 = _filter
                filterName = 'Quantity'
                if self._CHEETAH__filters.has_key("Quantity"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"WSITEQ",True) # '$WSITEQ' on line 18, col 33
                if _v is not None: write(_filter(_v, rawExpr='$WSITEQ')) # from line 18, col 33.
                _filter = _orig_filter_20044409
                write(''')</b>
''')
            else : # generated from line 19, col 9
                write('''            <a href="javascript: if (confirm(\'\xc2\xfb  \xf3\xe2\xe5\xf0\xe5\xed\xfb, \xf7\xf2\xee \xf5\xee\xf2\xe8\xf2\xe5 \xee\xf2\xe2\xff\xe7\xe0\xf2\xfc \xf2\xee\xe2\xe0\xf0?\')) location.href=\'waresSlotDel?wid=''')
                _v = VFFSL(SL,"WID",True) # '$WID' on line 20, col 122
                if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 20, col 122.
                write('''\'">\xce\xf2\xe2\xff\xe7\xe0\xf2\xfc</a>
''')
            write('''        <br>
        ''')
            if False:
                _('Вместимость')
            _v = VFFSL(SL,"_",False)('Вместимость') # "$_('\xc2\xec\xe5\xf1\xf2\xe8\xec\xee\xf1\xf2\xfc')" on line 23, col 9
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc2\xec\xe5\xf1\xf2\xe8\xec\xee\xf1\xf2\xfc')")) # from line 23, col 9.
            write(''': ''')
            _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"WSITECONTENT",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($WSITECONTENT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 23, col 28
            if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($WSITECONTENT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 23, col 28.
            write('''
            <b>(''')
            _orig_filter_32052386 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"WSITECONTENT",True) # '$WSITECONTENT' on line 24, col 33
            if _v is not None: write(_filter(_v, rawExpr='$WSITECONTENT')) # from line 24, col 33.
            _filter = _orig_filter_32052386
            write(''')</b>
        <br>
''')
        write('''    
    <br>
    <form action=waresScan>
        <input type=hidden name=id value=''')
        _v = VFFSL(SL,"WID",True) # '$WID' on line 30, col 42
        if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 30, col 42.
        write('''>
        \xd8\xca: <input type=text name=barcode id=:scan title="\xd2\xee\xe2\xe0\xf0, \xcc\xce">
    </form>    

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_wares= 'writeBody'

## END CLASS DEFINITION

if not hasattr(wares, '_initCheetahAttributes'):
    templateAPIClass = getattr(wares, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(wares)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=wares()).run()


