#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336168.1719999
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:48 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\BUYRETURN\\templates\\taskList.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskList(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData     at line 4, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''    <form action="scanMain">
        <label>''')
        if False:
            _('ШК')
        _v = VFFSL(SL,"_",False)('ШК') # "$_('\xd8\xca')" on line 6, col 16
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd8\xca')")) # from line 6, col 16.
        write(''':<input type="text" title="''')
        if False:
            _('Документ')
        _v = VFFSL(SL,"_",False)('Документ') # "$_('\xc4\xee\xea\xf3\xec\xe5\xed\xf2')" on line 6, col 51
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xee\xea\xf3\xec\xe5\xed\xf2')")) # from line 6, col 51.
        write(''', ''')
        if False:
            _('Зона возвратов')
        _v = VFFSL(SL,"_",False)('Зона возвратов') # "$_('\xc7\xee\xed\xe0 \xe2\xee\xe7\xe2\xf0\xe0\xf2\xee\xe2')" on line 6, col 67
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc7\xee\xed\xe0 \xe2\xee\xe7\xe2\xf0\xe0\xf2\xee\xe2')")) # from line 6, col 67.
        write('''" name="barcode" id=":scan:text"></label>
    </form>
    
''')
        if VFFSL(SL,"varExists",False)('$datalist') and VFFSL(SL,"datalist",True): # generated from line 9, col 5
            write('''        <table>
            <thead>
                <tr>
                    <th>''')
            if False:
                _('Дата')
            _v = VFFSL(SL,"_",False)('Дата') # "$_('\xc4\xe0\xf2\xe0')" on line 13, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xe0\xf2\xe0')")) # from line 13, col 25.
            write('''</th>
                    <th>''')
            if False:
                _('Номер')
            _v = VFFSL(SL,"_",False)('Номер') # "$_('\xcd\xee\xec\xe5\xf0')" on line 14, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xee\xec\xe5\xf0')")) # from line 14, col 25.
            write('''</th>
                </tr>
            </thead>
            <tbody>
''')
            for item in VFFSL(SL,"datalist",True): # generated from line 18, col 15
                write('''                <tr>
                    <td>''')
                _orig_filter_75089228 = _filter
                filterName = 'DateFilter2'
                if self._CHEETAH__filters.has_key("DateFilter2"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.DOCDATE",True) # '$item.DOCDATE' on line 20, col 44
                if _v is not None: write(_filter(_v, rawExpr='$item.DOCDATE')) # from line 20, col 44.
                _filter = _orig_filter_75089228
                write('''</td>
                    <td style="text-align: left;"><a href="task?tid=''')
                _v = VFFSL(SL,"item.TASKID",True) # '$item.TASKID' on line 21, col 69
                if _v is not None: write(_filter(_v, rawExpr='$item.TASKID')) # from line 21, col 69.
                write('''" title="''')
                _v = VFFSL(SL,"item.FROMNAME",True) # '$item.FROMNAME' on line 21, col 90
                if _v is not None: write(_filter(_v, rawExpr='$item.FROMNAME')) # from line 21, col 90.
                write('''->''')
                _v = VFFSL(SL,"item.TONAME",True) # '$item.TONAME' on line 21, col 106
                if _v is not None: write(_filter(_v, rawExpr='$item.TONAME')) # from line 21, col 106.
                write('''">''')
                _v = VFFSL(SL,"item.DOCNUM",True) # '$item.DOCNUM' on line 21, col 120
                if _v is not None: write(_filter(_v, rawExpr='$item.DOCNUM')) # from line 21, col 120.
                write('''</a></td>
                </tr>
''')
            write('''            </tbody>
        </table>        
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskList= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskList, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskList, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskList)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskList()).run()


