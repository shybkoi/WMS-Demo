#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.cheetahutils import viewQuantity
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336168.158
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:48 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\BUYRETURN\\templates\\task.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class task(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 6, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''   
''')
        # <b><u>$TID</u></b><br>
        write('''   <b>''')
        _v = VFFSL(SL,"FROMNAME",True) # '$FROMNAME' on line 9, col 7
        if _v is not None: write(_filter(_v, rawExpr='$FROMNAME')) # from line 9, col 7.
        write('''</b><br>
   <b>''')
        _v = VFFSL(SL,"TONAME",True) # '$TONAME' on line 10, col 7
        if _v is not None: write(_filter(_v, rawExpr='$TONAME')) # from line 10, col 7.
        write('''</b><br>
   <b>''')
        _orig_filter_36571936 = _filter
        filterName = 'DateFilter'
        if self._CHEETAH__filters.has_key("DateFilter"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"DOCDATE",True) # '$DOCDATE' on line 11, col 25
        if _v is not None: write(_filter(_v, rawExpr='$DOCDATE')) # from line 11, col 25.
        _filter = _orig_filter_36571936
        write('''</b> \xb9<b>''')
        _v = VFFSL(SL,"DOCNUM",True) # '$DOCNUM' on line 11, col 54
        if _v is not None: write(_filter(_v, rawExpr='$DOCNUM')) # from line 11, col 54.
        write('''</b>
    <form action="taskScan">
        <input type="hidden" name="tid" value="''')
        _v = VFFSL(SL,"TID",True) # '$TID' on line 13, col 48
        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 13, col 48.
        write('''">
        ''')
        if False:
            _('ШК')
        _v = VFFSL(SL,"_",False)('ШК') # "$_('\xd8\xca')" on line 14, col 9
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd8\xca')")) # from line 14, col 9.
        write(''': <input type=\'text\' name=\'barcode\' id=\'barcode:scan\' title="''')
        if False:
            _('Документ')
        _v = VFFSL(SL,"_",False)('Документ') # "$_('\xc4\xee\xea\xf3\xec\xe5\xed\xf2')" on line 14, col 78
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xee\xea\xf3\xec\xe5\xed\xf2')")) # from line 14, col 78.
        write(''', ''')
        if False:
            _('Товар')
        _v = VFFSL(SL,"_",False)('Товар') # "$_('\xd2\xee\xe2\xe0\xf0')" on line 14, col 94
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd2\xee\xe2\xe0\xf0')")) # from line 14, col 94.
        write('''">
    </form>
   
''')
        if VFFSL(SL,"varExists",False)('$datalist'): # generated from line 17, col 4
            write('''    <table>
        <thead>
            <tr>
                <th>''')
            if False:
                _('Товар')
            _v = VFFSL(SL,"_",False)('Товар') # "$_('\xd2\xee\xe2\xe0\xf0')" on line 21, col 21
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd2\xee\xe2\xe0\xf0')")) # from line 21, col 21.
            write('''</th>
                <th>''')
            if False:
                _('План')
            _v = VFFSL(SL,"_",False)('План') # "$_('\xcf\xeb\xe0\xed')" on line 22, col 21
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xeb\xe0\xed')")) # from line 22, col 21.
            write('''</th>
                <th>''')
            if False:
                _('Факт')
            _v = VFFSL(SL,"_",False)('Факт') # "$_('\xd4\xe0\xea\xf2')" on line 23, col 21
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd4\xe0\xea\xf2')")) # from line 23, col 21.
            write('''</th>
                <th>&nbsp;</th>
            </tr>
        </thead>
        <tbody>
''')
            for item in VFFSL(SL,"datalist",True): # generated from line 28, col 9
                write('''            <tr>
                <td><a href="taskWares?tid=''')
                _v = VFFSL(SL,"TID",True) # '$TID' on line 30, col 44
                if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 30, col 44.
                write('''&wid=''')
                _v = VFFSL(SL,"item.WID",True) # '$item.WID' on line 30, col 53
                if _v is not None: write(_filter(_v, rawExpr='$item.WID')) # from line 30, col 53.
                write('''" title="''')
                _v = VFN(VFFSL(SL,"item.WNAME",True),"replace",False)('"',"'") # '$item.WNAME.replace(\'"\',"\'")' on line 30, col 71
                if _v is not None: write(_filter(_v, rawExpr='$item.WNAME.replace(\'"\',"\'")')) # from line 30, col 71.
                write('''">''')
                _v = VFFSL(SL,"item.WCODE",True) # '$item.WCODE' on line 30, col 101
                if _v is not None: write(_filter(_v, rawExpr='$item.WCODE')) # from line 30, col 101.
                write('''</a></td>
                <td>''')
                _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.QDOC",True),VFFSL(SL,"item.VUFACTOR",True),VFFSL(SL,"item.VUCODE",True),VFFSL(SL,"item.MUFACTOR",True),VFFSL(SL,"item.MUCODE",True)) # '$viewQuantity($item.QDOC,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)' on line 31, col 21
                if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.QDOC,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)')) # from line 31, col 21.
                write(''' (<b><u>''')
                _orig_filter_18085620 = _filter
                filterName = 'Quantity'
                if self._CHEETAH__filters.has_key("Quantity"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.QDOC",True) # '$item.QDOC' on line 31, col 126
                if _v is not None: write(_filter(_v, rawExpr='$item.QDOC')) # from line 31, col 126.
                _filter = _orig_filter_18085620
                write('''</u></b>)</td>
                <td>''')
                _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.QFACT",True),VFFSL(SL,"item.VUFACTOR",True),VFFSL(SL,"item.VUCODE",True),VFFSL(SL,"item.MUFACTOR",True),VFFSL(SL,"item.MUCODE",True)) # '$viewQuantity($item.QFACT,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)' on line 32, col 21
                if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.QFACT,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)')) # from line 32, col 21.
                write(''' (<b><u>''')
                _orig_filter_59341040 = _filter
                filterName = 'Quantity'
                if self._CHEETAH__filters.has_key("Quantity"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.QFACT",True) # '$item.QFACT' on line 32, col 127
                if _v is not None: write(_filter(_v, rawExpr='$item.QFACT')) # from line 32, col 127.
                _filter = _orig_filter_59341040
                write('''</u></b>)</td>
''')
                if VFFSL(SL,"item.QFACT",True): # generated from line 33, col 15
                    qFact = float(VFFSL(SL,"item.QFACT",True))
                else: # generated from line 35, col 15
                    qFact = 0.0000
                if VFFSL(SL,"item.QDOC",True): # generated from line 38, col 15
                    qDoc = float(VFFSL(SL,"item.QDOC",True))
                else: # generated from line 40, col 15
                    qDoc = 0.0000
                if VFFSL(SL,"qFact",True) > VFFSL(SL,"qDoc",True): # generated from line 43, col 15
                    write('''                <td style="color:red;"><b>+</b></td>
''')
                elif VFFSL(SL,"qDoc",True) > VFFSL(SL,"qFact",True) : # generated from line 45, col 15
                    write('''                <td style="color:red;"><b>-</b></td>
''')
                else: # generated from line 47, col 15
                    write('''                <td style="color:green;">v</td>
''')
                write('''            </tr>
''')
            write('''        </tbody>    
    </table>
''')
        else   : # generated from line 54, col 4
            write('''    <br>
''')
        write('''   <a href="javascript: if (confirm(\'''')
        if False:
            _('Вы  уверены?')
        _v = VFFSL(SL,"_",False)('Вы  уверены?') # "$_('\xc2\xfb  \xf3\xe2\xe5\xf0\xe5\xed\xfb?')" on line 57, col 38
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc2\xfb  \xf3\xe2\xe5\xf0\xe5\xed\xfb?')")) # from line 57, col 38.
        write("""')) location.href='taskEnd?tid=""")
        _v = VFFSL(SL,"TID",True) # '$TID' on line 57, col 87
        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 57, col 87.
        write('''\'">''')
        if False:
            _('Завершить')
        _v = VFFSL(SL,"_",False)('Завершить') # "$_('\xc7\xe0\xe2\xe5\xf0\xf8\xe8\xf2\xfc')" on line 57, col 94
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc7\xe0\xe2\xe5\xf0\xf8\xe8\xf2\xfc')")) # from line 57, col 94.
        write('''</a>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''


''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_task= 'writeBody'

## END CLASS DEFINITION

if not hasattr(task, '_initCheetahAttributes'):
    templateAPIClass = getattr(task, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(task)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=task()).run()


