#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main
from systems.KURSSKLAD.cheetahutils import viewQuantity

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336168.1919999
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:48 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\BUYRETURN\\templates\\taskWares.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskWares(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData         at line 5, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''    <b>''')
        _v = VFFSL(SL,"FROMNAME",True) # '$FROMNAME' on line 6, col 8
        if _v is not None: write(_filter(_v, rawExpr='$FROMNAME')) # from line 6, col 8.
        write('''</b><br>
    <b>''')
        _v = VFFSL(SL,"TONAME",True) # '$TONAME' on line 7, col 8
        if _v is not None: write(_filter(_v, rawExpr='$TONAME')) # from line 7, col 8.
        write('''</b><br>
    <b><u>''')
        _orig_filter_79438240 = _filter
        filterName = 'DateFilter'
        if self._CHEETAH__filters.has_key("DateFilter"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"DOCDATE",True) # '$DOCDATE' on line 8, col 29
        if _v is not None: write(_filter(_v, rawExpr='$DOCDATE')) # from line 8, col 29.
        _filter = _orig_filter_79438240
        write('''</u></b> \xb9<b><u>''')
        _v = VFFSL(SL,"DOCNUM",True) # '$DOCNUM' on line 8, col 65
        if _v is not None: write(_filter(_v, rawExpr='$DOCNUM')) # from line 8, col 65.
        write('''</b></u> <br>
    <b><u>(''')
        _v = VFFSL(SL,"WCODE",True) # '$WCODE' on line 9, col 12
        if _v is not None: write(_filter(_v, rawExpr='$WCODE')) # from line 9, col 12.
        write(''')</u></b>''')
        _v = VFFSL(SL,"WNAME",True) # '$WNAME' on line 9, col 27
        if _v is not None: write(_filter(_v, rawExpr='$WNAME')) # from line 9, col 27.
        write('''<br>
    
    
''')
        if VFFSL(SL,"varExists",False)('$datalist'): # generated from line 12, col 5
            PID = 0
            q = 0
            q2 = 0
            type = '';
            for item in VFFSL(SL,"datalist",True): # generated from line 17, col 9
                if VFFSL(SL,"type",True) != VFFSL(SL,"item.STYPE",True): # generated from line 18, col 13
                    write('''                <br><b> 
''')
                    type = VFFSL(SL,"item.SNAME",True)
                    write('''                ''')
                    _v = VFFSL(SL,"item.SNAME",True) # '$item.SNAME' on line 21, col 17
                    if _v is not None: write(_filter(_v, rawExpr='$item.SNAME')) # from line 21, col 17.
                    write('''
                </b><br>
''')
                write('''                <a href="taskWaresEdit?pid=''')
                _v = VFFSL(SL,"item.PID",True) # '$item.PID' on line 24, col 44
                if _v is not None: write(_filter(_v, rawExpr='$item.PID')) # from line 24, col 44.
                write('''&wid=''')
                _v = VFFSL(SL,"WID",True) # '$WID' on line 24, col 58
                if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 24, col 58.
                write('''&tid=''')
                _v = VFFSL(SL,"TID",True) # '$TID' on line 24, col 67
                if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 24, col 67.
                write('''&pdate=''')
                _orig_filter_11023623 = _filter
                filterName = 'DateFilter2'
                if self._CHEETAH__filters.has_key("DateFilter2"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.PDATE",True) # '$item.PDATE' on line 24, col 97
                if _v is not None: write(_filter(_v, rawExpr='$item.PDATE')) # from line 24, col 97.
                _filter = _orig_filter_11023623
                write('''">''')
                _orig_filter_10131778 = _filter
                filterName = 'DateFilter2'
                if self._CHEETAH__filters.has_key("DateFilter2"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.PDATE",True) # '$item.PDATE' on line 24, col 141
                if _v is not None: write(_filter(_v, rawExpr='$item.PDATE')) # from line 24, col 141.
                _filter = _orig_filter_10131778
                write('''</a>: ''')
                _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.Q",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($item.Q,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 24, col 170
                if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.Q,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 24, col 170.
                write(''' (<b>''')
                _orig_filter_46423092 = _filter
                filterName = 'Quantity'
                if self._CHEETAH__filters.has_key("Quantity"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.Q",True) # '$item.Q' on line 24, col 253
                if _v is not None: write(_filter(_v, rawExpr='$item.Q')) # from line 24, col 253.
                _filter = _orig_filter_46423092
                write('''</b>)<br>
                       
''')
        write('''    <hr>
    <a href="taskWaresLotAdd?tid=''')
        _v = VFFSL(SL,"TID",True) # '$TID' on line 29, col 34
        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 29, col 34.
        write('''&waresid=''')
        _v = VFFSL(SL,"WID",True) # '$WID' on line 29, col 47
        if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 29, col 47.
        write('''">''')
        if False:
            _('Добавить')
        _v = VFFSL(SL,"_",False)('Добавить') # "$_('\xc4\xee\xe1\xe0\xe2\xe8\xf2\xfc')" on line 29, col 53
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xee\xe1\xe0\xe2\xe8\xf2\xfc')")) # from line 29, col 53.
        write('''</a>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskWares= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskWares, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskWares, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskWares)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskWares()).run()


