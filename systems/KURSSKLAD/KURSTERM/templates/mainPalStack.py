#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main
from systems.KURSSKLAD.cheetahutils import viewQuantity
from systems.KURSSKLAD.cheetahutils import Quantity
from systems.KURSSKLAD.cheetahutils import TimeStampToDate

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336171.256
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:51 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\templates\\mainPalStack.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class mainPalStack(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def palBefore(self, **KWS):



        ## CHEETAH: generated from #block palBefore at line 9, col 3.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def palInfo(self, **KWS):



        ## CHEETAH: generated from #block palInfo at line 12, col 3.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        if VFFSL(SL,"P_FEATUREID",True): # generated from line 13, col 5
            if VFFSL(SL,"S_PALFEATUREID",True) != VFFSL(SL,"P_FEATUREID",True): # generated from line 14, col 9
                write('''            <font class="yellow">''')
                _v = VFFSL(SL,"P_FEATURENAME",True) # '$P_FEATURENAME' on line 15, col 34
                if _v is not None: write(_filter(_v, rawExpr='$P_FEATURENAME')) # from line 15, col 34.
                write('''</font>
''')
            else: # generated from line 16, col 9
                write('''            ''')
                _v = VFFSL(SL,"P_FEATURENAME",True) # '$P_FEATURENAME' on line 17, col 13
                if _v is not None: write(_filter(_v, rawExpr='$P_FEATURENAME')) # from line 17, col 13.
                write('''
''')
            write('''        <br>
''')
        if VFFSL(SL,"varExists",False)('$P_NUM') and VFFSL(SL,"P_NUM",True): # generated from line 21, col 2
            write('''\t\t<b><u>''')
            _v = VFFSL(SL,"P_NUM",True) # '$P_NUM' on line 22, col 9
            if _v is not None: write(_filter(_v, rawExpr='$P_NUM')) # from line 22, col 9.
            write('''</u></b>(''')
            _v = VFFSL(SL,"P_SNAME",True) # '$P_SNAME' on line 22, col 24
            if _v is not None: write(_filter(_v, rawExpr='$P_SNAME')) # from line 22, col 24.
            write(''')
''')
        else: # generated from line 23, col 2
            write('''\t    <b>''')
            _v = VFFSL(SL,"P_SNAME",True) # '$P_SNAME' on line 24, col 9
            if _v is not None: write(_filter(_v, rawExpr='$P_SNAME')) # from line 24, col 9.
            write('''</b>
''')
        write('''\t<br>
    <b>(''')
        _v = VFFSL(SL,"W_CODE",True) # '$W_CODE' on line 27, col 9
        if _v is not None: write(_filter(_v, rawExpr='$W_CODE')) # from line 27, col 9.
        write(''')</b> ''')
        _v = VFFSL(SL,"W_NAME",True) # '$W_NAME' on line 27, col 22
        if _v is not None: write(_filter(_v, rawExpr='$W_NAME')) # from line 27, col 22.
        write('''
''')
        if VFFSL(SL,"varExists",False)('$W_SNAME') and VFFSL(SL,"W_SNAME",True): # generated from line 28, col 5
            write('''        <br>''')
            if False:
                _('МО')
            _v = VFFSL(SL,"_",False)('МО') # "$_('\xcc\xce')" on line 29, col 13
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcc\xce')")) # from line 29, col 13.
            write(''': ''')
            _v = VFFSL(SL,"W_SNAME",True) # '$W_SNAME' on line 29, col 23
            if _v is not None: write(_filter(_v, rawExpr='$W_SNAME')) # from line 29, col 23.
            write('''
''')
        write('''    <br>
    ''')
        if False:
            _('На паллете')
        _v = VFFSL(SL,"_",False)('На паллете') # "$_('\xcd\xe0 \xef\xe0\xeb\xeb\xe5\xf2\xe5')" on line 32, col 5
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xe0 \xef\xe0\xeb\xeb\xe5\xf2\xe5')")) # from line 32, col 5.
        write(''': ''')
        _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"P_WQ",True),VFFSL(SL,"W_VUFACTOR",True),VFFSL(SL,"W_VUCODE",True),VFFSL(SL,"W_MUFACTOR",True),VFFSL(SL,"W_MUCODE",True)) # '$viewQuantity($P_WQ,$W_VUFACTOR,$W_VUCODE,$W_MUFACTOR,$W_MUCODE)' on line 32, col 23
        if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($P_WQ,$W_VUFACTOR,$W_VUCODE,$W_MUFACTOR,$W_MUCODE)')) # from line 32, col 23.
        write(''' (<b><u>''')
        _v = VFFSL(SL,"Quantity",False)(VFFSL(SL,"P_WQ",True)) # '$Quantity($P_WQ)' on line 32, col 95
        if _v is not None: write(_filter(_v, rawExpr='$Quantity($P_WQ)')) # from line 32, col 95.
        write('''</u></b>)<br>
    <b>''')
        _v = VFFSL(SL,"TimeStampToDate",False)(VFFSL(SL,"W_PRODUCTDATE",True)) # '$TimeStampToDate($W_PRODUCTDATE)' on line 33, col 8
        if _v is not None: write(_filter(_v, rawExpr='$TimeStampToDate($W_PRODUCTDATE)')) # from line 33, col 8.
        write('''</b> - ''')
        _v = VFFSL(SL,"TimeStampToDate",False)(VFFSL(SL,"W_BESTBEFOREDATE",True)) # '$TimeStampToDate($W_BESTBEFOREDATE)' on line 33, col 47
        if _v is not None: write(_filter(_v, rawExpr='$TimeStampToDate($W_BESTBEFOREDATE)')) # from line 33, col 47.
        write('''
    <hr>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def stackInfo(self, **KWS):



        ## CHEETAH: generated from #block stackInfo at line 37, col 3.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        if VFFSL(SL,"S_PALFEATUREID",True): # generated from line 38, col 5
            if VFFSL(SL,"S_PALFEATUREID",True) != VFFSL(SL,"P_FEATUREID",True): # generated from line 39, col 9
                write('''            <font class="yellow">''')
                _v = VFFSL(SL,"S_PALFEATURENAME",True) # '$S_PALFEATURENAME' on line 40, col 34
                if _v is not None: write(_filter(_v, rawExpr='$S_PALFEATURENAME')) # from line 40, col 34.
                write('''</font>
''')
            else: # generated from line 41, col 9
                write('''            ''')
                _v = VFFSL(SL,"S_PALFEATURENAME",True) # '$S_PALFEATURENAME' on line 42, col 13
                if _v is not None: write(_filter(_v, rawExpr='$S_PALFEATURENAME')) # from line 42, col 13.
                write('''
''')
            write('''        <br>
''')
        write('''
    <b>''')
        _v = VFFSL(SL,"S_NAME",True) # '$S_NAME' on line 47, col 8
        if _v is not None: write(_filter(_v, rawExpr='$S_NAME')) # from line 47, col 8.
        write('''</b>
''')
        if VFFSL(SL,"S_MODELID",True): # generated from line 48, col 5
            write('''        (''')
            _v = VFFSL(SL,"S_PALCURCNT",True) # '$S_PALCURCNT' on line 49, col 10
            if _v is not None: write(_filter(_v, rawExpr='$S_PALCURCNT')) # from line 49, col 10.
            write(''' / ''')
            _v = VFFSL(SL,"S_PALMAXCNT",True) # '$S_PALMAXCNT' on line 49, col 25
            if _v is not None: write(_filter(_v, rawExpr='$S_PALMAXCNT')) # from line 49, col 25.
            write(''') <br>
        ''')
            _v = VFFSL(SL,"S_PALNUM",True) # '$S_PALNUM' on line 50, col 9
            if _v is not None: write(_filter(_v, rawExpr='$S_PALNUM')) # from line 50, col 9.
            write(''' <br>
''')
        write('''    <hr>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def stackModels(self, **KWS):



        ## CHEETAH: generated from #block stackModels at line 55, col 3.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        if not VFFSL(SL,"S_MODELID",True): # generated from line 57, col 5
            write('''        ''')
            if False:
                _('Выберите модель штабеля')
            _v = VFFSL(SL,"_",False)('Выберите модель штабеля') # "$_('\xc2\xfb\xe1\xe5\xf0\xe8\xf2\xe5 \xec\xee\xe4\xe5\xeb\xfc \xf8\xf2\xe0\xe1\xe5\xeb\xff')" on line 58, col 9
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc2\xfb\xe1\xe5\xf0\xe8\xf2\xe5 \xec\xee\xe4\xe5\xeb\xfc \xf8\xf2\xe0\xe1\xe5\xeb\xff')")) # from line 58, col 9.
            write('''<br>
''')
            if VFFSL(SL,"varExists",False)('$datalist') and VFFSL(SL,"datalist",True): # generated from line 59, col 9
                for item in VFFSL(SL,"datalist",True): # generated from line 60, col 13
                    write('''                <a href="palSiteStackSet?id=''')
                    _v = VFFSL(SL,"P_ID",True) # '$P_ID' on line 61, col 45
                    if _v is not None: write(_filter(_v, rawExpr='$P_ID')) # from line 61, col 45.
                    write('''&sid=''')
                    _v = VFFSL(SL,"S_ID",True) # '$S_ID' on line 61, col 55
                    if _v is not None: write(_filter(_v, rawExpr='$S_ID')) # from line 61, col 55.
                    write('''&mid=''')
                    _v = VFFSL(SL,"item.MODELID",True) # '$item.MODELID' on line 61, col 65
                    if _v is not None: write(_filter(_v, rawExpr='$item.MODELID')) # from line 61, col 65.
                    write('''&cdt=''')
                    _v = VFFSL(SL,"CDT",True) # '$CDT' on line 61, col 83
                    if _v is not None: write(_filter(_v, rawExpr='$CDT')) # from line 61, col 83.
                    write('''">''')
                    _v = VFFSL(SL,"item.MODELNAME",True) # '$item.MODELNAME' on line 61, col 89
                    if _v is not None: write(_filter(_v, rawExpr='$item.MODELNAME')) # from line 61, col 89.
                    write('''</a><br>
''')
                write('''            </form>
''')
        else: # generated from line 65, col 5
            # #if $S_PALFEATUREID != $P_FEATUREID
            #             <a href="palSiteStackSet?id=$P_ID&sid=$S_ID&cdt=$CDT" onClick="return confirm('$_('Характеристии штабеля и паллета не совпадают! Продолжить?')')">
            #             $_('Переместить')</a><br>
            #         #else
            #             <a href="palSiteStackSet?id=$P_ID&sid=$S_ID&cdt=$CDT">$_('Переместить')</a><br>
            #         #end if
            if VFFSL(SL,"S_PALFEATUREID",True) == VFFSL(SL,"P_FEATUREID",True): # generated from line 72, col 9
                write('''            <a href="palSiteStackSet?id=''')
                _v = VFFSL(SL,"P_ID",True) # '$P_ID' on line 73, col 41
                if _v is not None: write(_filter(_v, rawExpr='$P_ID')) # from line 73, col 41.
                write('''&sid=''')
                _v = VFFSL(SL,"S_ID",True) # '$S_ID' on line 73, col 51
                if _v is not None: write(_filter(_v, rawExpr='$S_ID')) # from line 73, col 51.
                write('''&cdt=''')
                _v = VFFSL(SL,"CDT",True) # '$CDT' on line 73, col 61
                if _v is not None: write(_filter(_v, rawExpr='$CDT')) # from line 73, col 61.
                write('''">''')
                if False:
                    _('Переместить')
                _v = VFFSL(SL,"_",False)('Переместить') # "$_('\xcf\xe5\xf0\xe5\xec\xe5\xf1\xf2\xe8\xf2\xfc')" on line 73, col 67
                if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xe5\xf0\xe5\xec\xe5\xf1\xf2\xe8\xf2\xfc')")) # from line 73, col 67.
                write('''</a><br>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 8, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        self.palBefore(trans=trans)
        write('''
''')
        self.palInfo(trans=trans)
        write('''
''')
        self.stackInfo(trans=trans)
        write('''
''')
        self.stackModels(trans=trans)
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_mainPalStack= 'writeBody'

## END CLASS DEFINITION

if not hasattr(mainPalStack, '_initCheetahAttributes'):
    templateAPIClass = getattr(mainPalStack, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(mainPalStack)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=mainPalStack()).run()


