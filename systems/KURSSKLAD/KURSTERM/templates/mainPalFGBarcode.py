#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336171.1229999
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:51 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\templates\\mainPalFGBarcode.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class mainPalFGBarcode(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def palBefore(self, **KWS):



        ## CHEETAH: generated from #block palBefore at line 5, col 3.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def palInfo(self, **KWS):



        ## CHEETAH: generated from #block palInfo at line 8, col 3.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        if VFFSL(SL,"clientConf.palletFeatures",True) and VFFSL(SL,"varExists",False)('$PFID') and VFFSL(SL,"PFID",True): # generated from line 9, col 2
            # <a href="palCreateFP?barcode=$PAL_BARCODE&dt=$ctm">$PFNAME</a>
            write('''        <u>''')
            _v = VFFSL(SL,"PFNAME",True) # '$PFNAME' on line 11, col 12
            if _v is not None: write(_filter(_v, rawExpr='$PFNAME')) # from line 11, col 12.
            write('''</u>
        <br>
''')
        write('''
    <b><u>''')
        _v = VFFSL(SL,"PAL_NUM",True) # '$PAL_NUM' on line 15, col 11
        if _v is not None: write(_filter(_v, rawExpr='$PAL_NUM')) # from line 15, col 11.
        write('''</u></b>
\t<br>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def palWares(self, **KWS):



        ## CHEETAH: generated from #block palWares at line 19, col 3.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''    <b>(''')
        _v = VFFSL(SL,"WCODE",True) # '$WCODE' on line 20, col 9
        if _v is not None: write(_filter(_v, rawExpr='$WCODE')) # from line 20, col 9.
        write(''')</b> ''')
        _v = VFFSL(SL,"WNAME",True) # '$WNAME' on line 20, col 21
        if _v is not None: write(_filter(_v, rawExpr='$WNAME')) # from line 20, col 21.
        write('''<br><br>
    <form action="palCreateFP">
        <input type="hidden" name="barcode" value="''')
        _v = VFFSL(SL,"PAL_BARCODE",True) # '$PAL_BARCODE' on line 22, col 52
        if _v is not None: write(_filter(_v, rawExpr='$PAL_BARCODE')) # from line 22, col 52.
        write('''">
        <input type="hidden" name="dt" value="''')
        _v = VFFSL(SL,"ctm",True) # '$ctm' on line 23, col 47
        if _v is not None: write(_filter(_v, rawExpr='$ctm')) # from line 23, col 47.
        write('''">
''')
        if VFFSL(SL,"varExists",False)('$PFID'): # generated from line 24, col 9
            write('''            <input type="hidden" name="featureid" value="''')
            _v = VFFSL(SL,"PFID",True) # '$PFID' on line 25, col 58
            if _v is not None: write(_filter(_v, rawExpr='$PFID')) # from line 25, col 58.
            write('''">
''')
        write('''        <b>''')
        _v = VFFSL(SL,"PAL_PRODLINENAME",True) # '$PAL_PRODLINENAME' on line 27, col 12
        if _v is not None: write(_filter(_v, rawExpr='$PAL_PRODLINENAME')) # from line 27, col 12.
        write('''</b><br>
        ''')
        if False:
            _('Произведен')
        _v = VFFSL(SL,"_",False)('Произведен') # "$_('\xcf\xf0\xee\xe8\xe7\xe2\xe5\xe4\xe5\xed')" on line 28, col 9
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xf0\xee\xe8\xe7\xe2\xe5\xe4\xe5\xed')")) # from line 28, col 9.
        write(''': <u><b>''')
        _orig_filter_25292013 = _filter
        filterName = 'DateFilter2'
        if self._CHEETAH__filters.has_key("DateFilter2"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"PRODUCTDATE",True) # '$PRODUCTDATE' on line 28, col 52
        if _v is not None: write(_filter(_v, rawExpr='$PRODUCTDATE')) # from line 28, col 52.
        _filter = _orig_filter_25292013
        write('''</b></u><br>
        ''')
        if False:
            _('Годен до')
        _v = VFFSL(SL,"_",False)('Годен до') # "$_('\xc3\xee\xe4\xe5\xed \xe4\xee')" on line 29, col 9
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc3\xee\xe4\xe5\xed \xe4\xee')")) # from line 29, col 9.
        write(''': <b>''')
        _orig_filter_16264656 = _filter
        filterName = 'DateFilter2'
        if self._CHEETAH__filters.has_key("DateFilter2"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"BESTBEFOREDATE",True) # '$BESTBEFOREDATE' on line 29, col 47
        if _v is not None: write(_filter(_v, rawExpr='$BESTBEFOREDATE')) # from line 29, col 47.
        _filter = _orig_filter_16264656
        write('''</b><br>
        ''')
        if False:
            _('Кол-во')
        _v = VFFSL(SL,"_",False)('Кол-во') # "$_('\xca\xee\xeb-\xe2\xee')" on line 30, col 9
        if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xee\xeb-\xe2\xee')")) # from line 30, col 9.
        write(''': <input size="4" type="text" id="::float" name="quantity" value="''')
        _orig_filter_76551280 = _filter
        filterName = 'Quantity'
        if self._CHEETAH__filters.has_key("Quantity"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"QUANTITY",True) # '$QUANTITY' on line 30, col 103
        if _v is not None: write(_filter(_v, rawExpr='$QUANTITY')) # from line 30, col 103.
        _filter = _orig_filter_76551280
        write('''"><br>

        <br>
        ''')
        if False:
            _('Отсканируйте ШК паллета для создания')
        _v = VFFSL(SL,"_",False)('Отсканируйте ШК паллета для создания') # "$_('\xce\xf2\xf1\xea\xe0\xed\xe8\xf0\xf3\xe9\xf2\xe5 \xd8\xca \xef\xe0\xeb\xeb\xe5\xf2\xe0 \xe4\xeb\xff \xf1\xee\xe7\xe4\xe0\xed\xe8\xff')" on line 33, col 9
        if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xf2\xf1\xea\xe0\xed\xe8\xf0\xf3\xe9\xf2\xe5 \xd8\xca \xef\xe0\xeb\xeb\xe5\xf2\xe0 \xe4\xeb\xff \xf1\xee\xe7\xe4\xe0\xed\xe8\xff')")) # from line 33, col 9.
        write(''':
        <input type="text" id=":scan:text" name="barcodeconf">
        <input type=submit value="''')
        if False:
            _('Ок')
        _v = VFFSL(SL,"_",False)('Ок') # "$_('\xce\xea')" on line 35, col 35
        if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xea')")) # from line 35, col 35.
        write('''">
    </form>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def palFooter(self, **KWS):



        ## CHEETAH: generated from #block palFooter at line 39, col 3.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 4, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        self.palBefore(trans=trans)
        write('''
''')
        self.palInfo(trans=trans)
        write('''
''')
        self.palWares(trans=trans)
        write('''
''')
        self.palFooter(trans=trans)
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_mainPalFGBarcode= 'writeBody'

## END CLASS DEFINITION

if not hasattr(mainPalFGBarcode, '_initCheetahAttributes'):
    templateAPIClass = getattr(mainPalFGBarcode, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(mainPalFGBarcode)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=mainPalFGBarcode()).run()


