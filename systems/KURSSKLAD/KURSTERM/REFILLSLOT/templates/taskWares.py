#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.cheetahutils import coalesceValue
from systems.KURSSKLAD.cheetahutils import viewQuantity
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336170.066
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:50 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\REFILLSLOT\\templates\\taskWares.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskWares(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData     at line 6, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''    <b>''')
        _v = VFFSL(SL,"SITENAME",True) # '$SITENAME' on line 7, col 8
        if _v is not None: write(_filter(_v, rawExpr='$SITENAME')) # from line 7, col 8.
        write('''</b><br>
    <b><u>(''')
        _v = VFFSL(SL,"WCODE",True) # '$WCODE' on line 8, col 12
        if _v is not None: write(_filter(_v, rawExpr='$WCODE')) # from line 8, col 12.
        write(''')</u></b>''')
        _v = VFFSL(SL,"WNAME",True) # '$WNAME' on line 8, col 27
        if _v is not None: write(_filter(_v, rawExpr='$WNAME')) # from line 8, col 27.
        write('''<br>
''')
        if VFFSL(SL,"varExists",False)('$pid'): # generated from line 9, col 5
            write('''        <a href="rfsTaskWaresPallet?tid=''')
            _v = VFFSL(SL,"TID",True) # '$TID' on line 10, col 41
            if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 10, col 41.
            write('''&wid=''')
            _v = VFFSL(SL,"WID",True) # '$WID' on line 10, col 50
            if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 10, col 50.
            write('''">
''')
            if VFFSL(SL,"pnum",True): # generated from line 11, col 13
                write('''                ''')
                _v = VFFSL(SL,"pnum",True) # '$pnum' on line 12, col 17
                if _v is not None: write(_filter(_v, rawExpr='$pnum')) # from line 12, col 17.
                write(''' (''')
                _v = VFFSL(SL,"psname",True) # '$psname' on line 12, col 24
                if _v is not None: write(_filter(_v, rawExpr='$psname')) # from line 12, col 24.
                write(''')
''')
            else: # generated from line 13, col 13
                write('''                ''')
                _v = VFFSL(SL,"psname",True) # '$psname' on line 14, col 17
                if _v is not None: write(_filter(_v, rawExpr='$psname')) # from line 14, col 17.
                write('''
''')
            write('''        </a>    
        <br>
''')
        write('''    ''')
        if False:
            _('Вм-сть')
        _v = VFFSL(SL,"_",False)('Вм-сть') # "$_('\xc2\xec-\xf1\xf2\xfc')" on line 19, col 5
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc2\xec-\xf1\xf2\xfc')")) # from line 19, col 5.
        write(''': <font class="green">''')
        _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"QCONTENT",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($QCONTENT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 19, col 39
        if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($QCONTENT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 19, col 39.
        write('''(<b><u>''')
        _orig_filter_47692715 = _filter
        filterName = 'Quantity'
        if self._CHEETAH__filters.has_key("Quantity"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"QSLOT",True) # '$QSLOT' on line 19, col 126
        if _v is not None: write(_filter(_v, rawExpr='$QSLOT')) # from line 19, col 126.
        _filter = _orig_filter_47692715
        write('''</u></b>)</font><br>
    ''')
        if False:
            _('На МО')
        _v = VFFSL(SL,"_",False)('На МО') # "$_('\xcd\xe0 \xcc\xce')" on line 20, col 5
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xe0 \xcc\xce')")) # from line 20, col 5.
        write(''': <font class="green">''')
        _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"QSLOT",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($QSLOT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 20, col 38
        if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($QSLOT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 20, col 38.
        write('''(<b><u>''')
        _orig_filter_14271684 = _filter
        filterName = 'Quantity'
        if self._CHEETAH__filters.has_key("Quantity"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"QSLOT",True) # '$QSLOT' on line 20, col 122
        if _v is not None: write(_filter(_v, rawExpr='$QSLOT')) # from line 20, col 122.
        _filter = _orig_filter_14271684
        write('''</u></b>)</font><br>
    ''')
        if False:
            _('Заказ')
        _v = VFFSL(SL,"_",False)('Заказ') # "$_('\xc7\xe0\xea\xe0\xe7')" on line 21, col 5
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc7\xe0\xea\xe0\xe7')")) # from line 21, col 5.
        write(''': <font class="yellow">''')
        _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"QNEED",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($QNEED,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 21, col 39
        if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($QNEED,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 21, col 39.
        write('''(<b><u>''')
        _orig_filter_38284524 = _filter
        filterName = 'Quantity'
        if self._CHEETAH__filters.has_key("Quantity"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"QNEED",True) # '$QNEED' on line 21, col 123
        if _v is not None: write(_filter(_v, rawExpr='$QNEED')) # from line 21, col 123.
        _filter = _orig_filter_38284524
        write('''</u></b>)</font><br>
    <br>
    ''')
        if False:
            _('Пополнить')
        _v = VFFSL(SL,"_",False)('Пополнить') # "$_('\xcf\xee\xef\xee\xeb\xed\xe8\xf2\xfc')" on line 23, col 5
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xee\xef\xee\xeb\xed\xe8\xf2\xfc')")) # from line 23, col 5.
        write(''': <font class="red">''')
        _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"QREFILL",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($QREFILL,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 23, col 40
        if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($QREFILL,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 23, col 40.
        write('''(<b><u>''')
        _orig_filter_71341196 = _filter
        filterName = 'Quantity'
        if self._CHEETAH__filters.has_key("Quantity"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"QREFILL",True) # '$QREFILL' on line 23, col 126
        if _v is not None: write(_filter(_v, rawExpr='$QREFILL')) # from line 23, col 126.
        _filter = _orig_filter_71341196
        write('''</u></b>)</font>
    <hr>
''')
        if VFFSL(SL,"varExists",False)('$datalist'): # generated from line 25, col 5
            if len(VFFSL(SL,"datalist",True))>0: # generated from line 26, col 9
                write('''            <form action=rfsTaskWaresSave>
''')
            write('''                <table>
                    <thead>
                        <tr>
                            <th>\xc4\xe0\xf2\xe0</th>
                            <th>\xca\xee\xeb-\xe2\xee</th>
                            <th><select name=wuid>
''')
            if VFFSL(SL,"VWUID",True): # generated from line 35, col 35
                write('''                                    <option value=''')
                _v = VFFSL(SL,"VWUID",True) # '$VWUID' on line 36, col 51
                if _v is not None: write(_filter(_v, rawExpr='$VWUID')) # from line 36, col 51.
                write('''>''')
                _v = VFFSL(SL,"VWUCODE",True) # '$VWUCODE' on line 36, col 58
                if _v is not None: write(_filter(_v, rawExpr='$VWUCODE')) # from line 36, col 58.
                write('''</option>
''')
            write('''                                    <option value=''')
            _v = VFFSL(SL,"MWUID",True) # '$MWUID' on line 38, col 51
            if _v is not None: write(_filter(_v, rawExpr='$MWUID')) # from line 38, col 51.
            write('''>''')
            _v = VFFSL(SL,"MWUCODE",True) # '$MWUCODE' on line 38, col 58
            if _v is not None: write(_filter(_v, rawExpr='$MWUCODE')) # from line 38, col 58.
            write('''</option>
                                </select>
                            </th>
                        <tr>
                    </thead>
                    <tbody>
''')
            for item in VFFSL(SL,"datalist",True): # generated from line 44, col 21
                write('''                        <tr>                    
                            <td>''')
                _orig_filter_53777501 = _filter
                filterName = 'DateFilter2'
                if self._CHEETAH__filters.has_key("DateFilter2"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.productdate",True) # '$item.productdate' on line 46, col 52
                if _v is not None: write(_filter(_v, rawExpr='$item.productdate')) # from line 46, col 52.
                _filter = _orig_filter_53777501
                write('''</td>
                            <td>''')
                _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.AMOUNT",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($item.AMOUNT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 47, col 33
                if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.AMOUNT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 47, col 33.
                write('''(<b><u>''')
                _orig_filter_24714927 = _filter
                filterName = 'Quantity'
                if self._CHEETAH__filters.has_key("Quantity"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.AMOUNT",True) # '$item.AMOUNT' on line 47, col 123
                if _v is not None: write(_filter(_v, rawExpr='$item.AMOUNT')) # from line 47, col 123.
                _filter = _orig_filter_24714927
                write('''</u></b>)</td>
''')
                if VFFSL(SL,"item.WLNUMBER",True): # generated from line 48, col 29
                    write('''                                <td><input name=wl''')
                    _v = VFFSL(SL,"item.WLOTID",True) # '$item.WLOTID' on line 49, col 51
                    if _v is not None: write(_filter(_v, rawExpr='$item.WLOTID')) # from line 49, col 51.
                    write(''' id=":scan:float" type=text size=6 title="''')
                    _v = VFN(VFFSL(SL,"item.WLNUMBER",True),"replace",False)('"',"'") # '$item.WLNUMBER.replace(\'"\',"\'")' on line 49, col 105
                    if _v is not None: write(_filter(_v, rawExpr='$item.WLNUMBER.replace(\'"\',"\'")')) # from line 49, col 105.
                    write('''" value=0></td>
''')
                else: # generated from line 50, col 29
                    write('''                                <td><input name=wl''')
                    _v = VFFSL(SL,"item.WLOTID",True) # '$item.WLOTID' on line 51, col 51
                    if _v is not None: write(_filter(_v, rawExpr='$item.WLOTID')) # from line 51, col 51.
                    write(''' id=":scan:float" type=text size=6 value=0></td>
''')
                write('''                        </tr>
''')
            write('''                    </tbody>
                </table>
                <br>
''')
            if len(VFFSL(SL,"datalist",True))>0: # generated from line 58, col 9
                write('''                <input type=hidden name=tid value=''')
                _v = VFFSL(SL,"TID",True) # '$TID' on line 59, col 51
                if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 59, col 51.
                write('''>
                <input type=hidden name=wid value=''')
                _v = VFFSL(SL,"WID",True) # '$WID' on line 60, col 51
                if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 60, col 51.
                write('''>
                <input type=hidden name=ctm value="''')
                _v = VFFSL(SL,"ctm",True) # '$ctm' on line 61, col 52
                if _v is not None: write(_filter(_v, rawExpr='$ctm')) # from line 61, col 52.
                write('''">
                \xd8\xca: <input type="text" id=":scan:text" name="barcode" value="" title="\xcc\xce">
                <button type=submit value=Ok />
            </form>                
''')
        write('''    
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskWares= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskWares, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskWares, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskWares)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskWares()).run()


