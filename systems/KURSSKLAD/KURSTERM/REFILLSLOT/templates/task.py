#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main
from systems.KURSSKLAD.cheetahutils import viewQuantity
from systems.KURSSKLAD.cheetahutils import coalesceValue

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336170.023
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:50 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\REFILLSLOT\\templates\\task.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class task(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 7, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write("""    <form action='rfsTask'>
        <input type=hidden name=id value=""")
        _v = VFFSL(SL,"TID",True) # '$TID' on line 9, col 42
        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 9, col 42.
        write('''>
        \xd8\xca: <input type=text name=barcode id=\':scan\' title="''')
        if False:
            _('Wares')
        _v = VFFSL(SL,"_",False)('Wares') # "$_('Wares')" on line 10, col 61
        if _v is not None: write(_filter(_v, rawExpr="$_('Wares')")) # from line 10, col 61.
        write('''">
    </form>
    
    <br><b><u>''')
        _v = VFFSL(SL,"sitename",True) # '$sitename' on line 13, col 15
        if _v is not None: write(_filter(_v, rawExpr='$sitename')) # from line 13, col 15.
        write('''</u></b><br><br>

''')
        flagEnd = True
        if VFFSL(SL,"varExists",False)('$datalist'): # generated from line 16, col 5
            write('''        <table>
            <thead>
                <tr>
                    <th>''')
            if False:
                _('Wares')
            _v = VFFSL(SL,"_",False)('Wares') # "$_('Wares')" on line 20, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('Wares')")) # from line 20, col 25.
            write('''</th>
                    <th>''')
            if False:
                _('Count')
            _v = VFFSL(SL,"_",False)('Count') # "$_('Count')" on line 21, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('Count')")) # from line 21, col 25.
            write('''</th>
                    <th>''')
            if False:
                _('Pallet')
            _v = VFFSL(SL,"_",False)('Pallet') # "$_('Pallet')" on line 22, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('Pallet')")) # from line 22, col 25.
            write('''</th>
                <tr>
            </thead>
            <tbody>
''')
            for item in VFFSL(SL,"datalist",True): # generated from line 26, col 13
                write('''                <tr>
''')
                if VFFSL(SL,"item.TWSTAT",True) == '2': # generated from line 28, col 19
                    write('''                    <td><a href="#" title="''')
                    _v = VFN(VFFSL(SL,"item.WNAME",True),"replace",False)('"',"'") # '$item.WNAME.replace(\'"\',"\'")' on line 29, col 44
                    if _v is not None: write(_filter(_v, rawExpr='$item.WNAME.replace(\'"\',"\'")')) # from line 29, col 44.
                    write('''">''')
                    _v = VFFSL(SL,"item.WCODE",True) # '$item.WCODE' on line 29, col 74
                    if _v is not None: write(_filter(_v, rawExpr='$item.WCODE')) # from line 29, col 74.
                    write('''</a></td>
                    <td>''')
                    _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.QNEED",True),VFFSL(SL,"item.VUFACTOR",True),VFFSL(SL,"item.VUCODE",True),VFFSL(SL,"item.MUFACTOR",True),VFFSL(SL,"item.MUCODE",True)) # '$viewQuantity($item.QNEED,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)' on line 30, col 25
                    if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.QNEED,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)')) # from line 30, col 25.
                    write('''(<b><u>''')
                    _orig_filter_58646055 = _filter
                    filterName = 'Quantity'
                    if self._CHEETAH__filters.has_key("Quantity"):
                        _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                    else:
                        _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                    _v = VFFSL(SL,"item.QNEED",True) # '$item.QNEED' on line 30, col 130
                    if _v is not None: write(_filter(_v, rawExpr='$item.QNEED')) # from line 30, col 130.
                    _filter = _orig_filter_58646055
                    write('''</u></b>)</td>
                    <td>=====</td>
''')
                else: # generated from line 32, col 19
                    flagEnd = False
                    write('''                    <td>
''')
                    if VFFSL(SL,"item.PID",True): # generated from line 35, col 23
                        write('''                        <a href="rfsTaskWares?tid=''')
                        _v = VFFSL(SL,"TID",True) # '$TID' on line 36, col 51
                        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 36, col 51.
                        write('''&wid=''')
                        _v = VFFSL(SL,"item.WID",True) # '$item.WID' on line 36, col 60
                        if _v is not None: write(_filter(_v, rawExpr='$item.WID')) # from line 36, col 60.
                        write('''" title="''')
                        _v = VFN(VFFSL(SL,"item.WNAME",True),"replace",False)('"',"'") # '$item.WNAME.replace(\'"\',"\'")' on line 36, col 78
                        if _v is not None: write(_filter(_v, rawExpr='$item.WNAME.replace(\'"\',"\'")')) # from line 36, col 78.
                        write('''">''')
                        _v = VFFSL(SL,"item.WCODE",True) # '$item.WCODE' on line 36, col 108
                        if _v is not None: write(_filter(_v, rawExpr='$item.WCODE')) # from line 36, col 108.
                        write('''</a>
''')
                    else: # generated from line 37, col 23
                        write('''                        <a href="rfsTaskWaresPallet?tid=''')
                        _v = VFFSL(SL,"TID",True) # '$TID' on line 38, col 57
                        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 38, col 57.
                        write('''&wid=''')
                        _v = VFFSL(SL,"item.WID",True) # '$item.WID' on line 38, col 66
                        if _v is not None: write(_filter(_v, rawExpr='$item.WID')) # from line 38, col 66.
                        write('''" title="''')
                        _v = VFN(VFFSL(SL,"item.WNAME",True),"replace",False)('"',"'") # '$item.WNAME.replace(\'"\',"\'")' on line 38, col 84
                        if _v is not None: write(_filter(_v, rawExpr='$item.WNAME.replace(\'"\',"\'")')) # from line 38, col 84.
                        write('''">''')
                        _v = VFFSL(SL,"item.WCODE",True) # '$item.WCODE' on line 38, col 114
                        if _v is not None: write(_filter(_v, rawExpr='$item.WCODE')) # from line 38, col 114.
                        write('''</a>
''')
                    write('''                    </td>
                    <td>''')
                    _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.QNEED",True),VFFSL(SL,"item.VUFACTOR",True),VFFSL(SL,"item.VUCODE",True),VFFSL(SL,"item.MUFACTOR",True),VFFSL(SL,"item.MUCODE",True)) # '$viewQuantity($item.QNEED,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)' on line 41, col 25
                    if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.QNEED,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)')) # from line 41, col 25.
                    write('''(<b><u>''')
                    _orig_filter_55980435 = _filter
                    filterName = 'Quantity'
                    if self._CHEETAH__filters.has_key("Quantity"):
                        _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                    else:
                        _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                    _v = VFFSL(SL,"item.QNEED",True) # '$item.QNEED' on line 41, col 130
                    if _v is not None: write(_filter(_v, rawExpr='$item.QNEED')) # from line 41, col 130.
                    _filter = _orig_filter_55980435
                    write('''</u></b>)</td>
                    <td>
''')
                    if VFFSL(SL,"item.PID",True): # generated from line 43, col 23
                        write('''                        <a href="rfsTaskWaresPallet?tid=''')
                        _v = VFFSL(SL,"TID",True) # '$TID' on line 44, col 57
                        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 44, col 57.
                        write('''&wid=''')
                        _v = VFFSL(SL,"item.WID",True) # '$item.WID' on line 44, col 66
                        if _v is not None: write(_filter(_v, rawExpr='$item.WID')) # from line 44, col 66.
                        write('''" title="''')
                        _v = VFN(VFFSL(SL,"item.PSNAME",True),"replace",False)('"',"'") # '$item.PSNAME.replace(\'"\',"\'")' on line 44, col 84
                        if _v is not None: write(_filter(_v, rawExpr='$item.PSNAME.replace(\'"\',"\'")')) # from line 44, col 84.
                        write('''">''')
                        _v = VFFSL(SL,"coalesceValue",False)(VFFSL(SL,"item.PNUM",True),VFFSL(SL,"item.PSNAME",True)) # '$coalesceValue($item.PNUM,$item.PSNAME)' on line 44, col 115
                        if _v is not None: write(_filter(_v, rawExpr='$coalesceValue($item.PNUM,$item.PSNAME)')) # from line 44, col 115.
                        write('''</a>
''')
                    else: # generated from line 45, col 23
                        write('''                        ''')
                        _v = VFFSL(SL,"coalesceValue",False)(VFFSL(SL,"item.PNUM",True)) # '$coalesceValue($item.PNUM)' on line 46, col 25
                        if _v is not None: write(_filter(_v, rawExpr='$coalesceValue($item.PNUM)')) # from line 46, col 25.
                        write('''
''')
                    write('''                    </td>
''')
                write('''                </tr>
''')
            write('''            </tbody>
        </table>
''')
        write('''
''')
        if VFFSL(SL,"flagEnd",True): # generated from line 56, col 5
            write('''        <a href="rfsTaskEnd?id=''')
            _v = VFFSL(SL,"tid",True) # '$tid' on line 57, col 32
            if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 57, col 32.
            write('''">\xc7\xe0\xe2\xe5\xf0\xf8\xe8\xf2\xfc \xe7\xe0\xe4\xe0\xed\xe8\xe5</a>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''


''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_task= 'writeBody'

## END CLASS DEFINITION

if not hasattr(task, '_initCheetahAttributes'):
    templateAPIClass = getattr(task, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(task)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=task()).run()


