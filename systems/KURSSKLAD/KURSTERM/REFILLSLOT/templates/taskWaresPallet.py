#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.cheetahutils import coalesceValue
from systems.KURSSKLAD.cheetahutils import viewQuantity
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336170.109
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:50 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\REFILLSLOT\\templates\\taskWaresPallet.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskWaresPallet(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData     at line 6, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''    <b>''')
        _v = VFFSL(SL,"SITENAME",True) # '$SITENAME' on line 7, col 8
        if _v is not None: write(_filter(_v, rawExpr='$SITENAME')) # from line 7, col 8.
        write('''</b><br>
    <b><u>(''')
        _v = VFFSL(SL,"WCODE",True) # '$WCODE' on line 8, col 12
        if _v is not None: write(_filter(_v, rawExpr='$WCODE')) # from line 8, col 12.
        write(''')</u></b>''')
        _v = VFFSL(SL,"WNAME",True) # '$WNAME' on line 8, col 27
        if _v is not None: write(_filter(_v, rawExpr='$WNAME')) # from line 8, col 27.
        write('''<br>
''')
        if VFFSL(SL,"VWUCODE",True): # generated from line 9, col 5
            write('''        <b>''')
            _orig_filter_98219558 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"MWUFACTOR",True) # '$MWUFACTOR' on line 10, col 28
            if _v is not None: write(_filter(_v, rawExpr='$MWUFACTOR')) # from line 10, col 28.
            _filter = _orig_filter_98219558
            write(''' ''')
            _v = VFFSL(SL,"VWUCODE",True) # '$VWUCODE' on line 10, col 51
            if _v is not None: write(_filter(_v, rawExpr='$VWUCODE')) # from line 10, col 51.
            write(''' = ''')
            _orig_filter_62753781 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"VWUFACTOR",True) # '$VWUFACTOR' on line 10, col 78
            if _v is not None: write(_filter(_v, rawExpr='$VWUFACTOR')) # from line 10, col 78.
            _filter = _orig_filter_62753781
            write(''' ''')
            _v = VFFSL(SL,"MWUCODE",True) # '$MWUCODE' on line 10, col 101
            if _v is not None: write(_filter(_v, rawExpr='$MWUCODE')) # from line 10, col 101.
            write('''</b><br>
''')
        write('''    <hr>
    ''')
        if False:
            _('Вм-сть')
        _v = VFFSL(SL,"_",False)('Вм-сть') # "$_('\xc2\xec-\xf1\xf2\xfc')" on line 13, col 5
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc2\xec-\xf1\xf2\xfc')")) # from line 13, col 5.
        write(''': <font class="green">''')
        _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"QCONTENT",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($QCONTENT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 13, col 39
        if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($QCONTENT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 13, col 39.
        write('''(<b><u>''')
        _orig_filter_57968756 = _filter
        filterName = 'Quantity'
        if self._CHEETAH__filters.has_key("Quantity"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"QSLOT",True) # '$QSLOT' on line 13, col 126
        if _v is not None: write(_filter(_v, rawExpr='$QSLOT')) # from line 13, col 126.
        _filter = _orig_filter_57968756
        write('''</u></b>)</font><br>
    ''')
        if False:
            _('На МО')
        _v = VFFSL(SL,"_",False)('На МО') # "$_('\xcd\xe0 \xcc\xce')" on line 14, col 5
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xe0 \xcc\xce')")) # from line 14, col 5.
        write(''': <font class="green">''')
        _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"QSLOT",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($QSLOT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 14, col 38
        if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($QSLOT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 14, col 38.
        write('''(<b><u>''')
        _orig_filter_43451754 = _filter
        filterName = 'Quantity'
        if self._CHEETAH__filters.has_key("Quantity"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"QSLOT",True) # '$QSLOT' on line 14, col 122
        if _v is not None: write(_filter(_v, rawExpr='$QSLOT')) # from line 14, col 122.
        _filter = _orig_filter_43451754
        write('''</u></b>)</font><br>
    ''')
        if False:
            _('Заказ')
        _v = VFFSL(SL,"_",False)('Заказ') # "$_('\xc7\xe0\xea\xe0\xe7')" on line 15, col 5
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc7\xe0\xea\xe0\xe7')")) # from line 15, col 5.
        write(''': <font class="yellow">''')
        _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"QNEED",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($QNEED,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 15, col 39
        if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($QNEED,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 15, col 39.
        write('''(<b><u>''')
        _orig_filter_55860482 = _filter
        filterName = 'Quantity'
        if self._CHEETAH__filters.has_key("Quantity"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"QNEED",True) # '$QNEED' on line 15, col 123
        if _v is not None: write(_filter(_v, rawExpr='$QNEED')) # from line 15, col 123.
        _filter = _orig_filter_55860482
        write('''</u></b>)</font><br>
    <br>
''')
        if VFFSL(SL,"QREFILL",True) > 0.0001: # generated from line 17, col 5
            write('''        ''')
            if False:
                _('Пополнить')
            _v = VFFSL(SL,"_",False)('Пополнить') # "$_('\xcf\xee\xef\xee\xeb\xed\xe8\xf2\xfc')" on line 18, col 9
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xee\xef\xee\xeb\xed\xe8\xf2\xfc')")) # from line 18, col 9.
            write(''': <font class="red">''')
            _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"QREFILL",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($QREFILL,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 18, col 44
            if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($QREFILL,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 18, col 44.
            write('''(<b><u>''')
            _orig_filter_24314157 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"QREFILL",True) # '$QREFILL' on line 18, col 130
            if _v is not None: write(_filter(_v, rawExpr='$QREFILL')) # from line 18, col 130.
            _filter = _orig_filter_24314157
            write('''</u></b>)</font>
''')
        else: # generated from line 19, col 5
            write('''        <a href="rfsTaskEnd?id=''')
            _v = VFFSL(SL,"tid",True) # '$tid' on line 20, col 32
            if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 20, col 32.
            write('''" title="\xc7\xe0\xe2\xe5\xf0\xf8\xe0\xe5\xf2 \xef\xee\xef\xee\xeb\xed\xe5\xed\xe8\xe5 \xef\xee\xe7\xe8\xf6\xe8\xe8">\xc7\xe0\xe2\xe5\xf0\xf8\xe8\xf2\xfc</a>
''')
        if VFFSL(SL,"varExists",False)('$pid'): # generated from line 22, col 5
            write('''        <br>
''')
            if VFFSL(SL,"pnum",True): # generated from line 24, col 9
                write('''            ''')
                _v = VFFSL(SL,"pnum",True) # '$pnum' on line 25, col 13
                if _v is not None: write(_filter(_v, rawExpr='$pnum')) # from line 25, col 13.
                write(''' (''')
                _v = VFFSL(SL,"psname",True) # '$psname' on line 25, col 20
                if _v is not None: write(_filter(_v, rawExpr='$psname')) # from line 25, col 20.
                write(''')
''')
            else: # generated from line 26, col 9
                write('''            ''')
                _v = VFFSL(SL,"psname",True) # '$psname' on line 27, col 13
                if _v is not None: write(_filter(_v, rawExpr='$psname')) # from line 27, col 13.
                write('''
''')
        write('''        
''')
        if VFFSL(SL,"varExists",False)('$datalist'): # generated from line 31, col 5
            write('''        <br>
        <a href="rfsTaskWaresAside?tid=''')
            _v = VFFSL(SL,"tid",True) # '$tid' on line 33, col 40
            if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 33, col 40.
            write('''&wid=''')
            _v = VFFSL(SL,"wid",True) # '$wid' on line 33, col 49
            if _v is not None: write(_filter(_v, rawExpr='$wid')) # from line 33, col 49.
            write('''" title="\xce\xf2\xea\xeb\xe0\xe4\xfb\xe2\xe0\xe5\xf2 \xe2\xfb\xef\xee\xeb\xed\xe5\xed\xe8\xe5 \xfd\xf2\xee\xe3\xee \xe7\xe0\xe4\xe0\xed\xe8\xff">\xce\xf2\xeb\xee\xe6\xe8\xf2\xfc</a>
''')
            if VFFSL(SL,"QREFILL",True) > 0.00001 and (not VFFSL(SL,"datalist",True) or len(VFFSL(SL,"datalist",True))==0): # generated from line 34, col 9
                write('''            <a href="rfsTaskWaresCancel?tid=''')
                _v = VFFSL(SL,"tid",True) # '$tid' on line 35, col 45
                if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 35, col 45.
                write('''&wid=''')
                _v = VFFSL(SL,"wid",True) # '$wid' on line 35, col 54
                if _v is not None: write(_filter(_v, rawExpr='$wid')) # from line 35, col 54.
                write('''" title="\xce\xf2\xec\xe5\xed\xff\xe5\xf2 \xef\xee\xef\xee\xeb\xed\xe5\xed\xe8\xe5 \xef\xee\xe7\xe8\xf6\xe8\xe8">\xce\xf2\xec\xe5\xed\xe8\xf2\xfc</a>
''')
            if VFFSL(SL,"flags",True) == 'A': # generated from line 37, col 9
                write('''            <a href="rfsTaskWaresPallet?tid=''')
                _v = VFFSL(SL,"tid",True) # '$tid' on line 38, col 45
                if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 38, col 45.
                write('''&wid=''')
                _v = VFFSL(SL,"wid",True) # '$wid' on line 38, col 54
                if _v is not None: write(_filter(_v, rawExpr='$wid')) # from line 38, col 54.
                write('''&flags=O" title="\xd1\xe0\xec\xfb\xe5 \xef\xee\xe4\xf5\xee\xe4\xff\xf9\xe8\xe5 \xef\xe0\xeb\xeb\xe5\xf2\xfb">\xcf\xee\xe4\xf5\xee\xe4\xff\xf9\xe8\xe5</a>
''')
            write('''        <hr>
        
''')
            pid = 0
            for item in VFFSL(SL,"datalist",True): # generated from line 43, col 7
                write('''        <tr>
''')
                if VFFSL(SL,"item.PCANEDIT",True) == '1': # generated from line 45, col 11
                    write('''            <a href="rfsTaskWaresPallet?tid=''')
                    _v = VFFSL(SL,"tid",True) # '$tid' on line 46, col 45
                    if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 46, col 45.
                    write('''&wid=''')
                    _v = VFFSL(SL,"wid",True) # '$wid' on line 46, col 54
                    if _v is not None: write(_filter(_v, rawExpr='$wid')) # from line 46, col 54.
                    write('''&pid=''')
                    _v = VFFSL(SL,"item.pid",True) # '$item.pid' on line 46, col 63
                    if _v is not None: write(_filter(_v, rawExpr='$item.pid')) # from line 46, col 63.
                    write('''" title="''')
                    _v = VFFSL(SL,"item.SNAME",True) # '$item.SNAME' on line 46, col 81
                    if _v is not None: write(_filter(_v, rawExpr='$item.SNAME')) # from line 46, col 81.
                    write('''">''')
                    _v = VFFSL(SL,"item.PNUM",True) # '$item.PNUM' on line 46, col 94
                    if _v is not None: write(_filter(_v, rawExpr='$item.PNUM')) # from line 46, col 94.
                    write('''</a><br>
            ''')
                    _orig_filter_32326785 = _filter
                    filterName = 'DateFilter2'
                    if self._CHEETAH__filters.has_key("DateFilter2"):
                        _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                    else:
                        _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                    _v = VFFSL(SL,"item.PRODUCTDATE",True) # '$item.PRODUCTDATE' on line 47, col 32
                    if _v is not None: write(_filter(_v, rawExpr='$item.PRODUCTDATE')) # from line 47, col 32.
                    _filter = _orig_filter_32326785
                    write('''
            =
            ''')
                    _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.AMOUNT",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($item.AMOUNT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 49, col 13
                    if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.AMOUNT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 49, col 13.
                    write('''(<b><u>''')
                    _orig_filter_29446782 = _filter
                    filterName = 'Quantity'
                    if self._CHEETAH__filters.has_key("Quantity"):
                        _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                    else:
                        _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                    _v = VFFSL(SL,"item.AMOUNT",True) # '$item.AMOUNT' on line 49, col 103
                    if _v is not None: write(_filter(_v, rawExpr='$item.AMOUNT')) # from line 49, col 103.
                    _filter = _orig_filter_29446782
                    write('''</u></b>)
            <br>
''')
                else: # generated from line 51, col 11
                    write('''            <a href="#" title="''')
                    _v = VFFSL(SL,"item.SNAME",True) # '$item.SNAME' on line 52, col 32
                    if _v is not None: write(_filter(_v, rawExpr='$item.SNAME')) # from line 52, col 32.
                    write('''">''')
                    _v = VFFSL(SL,"item.PNUM",True) # '$item.PNUM' on line 52, col 45
                    if _v is not None: write(_filter(_v, rawExpr='$item.PNUM')) # from line 52, col 45.
                    write('''</a><br>
            <font class="red">''')
                    _orig_filter_58548334 = _filter
                    filterName = 'DateFilter2'
                    if self._CHEETAH__filters.has_key("DateFilter2"):
                        _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                    else:
                        _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                    _v = VFFSL(SL,"item.PRODUCTDATE",True) # '$item.PRODUCTDATE' on line 53, col 50
                    if _v is not None: write(_filter(_v, rawExpr='$item.PRODUCTDATE')) # from line 53, col 50.
                    _filter = _orig_filter_58548334
                    write('''
            =
            ''')
                    _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.AMOUNT",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($item.AMOUNT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 55, col 13
                    if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.AMOUNT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 55, col 13.
                    write('''(<b><u>''')
                    _orig_filter_94572962 = _filter
                    filterName = 'Quantity'
                    if self._CHEETAH__filters.has_key("Quantity"):
                        _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                    else:
                        _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                    _v = VFFSL(SL,"item.AMOUNT",True) # '$item.AMOUNT' on line 55, col 103
                    if _v is not None: write(_filter(_v, rawExpr='$item.AMOUNT')) # from line 55, col 103.
                    _filter = _orig_filter_94572962
                    write('''</u></b>)</font>
            <br>
''')
                pid = VFFSL(SL,"item.pid",True)
            write('''      <hr>
''')
            if VFFSL(SL,"flags",True) == 'O': # generated from line 61, col 7
                write('''        <a href="rfsTaskWaresPallet?tid=''')
                _v = VFFSL(SL,"tid",True) # '$tid' on line 62, col 41
                if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 62, col 41.
                write('''&wid=''')
                _v = VFFSL(SL,"wid",True) # '$wid' on line 62, col 50
                if _v is not None: write(_filter(_v, rawExpr='$wid')) # from line 62, col 50.
                write('''&flags=A">\xcf\xee\xea\xe0\xe7\xe0\xf2\xfc \xe2\xf1\xe5 \xef\xe0\xeb\xeb\xe5\xf2\xfb</a>
''')
        write('''    
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskWaresPallet= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskWaresPallet, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskWaresPallet, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskWaresPallet)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskWaresPallet()).run()


