#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.cheetahutils import viewQuantity
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336168.5439999
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:48 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\DOCFREESELECT\\templates\\taskWaresEdit.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskWaresEdit(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 5, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
   ''')
        if False:
            _('От')
        _v = VFFSL(SL,"_",False)('От') # "$_('\xce\xf2')" on line 7, col 4
        if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xf2')")) # from line 7, col 4.
        write(''': <b><u>''')
        _v = VFFSL(SL,"FROMNAME",True) # '$FROMNAME' on line 7, col 20
        if _v is not None: write(_filter(_v, rawExpr='$FROMNAME')) # from line 7, col 20.
        write('''</u></b><br>
''')
        if VFFSL(SL,"varExists",False)('$THROUGHNAME') and VFFSL(SL,"THROUGHNAME",True): # generated from line 8, col 4
            write('''    ''')
            if False:
                _('Через')
            _v = VFFSL(SL,"_",False)('Через') # "$_('\xd7\xe5\xf0\xe5\xe7')" on line 9, col 5
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd7\xe5\xf0\xe5\xe7')")) # from line 9, col 5.
            write(''': <b>''')
            _v = VFFSL(SL,"THROUGHNAME",True) # '$THROUGHNAME' on line 9, col 21
            if _v is not None: write(_filter(_v, rawExpr='$THROUGHNAME')) # from line 9, col 21.
            write('''</b><br>
''')
        if VFFSL(SL,"TONAME",True): # generated from line 11, col 4
            write('''    ''')
            if False:
                _('Кому')
            _v = VFFSL(SL,"_",False)('Кому') # "$_('\xca\xee\xec\xf3')" on line 12, col 5
            if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xee\xec\xf3')")) # from line 12, col 5.
            write(''': ''')
            _v = VFFSL(SL,"TONAME",True) # '$TONAME' on line 12, col 17
            if _v is not None: write(_filter(_v, rawExpr='$TONAME')) # from line 12, col 17.
            write('''<br>
''')
        write('''    <b>''')
        _orig_filter_63817806 = _filter
        filterName = 'DateFilter'
        if self._CHEETAH__filters.has_key("DateFilter"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"DOCDATE",True) # '$DOCDATE' on line 14, col 26
        if _v is not None: write(_filter(_v, rawExpr='$DOCDATE')) # from line 14, col 26.
        _filter = _orig_filter_63817806
        write('''</b> \xb9<b>''')
        _v = VFFSL(SL,"DOCNUM",True) # '$DOCNUM' on line 14, col 55
        if _v is not None: write(_filter(_v, rawExpr='$DOCNUM')) # from line 14, col 55.
        write('''</b>
''')
        if VFFSL(SL,"varExists",False)('$ALGORITHM') and VFFSL(SL,"ALGORITHM",True): # generated from line 15, col 2
            write('''\t\t<u>(''')
            _v = VFFSL(SL,"ALGORITHM",True) # '$ALGORITHM' on line 16, col 7
            if _v is not None: write(_filter(_v, rawExpr='$ALGORITHM')) # from line 16, col 7.
            write(''')</u>
''')
        write('''\t<br>
    <b>(<u>''')
        _v = VFFSL(SL,"WCODE",True) # '$WCODE' on line 19, col 12
        if _v is not None: write(_filter(_v, rawExpr='$WCODE')) # from line 19, col 12.
        write('''</u>)</b> ''')
        _v = VFFSL(SL,"WNAME",True) # '$WNAME' on line 19, col 28
        if _v is not None: write(_filter(_v, rawExpr='$WNAME')) # from line 19, col 28.
        write(''' <br>
''')
        if VFFSL(SL,"VWUID",True): # generated from line 20, col 5
            write('''        <b>''')
            _v = VFFSL(SL,"VWUCODE",True) # '$VWUCODE' on line 21, col 12
            if _v is not None: write(_filter(_v, rawExpr='$VWUCODE')) # from line 21, col 12.
            write(''' = ''')
            _orig_filter_54640412 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"VWUFACTOR",True) # '$VWUFACTOR' on line 21, col 39
            if _v is not None: write(_filter(_v, rawExpr='$VWUFACTOR')) # from line 21, col 39.
            _filter = _orig_filter_54640412
            write(''' ''')
            _v = VFFSL(SL,"MWUCODE",True) # '$MWUCODE' on line 21, col 62
            if _v is not None: write(_filter(_v, rawExpr='$MWUCODE')) # from line 21, col 62.
            write(''' </b>
''')
        write('''    <br>
''')
        if VFFSL(SL,"varExists",False)('$qdoc'): # generated from line 24, col 5
            write('''        ''')
            if False:
                _('План')
            _v = VFFSL(SL,"_",False)('План') # "$_('\xcf\xeb\xe0\xed')" on line 25, col 9
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xeb\xe0\xed')")) # from line 25, col 9.
            write(''': ''')
            _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"qdoc",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($qdoc,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 25, col 21
            if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($qdoc,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 25, col 21.
            write(''' <b>(<u>''')
            _orig_filter_51943684 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"qdoc",True) # '$qdoc' on line 25, col 105
            if _v is not None: write(_filter(_v, rawExpr='$qdoc')) # from line 25, col 105.
            _filter = _orig_filter_51943684
            write('''</u>)</b>
        <br>
''')
        if VFFSL(SL,"varExists",False)('$qfact') and VFFSL(SL,"qfact",True): # generated from line 28, col 5
            write('''        ''')
            if False:
                _('Факт')
            _v = VFFSL(SL,"_",False)('Факт') # "$_('\xd4\xe0\xea\xf2')" on line 29, col 9
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd4\xe0\xea\xf2')")) # from line 29, col 9.
            write(''': ''')
            _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"qfact",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($qfact,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 29, col 21
            if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($qfact,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 29, col 21.
            write(''' <b>(<u>''')
            _orig_filter_64620059 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"qfact",True) # '$qfact' on line 29, col 106
            if _v is not None: write(_filter(_v, rawExpr='$qfact')) # from line 29, col 106.
            _filter = _orig_filter_64620059
            write('''</u>)</b>
        <br>
''')
        write('''        
    <hr>
''')
        if VFFSL(SL,"varExists",False)('$datalist') and VFFSL(SL,"datalist",True): # generated from line 34, col 5
            write('''        <table>
            <thead>
                <tr>
                    <th>''')
            if False:
                _('Дата')
            _v = VFFSL(SL,"_",False)('Дата') # "$_('\xc4\xe0\xf2\xe0')" on line 38, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xe0\xf2\xe0')")) # from line 38, col 25.
            write('''</th>
                    <th>''')
            if False:
                _('Поддон')
            _v = VFFSL(SL,"_",False)('Поддон') # "$_('\xcf\xee\xe4\xe4\xee\xed')" on line 39, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xee\xe4\xe4\xee\xed')")) # from line 39, col 25.
            write('''</th>
                    <th>''')
            if False:
                _('Кол-во')
            _v = VFFSL(SL,"_",False)('Кол-во') # "$_('\xca\xee\xeb-\xe2\xee')" on line 40, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xee\xeb-\xe2\xee')")) # from line 40, col 25.
            write('''</th>
                </tr>
            </thead>
''')
            q = 0
            write('''            <tbody>
''')
            for item in VFFSL(SL,"datalist",True): # generated from line 45, col 13
                q += VFFSL(SL,"item.AMOUNT",True)
                write('''                <tr>
                    <td>''')
                _orig_filter_17313730 = _filter
                filterName = 'DateFilter2'
                if self._CHEETAH__filters.has_key("DateFilter2"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.PRDATE",True) # '$item.PRDATE' on line 48, col 44
                if _v is not None: write(_filter(_v, rawExpr='$item.PRDATE')) # from line 48, col 44.
                _filter = _orig_filter_17313730
                write('''</td>
                    <td>
''')
                if VFFSL(SL,"item.PNUM",True): # generated from line 50, col 21
                    write('''                        <a title="''')
                    _v = VFFSL(SL,"item.sname",True) # '$item.sname' on line 51, col 35
                    if _v is not None: write(_filter(_v, rawExpr='$item.sname')) # from line 51, col 35.
                    write('''" href="javascript: if (confirm(\'''')
                    if False:
                        _('Вы действительно хотите отменить выбранный пункт отборки?')
                    _v = VFFSL(SL,"_",False)('Вы действительно хотите отменить выбранный пункт отборки?') # "$_('\xc2\xfb \xe4\xe5\xe9\xf1\xf2\xe2\xe8\xf2\xe5\xeb\xfc\xed\xee \xf5\xee\xf2\xe8\xf2\xe5 \xee\xf2\xec\xe5\xed\xe8\xf2\xfc \xe2\xfb\xe1\xf0\xe0\xed\xed\xfb\xe9 \xef\xf3\xed\xea\xf2 \xee\xf2\xe1\xee\xf0\xea\xe8?')" on line 51, col 79
                    if _v is not None: write(_filter(_v, rawExpr="$_('\xc2\xfb \xe4\xe5\xe9\xf1\xf2\xe2\xe8\xf2\xe5\xeb\xfc\xed\xee \xf5\xee\xf2\xe8\xf2\xe5 \xee\xf2\xec\xe5\xed\xe8\xf2\xfc \xe2\xfb\xe1\xf0\xe0\xed\xed\xfb\xe9 \xef\xf3\xed\xea\xf2 \xee\xf2\xe1\xee\xf0\xea\xe8?')")) # from line 51, col 79.
                    write("""')) location.href='dfsTaskWaresPalletCanc?tid=""")
                    _v = VFFSL(SL,"tid",True) # '$tid' on line 51, col 188
                    if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 51, col 188.
                    write('''&wid=''')
                    _v = VFFSL(SL,"wid",True) # '$wid' on line 51, col 197
                    if _v is not None: write(_filter(_v, rawExpr='$wid')) # from line 51, col 197.
                    write('''&pid=''')
                    _v = VFFSL(SL,"item.PID",True) # '$item.PID' on line 51, col 206
                    if _v is not None: write(_filter(_v, rawExpr='$item.PID')) # from line 51, col 206.
                    write('''&wlid=''')
                    _v = VFFSL(SL,"item.WLID",True) # '$item.WLID' on line 51, col 221
                    if _v is not None: write(_filter(_v, rawExpr='$item.WLID')) # from line 51, col 221.
                    write('''\'">''')
                    _v = VFFSL(SL,"item.pnum",True) # '$item.pnum' on line 51, col 234
                    if _v is not None: write(_filter(_v, rawExpr='$item.pnum')) # from line 51, col 234.
                    write('''</a>
''')
                else: # generated from line 52, col 21
                    write('''                        <a href="javascript: if (confirm(\'''')
                    if False:
                        _('Вы действительно хотите отменить выбранный пункт отборки?')
                    _v = VFFSL(SL,"_",False)('Вы действительно хотите отменить выбранный пункт отборки?') # "$_('\xc2\xfb \xe4\xe5\xe9\xf1\xf2\xe2\xe8\xf2\xe5\xeb\xfc\xed\xee \xf5\xee\xf2\xe8\xf2\xe5 \xee\xf2\xec\xe5\xed\xe8\xf2\xfc \xe2\xfb\xe1\xf0\xe0\xed\xed\xfb\xe9 \xef\xf3\xed\xea\xf2 \xee\xf2\xe1\xee\xf0\xea\xe8?')" on line 53, col 59
                    if _v is not None: write(_filter(_v, rawExpr="$_('\xc2\xfb \xe4\xe5\xe9\xf1\xf2\xe2\xe8\xf2\xe5\xeb\xfc\xed\xee \xf5\xee\xf2\xe8\xf2\xe5 \xee\xf2\xec\xe5\xed\xe8\xf2\xfc \xe2\xfb\xe1\xf0\xe0\xed\xed\xfb\xe9 \xef\xf3\xed\xea\xf2 \xee\xf2\xe1\xee\xf0\xea\xe8?')")) # from line 53, col 59.
                    write("""')) location.href='dfsTaskWaresPalletCanc?tid=""")
                    _v = VFFSL(SL,"tid",True) # '$tid' on line 53, col 168
                    if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 53, col 168.
                    write('''&wid=''')
                    _v = VFFSL(SL,"wid",True) # '$wid' on line 53, col 177
                    if _v is not None: write(_filter(_v, rawExpr='$wid')) # from line 53, col 177.
                    write('''&pid=''')
                    _v = VFFSL(SL,"item.PID",True) # '$item.PID' on line 53, col 186
                    if _v is not None: write(_filter(_v, rawExpr='$item.PID')) # from line 53, col 186.
                    write('''&wlid=''')
                    _v = VFFSL(SL,"item.WLID",True) # '$item.WLID' on line 53, col 201
                    if _v is not None: write(_filter(_v, rawExpr='$item.WLID')) # from line 53, col 201.
                    write('''\'">''')
                    _v = VFFSL(SL,"item.sname",True) # '$item.sname' on line 53, col 214
                    if _v is not None: write(_filter(_v, rawExpr='$item.sname')) # from line 53, col 214.
                    write('''</a>
''')
                write('''                    </td>
                    <td>''')
                _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.AMOUNT",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($item.AMOUNT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 56, col 25
                if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.AMOUNT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 56, col 25.
                write(''' <b>(<u>''')
                _orig_filter_49565298 = _filter
                filterName = 'Quantity'
                if self._CHEETAH__filters.has_key("Quantity"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.amount",True) # '$item.amount' on line 56, col 116
                if _v is not None: write(_filter(_v, rawExpr='$item.amount')) # from line 56, col 116.
                _filter = _orig_filter_49565298
                write('''</u>)</b></td>
                </tr>
''')
            write('''            </tbody>
            <tfoot>
                <tr>
                    <th colspan=3>''')
            _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"q",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($q,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 62, col 35
            if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($q,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 62, col 35.
            write(''' <b><u>(''')
            _orig_filter_97027392 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"q",True) # '$q' on line 62, col 116
            if _v is not None: write(_filter(_v, rawExpr='$q')) # from line 62, col 116.
            _filter = _orig_filter_97027392
            write(''')</u></b></th>
                </tr>
            </tfoot>
        </table>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskWaresEdit= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskWaresEdit, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskWaresEdit, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskWaresEdit)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskWaresEdit()).run()


