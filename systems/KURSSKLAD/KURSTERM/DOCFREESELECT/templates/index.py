#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336168.4430001
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:48 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\DOCFREESELECT\\templates\\index.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class index(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData         at line 4, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        if VFFSL(SL,"varExists",False)('$datalist') and VFFSL(SL,"datalist",True): # generated from line 5, col 5
            for item in VFFSL(SL,"datalist",True): # generated from line 6, col 9
                if VFFSL(SL,"item.TSTAT",True) == '1': # generated from line 7, col 13
                    write('''                <font class="green"><b><u>''')
                    _v = VFFSL(SL,"item.FROMNAME",True) # '$item.FROMNAME' on line 8, col 43
                    if _v is not None: write(_filter(_v, rawExpr='$item.FROMNAME')) # from line 8, col 43.
                    write('''</u></b><br></font>
''')
                else: # generated from line 9, col 13
                    write('''                <b><u>''')
                    _v = VFFSL(SL,"item.FROMNAME",True) # '$item.FROMNAME' on line 10, col 23
                    if _v is not None: write(_filter(_v, rawExpr='$item.FROMNAME')) # from line 10, col 23.
                    write('''</u></b><br>
''')
                if VFFSL(SL,"item.THROUGHID",True): # generated from line 12, col 13
                    write('''                ''')
                    if False:
                        _('Через')
                    _v = VFFSL(SL,"_",False)('Через') # "$_('\xd7\xe5\xf0\xe5\xe7')" on line 13, col 17
                    if _v is not None: write(_filter(_v, rawExpr="$_('\xd7\xe5\xf0\xe5\xe7')")) # from line 13, col 17.
                    write(''': <b>''')
                    _v = VFFSL(SL,"item.THROUGHNAME",True) # '$item.THROUGHNAME' on line 13, col 33
                    if _v is not None: write(_filter(_v, rawExpr='$item.THROUGHNAME')) # from line 13, col 33.
                    write('''</b><br>
''')
                if VFFSL(SL,"item.TOID",True): # generated from line 15, col 13
                    write('''                ''')
                    if False:
                        _('Кому')
                    _v = VFFSL(SL,"_",False)('Кому') # "$_('\xca\xee\xec\xf3')" on line 16, col 17
                    if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xee\xec\xf3')")) # from line 16, col 17.
                    write(''': ''')
                    _v = VFFSL(SL,"item.TONAME",True) # '$item.TONAME' on line 16, col 29
                    if _v is not None: write(_filter(_v, rawExpr='$item.TONAME')) # from line 16, col 29.
                    write('''<br>
''')
                write("""            <a href='dfsTask?id=""")
                _v = VFFSL(SL,"item.TASKID",True) # '$item.TASKID' on line 18, col 33
                if _v is not None: write(_filter(_v, rawExpr='$item.TASKID')) # from line 18, col 33.
                write("""'>""")
                _orig_filter_24788288 = _filter
                filterName = 'DateFilter2'
                if self._CHEETAH__filters.has_key("DateFilter2"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.DOCDATE",True) # '$item.DOCDATE' on line 18, col 67
                if _v is not None: write(_filter(_v, rawExpr='$item.DOCDATE')) # from line 18, col 67.
                write(''' ''')
                _filter = _orig_filter_24788288
                write(''' ''')
                if False:
                    _('№')
                _v = VFFSL(SL,"_",False)('№') # "$_('\xb9')" on line 18, col 94
                if _v is not None: write(_filter(_v, rawExpr="$_('\xb9')")) # from line 18, col 94.
                write(''' ''')
                _v = VFFSL(SL,"item.DOCNUM",True) # '$item.DOCNUM' on line 18, col 102
                if _v is not None: write(_filter(_v, rawExpr='$item.DOCNUM')) # from line 18, col 102.
                write(''' </a>
            <br><br>
''')
        write('''  <hr>
''')
        if VFFSL(SL,"varExists",False)('$zd'): # generated from line 23, col 3
            for item in VFFSL(SL,"zd",True): # generated from line 24, col 5
                write('''        <a href="dfsChgZone?id=''')
                _v = VFFSL(SL,"item.ZONEID",True) # '$item.ZONEID' on line 25, col 32
                if _v is not None: write(_filter(_v, rawExpr='$item.ZONEID')) # from line 25, col 32.
                write('''">''')
                _v = VFFSL(SL,"item.ZONENAME",True) # '$item.ZONENAME' on line 25, col 46
                if _v is not None: write(_filter(_v, rawExpr='$item.ZONENAME')) # from line 25, col 46.
                write('''</a> - ''')
                _v = VFFSL(SL,"item.CNTDOCS",True) # '$item.CNTDOCS' on line 25, col 67
                if _v is not None: write(_filter(_v, rawExpr='$item.CNTDOCS')) # from line 25, col 67.
                write('''
''')
                if VFFSL(SL,"item.CNTDOCS2",True) and VFFSL(SL,"item.CNTDOCS2",True) > 0: # generated from line 26, col 9
                    write('''            <font class="green">(''')
                    _v = VFFSL(SL,"item.CNTDOCS2",True) # '$item.CNTDOCS2' on line 27, col 34
                    if _v is not None: write(_filter(_v, rawExpr='$item.CNTDOCS2')) # from line 27, col 34.
                    write(''')</font>
''')
                write('''        <br>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_index= 'writeBody'

## END CLASS DEFINITION

if not hasattr(index, '_initCheetahAttributes'):
    templateAPIClass = getattr(index, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(index)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=index()).run()


