#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.cheetahutils import viewQuantity
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336168.6300001
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:48 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\DOCFREESELECT\\templates\\taskWaresPallet.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskWaresPallet(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 5, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
   ''')
        if False:
            _('От')
        _v = VFFSL(SL,"_",False)('От') # "$_('\xce\xf2')" on line 7, col 4
        if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xf2')")) # from line 7, col 4.
        write(''': <b><u>''')
        _v = VFFSL(SL,"FROMNAME",True) # '$FROMNAME' on line 7, col 20
        if _v is not None: write(_filter(_v, rawExpr='$FROMNAME')) # from line 7, col 20.
        write('''</u></b><br>
''')
        if VFFSL(SL,"varExists",False)('$THROUGHNAME') and VFFSL(SL,"THROUGHNAME",True): # generated from line 8, col 4
            write('''    ''')
            if False:
                _('Через')
            _v = VFFSL(SL,"_",False)('Через') # "$_('\xd7\xe5\xf0\xe5\xe7')" on line 9, col 5
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd7\xe5\xf0\xe5\xe7')")) # from line 9, col 5.
            write(''': <b>''')
            _v = VFFSL(SL,"THROUGHNAME",True) # '$THROUGHNAME' on line 9, col 21
            if _v is not None: write(_filter(_v, rawExpr='$THROUGHNAME')) # from line 9, col 21.
            write('''</b><br>
''')
        if VFFSL(SL,"TONAME",True): # generated from line 11, col 4
            write('''    ''')
            if False:
                _('Кому')
            _v = VFFSL(SL,"_",False)('Кому') # "$_('\xca\xee\xec\xf3')" on line 12, col 5
            if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xee\xec\xf3')")) # from line 12, col 5.
            write(''': ''')
            _v = VFFSL(SL,"TONAME",True) # '$TONAME' on line 12, col 17
            if _v is not None: write(_filter(_v, rawExpr='$TONAME')) # from line 12, col 17.
            write('''<br>
''')
        write('''
    <b>''')
        _orig_filter_42652528 = _filter
        filterName = 'DateFilter'
        if self._CHEETAH__filters.has_key("DateFilter"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"DOCDATE",True) # '$DOCDATE' on line 15, col 26
        if _v is not None: write(_filter(_v, rawExpr='$DOCDATE')) # from line 15, col 26.
        _filter = _orig_filter_42652528
        write('''</b> \xb9<b>''')
        _v = VFFSL(SL,"DOCNUM",True) # '$DOCNUM' on line 15, col 55
        if _v is not None: write(_filter(_v, rawExpr='$DOCNUM')) # from line 15, col 55.
        write('''</b>
''')
        if VFFSL(SL,"varExists",False)('$ALGORITHM') and VFFSL(SL,"ALGORITHM",True): # generated from line 16, col 2
            write('''\t\t<u>(''')
            _v = VFFSL(SL,"ALGORITHM",True) # '$ALGORITHM' on line 17, col 7
            if _v is not None: write(_filter(_v, rawExpr='$ALGORITHM')) # from line 17, col 7.
            write(''')</u>
''')
        write('''\t<br>
    <b>(<u>''')
        _v = VFFSL(SL,"WCODE",True) # '$WCODE' on line 20, col 12
        if _v is not None: write(_filter(_v, rawExpr='$WCODE')) # from line 20, col 12.
        write('''</u>)</b> ''')
        _v = VFFSL(SL,"WNAME",True) # '$WNAME' on line 20, col 28
        if _v is not None: write(_filter(_v, rawExpr='$WNAME')) # from line 20, col 28.
        write(''' <br>
''')
        if VFFSL(SL,"VWUID",True): # generated from line 21, col 5
            write('''        <b>''')
            _v = VFFSL(SL,"VWUCODE",True) # '$VWUCODE' on line 22, col 12
            if _v is not None: write(_filter(_v, rawExpr='$VWUCODE')) # from line 22, col 12.
            write(''' = ''')
            _orig_filter_11640933 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"VWUFACTOR",True) # '$VWUFACTOR' on line 22, col 39
            if _v is not None: write(_filter(_v, rawExpr='$VWUFACTOR')) # from line 22, col 39.
            _filter = _orig_filter_11640933
            write(''' ''')
            _v = VFFSL(SL,"MWUCODE",True) # '$MWUCODE' on line 22, col 62
            if _v is not None: write(_filter(_v, rawExpr='$MWUCODE')) # from line 22, col 62.
            write(''' </b>
''')
        write('''    <br>
''')
        if VFFSL(SL,"varExists",False)('$PNUM') and VFFSL(SL,"PNUM",True): # generated from line 25, col 5
            write('''\t\t<b><u>''')
            _v = VFFSL(SL,"PNUM",True) # '$PNUM' on line 26, col 9
            if _v is not None: write(_filter(_v, rawExpr='$PNUM')) # from line 26, col 9.
            write('''</u></b>(''')
            _v = VFFSL(SL,"SNAME",True) # '$SNAME' on line 26, col 23
            if _v is not None: write(_filter(_v, rawExpr='$SNAME')) # from line 26, col 23.
            write(''')
''')
        else : # generated from line 27, col 2
            write('''\t\t<b>''')
            _v = VFFSL(SL,"SNAME",True) # '$SNAME' on line 28, col 6
            if _v is not None: write(_filter(_v, rawExpr='$SNAME')) # from line 28, col 6.
            write('''</b>
''')
        write('''    <br>
''')
        if VFFSL(SL,"varExists",False)('$qdoc'): # generated from line 31, col 5
            write('''        ''')
            if False:
                _('План')
            _v = VFFSL(SL,"_",False)('План') # "$_('\xcf\xeb\xe0\xed')" on line 32, col 9
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xeb\xe0\xed')")) # from line 32, col 9.
            write(''': ''')
            _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"qdoc",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($qdoc,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 32, col 21
            if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($qdoc,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 32, col 21.
            write(''' <b>(<u>''')
            _orig_filter_76527131 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"qdoc",True) # '$qdoc' on line 32, col 105
            if _v is not None: write(_filter(_v, rawExpr='$qdoc')) # from line 32, col 105.
            _filter = _orig_filter_76527131
            write('''</u>)</b>
        <br>
''')
        if VFFSL(SL,"varExists",False)('$qfact'): # generated from line 35, col 5
            write('''        ''')
            if False:
                _('Факт')
            _v = VFFSL(SL,"_",False)('Факт') # "$_('\xd4\xe0\xea\xf2')" on line 36, col 9
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd4\xe0\xea\xf2')")) # from line 36, col 9.
            write(''': ''')
            _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"qfact",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($qfact,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 36, col 21
            if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($qfact,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 36, col 21.
            write(''' <b>(<u>''')
            _orig_filter_18145942 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"qfact",True) # '$qfact' on line 36, col 106
            if _v is not None: write(_filter(_v, rawExpr='$qfact')) # from line 36, col 106.
            _filter = _orig_filter_18145942
            write('''</u>)</b>
        <br>
''')
        write('''    
    <hr>
''')
        if VFFSL(SL,"varExists",False)('$datalist'): # generated from line 41, col 5
            if len(VFFSL(SL,"datalist",True))>0: # generated from line 42, col 9
                write('''            <form action=dfsTaskWaresPalletSave>
''')
            write('''                <table>
                    <thead>
                        <tr>
                            <th>''')
            if False:
                _('Дата')
            _v = VFFSL(SL,"_",False)('Дата') # "$_('\xc4\xe0\xf2\xe0')" on line 48, col 33
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xe0\xf2\xe0')")) # from line 48, col 33.
            write('''</th>
                            <th>''')
            if False:
                _('Кол-во')
            _v = VFFSL(SL,"_",False)('Кол-во') # "$_('\xca\xee\xeb-\xe2\xee')" on line 49, col 33
            if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xee\xeb-\xe2\xee')")) # from line 49, col 33.
            write('''</th>
                            <th><select name=wuid>
''')
            if VFFSL(SL,"VWUID",True): # generated from line 51, col 35
                write('''                                    <option value=''')
                _v = VFFSL(SL,"VWUID",True) # '$VWUID' on line 52, col 51
                if _v is not None: write(_filter(_v, rawExpr='$VWUID')) # from line 52, col 51.
                write('''>''')
                _v = VFFSL(SL,"VWUCODE",True) # '$VWUCODE' on line 52, col 58
                if _v is not None: write(_filter(_v, rawExpr='$VWUCODE')) # from line 52, col 58.
                write('''</option>
''')
            write('''                                    <option value=''')
            _v = VFFSL(SL,"MWUID",True) # '$MWUID' on line 54, col 51
            if _v is not None: write(_filter(_v, rawExpr='$MWUID')) # from line 54, col 51.
            write('''>''')
            _v = VFFSL(SL,"MWUCODE",True) # '$MWUCODE' on line 54, col 58
            if _v is not None: write(_filter(_v, rawExpr='$MWUCODE')) # from line 54, col 58.
            write('''</option>
                                </select>
                            </th>
\t\t\t\t\t\t\t<th>''')
            if False:
                _('Резерв')
            _v = VFFSL(SL,"_",False)('Резерв') # "$_('\xd0\xe5\xe7\xe5\xf0\xe2')" on line 57, col 12
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd0\xe5\xe7\xe5\xf0\xe2')")) # from line 57, col 12.
            write('''</th>
                        <tr>
                    </thead>
                    <tbody>
''')
            for item in VFFSL(SL,"datalist",True): # generated from line 61, col 21
                write('''                        <tr>                    
                            <td>''')
                _orig_filter_86238581 = _filter
                filterName = 'DateFilter2'
                if self._CHEETAH__filters.has_key("DateFilter2"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.productdate",True) # '$item.productdate' on line 63, col 52
                if _v is not None: write(_filter(_v, rawExpr='$item.productdate')) # from line 63, col 52.
                _filter = _orig_filter_86238581
                write('''</td>
                            <td>''')
                _orig_filter_48281002 = _filter
                filterName = 'Quantity'
                if self._CHEETAH__filters.has_key("Quantity"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.AMOUNT",True) # '$item.AMOUNT' on line 64, col 49
                if _v is not None: write(_filter(_v, rawExpr='$item.AMOUNT')) # from line 64, col 49.
                _filter = _orig_filter_48281002
                write('''</td>
''')
                if VFFSL(SL,"item.WLNUMBER",True): # generated from line 65, col 29
                    write('''                                <td><input name=wl''')
                    _v = VFFSL(SL,"item.WLOTID",True) # '$item.WLOTID' on line 66, col 51
                    if _v is not None: write(_filter(_v, rawExpr='$item.WLOTID')) # from line 66, col 51.
                    write(''' id=":scan:float" type=text size=3 title="''')
                    _v = VFN(VFFSL(SL,"item.WLNUMBER",True),"replace",False)('"',"'") # '$item.WLNUMBER.replace(\'"\',"\'")' on line 66, col 105
                    if _v is not None: write(_filter(_v, rawExpr='$item.WLNUMBER.replace(\'"\',"\'")')) # from line 66, col 105.
                    write('''" value=0></td>
''')
                else: # generated from line 67, col 29
                    write('''                                <td><input name=wl''')
                    _v = VFFSL(SL,"item.WLOTID",True) # '$item.WLOTID' on line 68, col 51
                    if _v is not None: write(_filter(_v, rawExpr='$item.WLOTID')) # from line 68, col 51.
                    write(''' id=":scan:float" type=text size=3 value=0></td>
''')
                write('''\t\t\t\t\t\t\t<td>''')
                _orig_filter_11924885 = _filter
                filterName = 'Quantity'
                if self._CHEETAH__filters.has_key("Quantity"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.RESERVE",True) # '$item.RESERVE' on line 70, col 28
                if _v is not None: write(_filter(_v, rawExpr='$item.RESERVE')) # from line 70, col 28.
                _filter = _orig_filter_11924885
                write('''</td>
                        </tr>
''')
            write('''                    </tbody>
                </table>
                <br>
''')
            if len(VFFSL(SL,"datalist",True))>0: # generated from line 76, col 9
                write('''                <input type=hidden name=tid value=''')
                _v = VFFSL(SL,"TID",True) # '$TID' on line 77, col 51
                if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 77, col 51.
                write('''>
                <input type=hidden name=pid value=''')
                _v = VFFSL(SL,"PID",True) # '$PID' on line 78, col 51
                if _v is not None: write(_filter(_v, rawExpr='$PID')) # from line 78, col 51.
                write('''>
                <input type=hidden name=wid value=''')
                _v = VFFSL(SL,"WID",True) # '$WID' on line 79, col 51
                if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 79, col 51.
                write('''>
                <input type=hidden name=ctm value="''')
                _v = VFFSL(SL,"ctm",True) # '$ctm' on line 80, col 52
                if _v is not None: write(_filter(_v, rawExpr='$ctm')) # from line 80, col 52.
                write('''">
                <input type=submit value=Ok />
            </form>                
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskWaresPallet= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskWaresPallet, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskWaresPallet, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskWaresPallet)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskWaresPallet()).run()


