#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.cheetahutils import viewQuantity
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336168.4860001
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:48 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\DOCFREESELECT\\templates\\task.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class task(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 6, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''   
   ''')
        if False:
            _('От')
        _v = VFFSL(SL,"_",False)('От') # "$_('\xce\xf2')" on line 8, col 4
        if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xf2')")) # from line 8, col 4.
        write(''': <b><u>''')
        _v = VFFSL(SL,"FROMNAME",True) # '$FROMNAME' on line 8, col 20
        if _v is not None: write(_filter(_v, rawExpr='$FROMNAME')) # from line 8, col 20.
        write('''</u></b><br>
''')
        if VFFSL(SL,"varExists",False)('$THROUGHNAME') and VFFSL(SL,"THROUGHNAME",True): # generated from line 9, col 4
            write('''    ''')
            if False:
                _('Через')
            _v = VFFSL(SL,"_",False)('Через') # "$_('\xd7\xe5\xf0\xe5\xe7')" on line 10, col 5
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd7\xe5\xf0\xe5\xe7')")) # from line 10, col 5.
            write(''': <b>''')
            _v = VFFSL(SL,"THROUGHNAME",True) # '$THROUGHNAME' on line 10, col 21
            if _v is not None: write(_filter(_v, rawExpr='$THROUGHNAME')) # from line 10, col 21.
            write('''</b><br>
''')
        if VFFSL(SL,"TONAME",True): # generated from line 12, col 4
            write('''    ''')
            if False:
                _('Кому')
            _v = VFFSL(SL,"_",False)('Кому') # "$_('\xca\xee\xec\xf3')" on line 13, col 5
            if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xee\xec\xf3')")) # from line 13, col 5.
            write(''': ''')
            _v = VFFSL(SL,"TONAME",True) # '$TONAME' on line 13, col 17
            if _v is not None: write(_filter(_v, rawExpr='$TONAME')) # from line 13, col 17.
            write('''<br>
''')
        write('''   <b>''')
        _orig_filter_65385326 = _filter
        filterName = 'DateFilter'
        if self._CHEETAH__filters.has_key("DateFilter"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"DOCDATE",True) # '$DOCDATE' on line 15, col 25
        if _v is not None: write(_filter(_v, rawExpr='$DOCDATE')) # from line 15, col 25.
        _filter = _orig_filter_65385326
        write('''</b> \xb9<b>''')
        _v = VFFSL(SL,"DOCNUM",True) # '$DOCNUM' on line 15, col 54
        if _v is not None: write(_filter(_v, rawExpr='$DOCNUM')) # from line 15, col 54.
        write('''</b>
''')
        if VFFSL(SL,"varExists",False)('$ALGORITHM') and VFFSL(SL,"ALGORITHM",True): # generated from line 16, col 2
            write('''\t\t<u>(''')
            _v = VFFSL(SL,"ALGORITHM",True) # '$ALGORITHM' on line 17, col 7
            if _v is not None: write(_filter(_v, rawExpr='$ALGORITHM')) # from line 17, col 7.
            write(''')</u>
''')
        write('''\t<br>   
    <form action="dfsTaskScan">
        <input type="hidden" name="id" value="''')
        _v = VFFSL(SL,"TID",True) # '$TID' on line 21, col 47
        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 21, col 47.
        write('''">
        ''')
        if False:
            _('ШК')
        _v = VFFSL(SL,"_",False)('ШК') # "$_('\xd8\xca')" on line 22, col 9
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd8\xca')")) # from line 22, col 9.
        write(''': <input type=\'text\' name=\'barcode\' id=\'barcode:scan\' title="''')
        if False:
            _('Товар')
        _v = VFFSL(SL,"_",False)('Товар') # "$_('\xd2\xee\xe2\xe0\xf0')" on line 22, col 78
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd2\xee\xe2\xe0\xf0')")) # from line 22, col 78.
        write('''">
    </form>
''')
        if VFFSL(SL,"showList",True)=='0': # generated from line 24, col 5
            write('''        <a href="dfsTask?id=''')
            _v = VFFSL(SL,"TID",True) # '$TID' on line 25, col 29
            if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 25, col 29.
            write('''&showList=1">''')
            if False:
                _('Товары')
            _v = VFFSL(SL,"_",False)('Товары') # "$_('\xd2\xee\xe2\xe0\xf0\xfb')" on line 25, col 46
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd2\xee\xe2\xe0\xf0\xfb')")) # from line 25, col 46.
            write('''</a>
''')
        else: # generated from line 26, col 5
            write('''        <a href="dfsTask?id=''')
            _v = VFFSL(SL,"TID",True) # '$TID' on line 27, col 29
            if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 27, col 29.
            write('''&showList=0">''')
            if False:
                _('Скрыть')
            _v = VFFSL(SL,"_",False)('Скрыть') # "$_('\xd1\xea\xf0\xfb\xf2\xfc')" on line 27, col 46
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd1\xea\xf0\xfb\xf2\xfc')")) # from line 27, col 46.
            write('''</a> 
''')
            if VFFSL(SL,"showList",True)!='11': # generated from line 28, col 7
                write('''        <a href="dfsTask?id=''')
                _v = VFFSL(SL,"TID",True) # '$TID' on line 29, col 29
                if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 29, col 29.
                write('''&showList=11">''')
                if False:
                    _('Различия')
                _v = VFFSL(SL,"_",False)('Различия') # "$_('\xd0\xe0\xe7\xeb\xe8\xf7\xe8\xff')" on line 29, col 47
                if _v is not None: write(_filter(_v, rawExpr="$_('\xd0\xe0\xe7\xeb\xe8\xf7\xe8\xff')")) # from line 29, col 47.
                write('''</a>
''')
            else: # generated from line 30, col 7
                write('''        <a href="dfsTask?id=''')
                _v = VFFSL(SL,"TID",True) # '$TID' on line 31, col 29
                if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 31, col 29.
                write('''&showList=10">''')
                if False:
                    _('Все')
                _v = VFFSL(SL,"_",False)('Все') # "$_('\xc2\xf1\xe5')" on line 31, col 47
                if _v is not None: write(_filter(_v, rawExpr="$_('\xc2\xf1\xe5')")) # from line 31, col 47.
                write('''</a>
''')
        write('''   
''')
        if VFFSL(SL,"varExists",False)('$datalist'): # generated from line 35, col 4
            write('''    <table>
        <thead>
            <tr>
                <th>''')
            if False:
                _('Код')
            _v = VFFSL(SL,"_",False)('Код') # "$_('\xca\xee\xe4')" on line 39, col 21
            if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xee\xe4')")) # from line 39, col 21.
            write('''</th>
                <th>''')
            if False:
                _('План')
            _v = VFFSL(SL,"_",False)('План') # "$_('\xcf\xeb\xe0\xed')" on line 40, col 21
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xeb\xe0\xed')")) # from line 40, col 21.
            write('''</th>
                <th>''')
            if False:
                _('Факт')
            _v = VFFSL(SL,"_",False)('Факт') # "$_('\xd4\xe0\xea\xf2')" on line 41, col 21
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd4\xe0\xea\xf2')")) # from line 41, col 21.
            write('''</th>
            </tr>
        </thead>
        <tbody>
''')
            for item in VFFSL(SL,"datalist",True): # generated from line 45, col 9
                if VFFSL(SL,"item.QFACT",True): # generated from line 46, col 13
                    qFact = float(VFFSL(SL,"item.QFACT",True))
                else: # generated from line 48, col 13
                    qFact = 0.0000
                if VFFSL(SL,"item.QDOC",True): # generated from line 51, col 13
                    qDoc = float(VFFSL(SL,"item.QDOC",True))
                else: # generated from line 53, col 13
                    qDoc = 0.0000
                if VFFSL(SL,"showList",True) != '11' or VFFSL(SL,"qFact",True) != VFFSL(SL,"qDoc",True): # generated from line 56, col 11
                    write('''            <tr>
                <td><a href="dfsTaskWares?tid=''')
                    _v = VFFSL(SL,"TID",True) # '$TID' on line 58, col 47
                    if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 58, col 47.
                    write('''&wid=''')
                    _v = VFFSL(SL,"item.WID",True) # '$item.WID' on line 58, col 56
                    if _v is not None: write(_filter(_v, rawExpr='$item.WID')) # from line 58, col 56.
                    write('''" title="''')
                    _v = VFN(VFFSL(SL,"item.WNAME",True),"replace",False)('"',"'") # '$item.WNAME.replace(\'"\',"\'")' on line 58, col 74
                    if _v is not None: write(_filter(_v, rawExpr='$item.WNAME.replace(\'"\',"\'")')) # from line 58, col 74.
                    write('''">''')
                    _v = VFFSL(SL,"item.WCODE",True) # '$item.WCODE' on line 58, col 104
                    if _v is not None: write(_filter(_v, rawExpr='$item.WCODE')) # from line 58, col 104.
                    write('''</a></td>
                <td>''')
                    _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.QDOC",True),VFFSL(SL,"item.VUFACTOR",True),VFFSL(SL,"item.VUCODE",True),VFFSL(SL,"item.MUFACTOR",True),VFFSL(SL,"item.MUCODE",True)) # '$viewQuantity($item.QDOC,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)' on line 59, col 21
                    if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.QDOC,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)')) # from line 59, col 21.
                    write('''</td>
''')
                    if VFFSL(SL,"qFact",True) < 0.00001: # generated from line 60, col 15
                        write('''                <td style="background-color:yellow;">''')
                        _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.QFACT",True),VFFSL(SL,"item.VUFACTOR",True),VFFSL(SL,"item.VUCODE",True),VFFSL(SL,"item.MUFACTOR",True),VFFSL(SL,"item.MUCODE",True)) # '$viewQuantity($item.QFACT,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)' on line 61, col 54
                        if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.QFACT,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)')) # from line 61, col 54.
                        write('''</td>
''')
                    elif VFFSL(SL,"qFact",True) > VFFSL(SL,"qDoc",True): # generated from line 62, col 15
                        write('''                <td style="background-color:tomato;">''')
                        _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.QFACT",True),VFFSL(SL,"item.VUFACTOR",True),VFFSL(SL,"item.VUCODE",True),VFFSL(SL,"item.MUFACTOR",True),VFFSL(SL,"item.MUCODE",True)) # '$viewQuantity($item.QFACT,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)' on line 63, col 54
                        if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.QFACT,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)')) # from line 63, col 54.
                        write('''</td>
''')
                    elif VFFSL(SL,"qDoc",True) > VFFSL(SL,"qFact",True) : # generated from line 64, col 15
                        write('''                <td style="background-color:tomato;">''')
                        _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.QFACT",True),VFFSL(SL,"item.VUFACTOR",True),VFFSL(SL,"item.VUCODE",True),VFFSL(SL,"item.MUFACTOR",True),VFFSL(SL,"item.MUCODE",True)) # '$viewQuantity($item.QFACT,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)' on line 65, col 54
                        if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.QFACT,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)')) # from line 65, col 54.
                        write('''</td>              
''')
                    else: # generated from line 66, col 15
                        write('''                <td style="background-color:limegreen;">''')
                        _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.QFACT",True),VFFSL(SL,"item.VUFACTOR",True),VFFSL(SL,"item.VUCODE",True),VFFSL(SL,"item.MUFACTOR",True),VFFSL(SL,"item.MUCODE",True)) # '$viewQuantity($item.QFACT,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)' on line 67, col 57
                        if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.QFACT,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)')) # from line 67, col 57.
                        write('''</td>
''')
                    write('''            </tr>
''')
            write('''        </tbody>    
    </table>
''')
        else   : # generated from line 74, col 4
            write('''    <br>
''')
        write('''   
    <a href="javascript: if (confirm(\'''')
        if False:
            _('Вы  уверены?')
        _v = VFFSL(SL,"_",False)('Вы  уверены?') # "$_('\xc2\xfb  \xf3\xe2\xe5\xf0\xe5\xed\xfb?')" on line 78, col 39
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc2\xfb  \xf3\xe2\xe5\xf0\xe5\xed\xfb?')")) # from line 78, col 39.
        write("""')) location.href='dfsTaskEnd?id=""")
        _v = VFFSL(SL,"TID",True) # '$TID' on line 78, col 90
        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 78, col 90.
        write('''\'">''')
        if False:
            _('Завершить')
        _v = VFFSL(SL,"_",False)('Завершить') # "$_('\xc7\xe0\xe2\xe5\xf0\xf8\xe8\xf2\xfc')" on line 78, col 97
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc7\xe0\xe2\xe5\xf0\xf8\xe8\xf2\xfc')")) # from line 78, col 97.
        write('''</a>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''


''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_task= 'writeBody'

## END CLASS DEFINITION

if not hasattr(task, '_initCheetahAttributes'):
    templateAPIClass = getattr(task, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(task)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=task()).run()


