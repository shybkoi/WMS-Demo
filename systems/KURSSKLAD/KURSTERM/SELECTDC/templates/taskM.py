#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main
from systems.KURSSKLAD.cheetahutils import viewQuantity

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336170.5109999
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:50 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\SELECTDC\\templates\\taskM.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskM(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 5, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
    \xb9 <b>''')
        _v = VFFSL(SL,"docnum",True) # '$docnum' on line 7, col 10
        if _v is not None: write(_filter(_v, rawExpr='$docnum')) # from line 7, col 10.
        write('''</b> \xee\xf2 <b>''')
        _orig_filter_51734809 = _filter
        filterName = 'DateFilter'
        if self._CHEETAH__filters.has_key("DateFilter"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"docdate",True) # '$docdate' on line 7, col 46
        if _v is not None: write(_filter(_v, rawExpr='$docdate')) # from line 7, col 46.
        _filter = _orig_filter_51734809
        write(''' (<u>''')
        _v = VFFSL(SL,"TID",True) # '$TID' on line 7, col 71
        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 7, col 71.
        write('''</u>)</b>
''')
        if VFFSL(SL,"varExists",False)('$TONAME') and VFFSL(SL,"TONAME",True): # generated from line 8, col 5
            write('''        <br>''')
            _v = VFFSL(SL,"TONAME",True) # '$TONAME' on line 9, col 13
            if _v is not None: write(_filter(_v, rawExpr='$TONAME')) # from line 9, col 13.
            write('''<br>
''')
        write('''    <b><u>''')
        _v = VFFSL(SL,"INFONAME",True) # '$INFONAME' on line 11, col 11
        if _v is not None: write(_filter(_v, rawExpr='$INFONAME')) # from line 11, col 11.
        write('''</u></b>
    <hr>
    <form action="taskM">
        <input type="hidden" name="id" value="''')
        _v = VFFSL(SL,"TID",True) # '$TID' on line 14, col 47
        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 14, col 47.
        write('''">
        ''')
        if False:
            _('Отсканируйте ШК паллета для подтверждения или ШК товара для выверки:')
        _v = VFFSL(SL,"_",False)('Отсканируйте ШК паллета для подтверждения или ШК товара для выверки:') # "$_('\xce\xf2\xf1\xea\xe0\xed\xe8\xf0\xf3\xe9\xf2\xe5 \xd8\xca \xef\xe0\xeb\xeb\xe5\xf2\xe0 \xe4\xeb\xff \xef\xee\xe4\xf2\xe2\xe5\xf0\xe6\xe4\xe5\xed\xe8\xff \xe8\xeb\xe8 \xd8\xca \xf2\xee\xe2\xe0\xf0\xe0 \xe4\xeb\xff \xe2\xfb\xe2\xe5\xf0\xea\xe8:')" on line 15, col 9
        if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xf2\xf1\xea\xe0\xed\xe8\xf0\xf3\xe9\xf2\xe5 \xd8\xca \xef\xe0\xeb\xeb\xe5\xf2\xe0 \xe4\xeb\xff \xef\xee\xe4\xf2\xe2\xe5\xf0\xe6\xe4\xe5\xed\xe8\xff \xe8\xeb\xe8 \xd8\xca \xf2\xee\xe2\xe0\xf0\xe0 \xe4\xeb\xff \xe2\xfb\xe2\xe5\xf0\xea\xe8:')")) # from line 15, col 9.
        write(''' <input type="text" id=":scan:text" name="barcode" value="">
\t</form>
    <hr>
''')
        if VFFSL(SL,"varExists",False)('$datalist') and VFFSL(SL,"datalist",True): # generated from line 18, col 5
            write('''        <table>
            <thead>
                <tr>
                    <th>\xd2\xee\xe2\xe0\xf0</th>
                    <th>\xc7\xe0\xea\xe0\xe7</th>
                    <th>\xd4\xe0\xea\xf2</th>
                <tr>
            </thead>
            <tbody>
''')
            for item in VFFSL(SL,"datalist",True): # generated from line 28, col 13
                if VFFSL(SL,"item.QFACT",True): # generated from line 29, col 17
                    qFact = float(VFFSL(SL,"item.QFACT",True))
                else: # generated from line 31, col 17
                    qFact = 0.0000
                if VFFSL(SL,"item.QPLAN",True): # generated from line 34, col 17
                    qPlan = float(VFFSL(SL,"item.QPLAN",True))
                else: # generated from line 36, col 17
                    qPlan = 0.0000
                write('''                <tr>
                    <td><a href="taskMWares?tid=''')
                _v = VFFSL(SL,"tid",True) # '$tid' on line 40, col 49
                if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 40, col 49.
                write('''&wid=''')
                _v = VFFSL(SL,"item.WID",True) # '$item.WID' on line 40, col 58
                if _v is not None: write(_filter(_v, rawExpr='$item.WID')) # from line 40, col 58.
                write('''" title="''')
                _v = VFN(VFFSL(SL,"item.WNAME",True),"replace",False)('"',"'") # '$item.WNAME.replace(\'"\',"\'")' on line 40, col 76
                if _v is not None: write(_filter(_v, rawExpr='$item.WNAME.replace(\'"\',"\'")')) # from line 40, col 76.
                write('''">''')
                _v = VFFSL(SL,"item.WCODE",True) # '$item.WCODE' on line 40, col 106
                if _v is not None: write(_filter(_v, rawExpr='$item.WCODE')) # from line 40, col 106.
                write('''</a></td>
                    <td>''')
                _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.QPLAN",True),VFFSL(SL,"item.VUFACTOR",True),VFFSL(SL,"item.VUCODE",True),VFFSL(SL,"item.MUFACTOR",True),VFFSL(SL,"item.MUCODE",True)) # '$viewQuantity($item.QPLAN,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)' on line 41, col 25
                if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.QPLAN,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)')) # from line 41, col 25.
                write('''</td>
''')
                if VFFSL(SL,"qFact",True) < 0.00001: # generated from line 42, col 19
                    write('''                    <td style="background-color:yellow;">''')
                    _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.QFACT",True),VFFSL(SL,"item.VUFACTOR",True),VFFSL(SL,"item.VUCODE",True),VFFSL(SL,"item.MUFACTOR",True),VFFSL(SL,"item.MUCODE",True)) # '$viewQuantity($item.QFACT,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)' on line 43, col 58
                    if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.QFACT,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)')) # from line 43, col 58.
                    write('''</td>
''')
                elif VFFSL(SL,"qFact",True) - VFFSL(SL,"qPlan",True) > 0.0001: # generated from line 44, col 19
                    write('''                    <td style="background-color:tomato;">''')
                    _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.QFACT",True),VFFSL(SL,"item.VUFACTOR",True),VFFSL(SL,"item.VUCODE",True),VFFSL(SL,"item.MUFACTOR",True),VFFSL(SL,"item.MUCODE",True)) # '$viewQuantity($item.QFACT,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)' on line 45, col 58
                    if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.QFACT,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)')) # from line 45, col 58.
                    write('''</td>
''')
                elif VFFSL(SL,"qPlan",True) - VFFSL(SL,"qFact",True) > 0.0001: # generated from line 46, col 19
                    write('''                    <td style="background-color:tomato;">''')
                    _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.QFACT",True),VFFSL(SL,"item.VUFACTOR",True),VFFSL(SL,"item.VUCODE",True),VFFSL(SL,"item.MUFACTOR",True),VFFSL(SL,"item.MUCODE",True)) # '$viewQuantity($item.QFACT,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)' on line 47, col 58
                    if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.QFACT,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)')) # from line 47, col 58.
                    write('''</td>
''')
                else: # generated from line 48, col 19
                    write('''                    <td style="background-color:limegreen;">''')
                    _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.QFACT",True),VFFSL(SL,"item.VUFACTOR",True),VFFSL(SL,"item.VUCODE",True),VFFSL(SL,"item.MUFACTOR",True),VFFSL(SL,"item.MUCODE",True)) # '$viewQuantity($item.QFACT,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)' on line 49, col 61
                    if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.QFACT,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)')) # from line 49, col 61.
                    write('''</td>
''')
                write('''                </tr>
''')
            write('''            </tbody>
        </table>
''')
        else: # generated from line 55, col 5
            write('''        <div class="NoData">\xcd\xe8\xf7\xe5\xe3\xee \xed\xe5 \xed\xe0\xe9\xe4\xe5\xed\xee</div>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskM= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskM, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskM, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskM)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskM()).run()


