#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main
from systems.KURSSKLAD.cheetahutils import viewQuantity
from systems.KURSSKLAD.cheetahutils import coalesceValue

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336170.7390001
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:50 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\SELECTDC\\templates\\WIndex.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class WIndex(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 7, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''    
''')
        if VFFSL(SL,"varExists",False)('$datalist'): # generated from line 9, col 5
            if VFFSL(SL,"datalist",True) and len(VFFSL(SL,"datalist",True)) > 0: # generated from line 10, col 9
                write('''            <form action="WIndex">  
                \xd8\xca: <input type="text" name="barcode" id="barcode:scan:text" title="\xcf\xee\xe4\xe4\xee\xed">
            </form>
''')
            write('''        
        <table>
            <thead>
                <tr>
                    <th>''')
            if False:
                _('Товар')
            _v = VFFSL(SL,"_",False)('Товар') # "$_('\xd2\xee\xe2\xe0\xf0')" on line 19, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd2\xee\xe2\xe0\xf0')")) # from line 19, col 25.
            write('''</th>
                    <th>''')
            if False:
                _('Заказ')
            _v = VFFSL(SL,"_",False)('Заказ') # "$_('\xc7\xe0\xea\xe0\xe7')" on line 20, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc7\xe0\xea\xe0\xe7')")) # from line 20, col 25.
            write('''</th>
                    <th>''')
            if False:
                _('МП')
            _v = VFFSL(SL,"_",False)('МП') # "$_('\xcc\xcf')" on line 21, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcc\xcf')")) # from line 21, col 25.
            write('''</th>
                </tr>
            </thead>
            <tbody>
''')
            for item in VFFSL(SL,"datalist",True): # generated from line 25, col 13
                write('''                <tr>
                    <td><a href="#" title="''')
                _v = VFN(VFFSL(SL,"item.WNAME",True),"replace",False)('"',"'") # '$item.WNAME.replace(\'"\',"\'")' on line 27, col 44
                if _v is not None: write(_filter(_v, rawExpr='$item.WNAME.replace(\'"\',"\'")')) # from line 27, col 44.
                write('''">''')
                _v = VFFSL(SL,"item.WCODE",True) # '$item.WCODE' on line 27, col 74
                if _v is not None: write(_filter(_v, rawExpr='$item.WCODE')) # from line 27, col 74.
                write('''</a></td>
                    <td>''')
                _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.QORDER",True),VFFSL(SL,"item.VUFACTOR",True),VFFSL(SL,"item.VUCODE",True),VFFSL(SL,"item.MUFACTOR",True),VFFSL(SL,"item.MUCODE",True)) # '$viewQuantity($item.QORDER,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)' on line 28, col 25
                if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.QORDER,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)')) # from line 28, col 25.
                write('''(<b><u>''')
                _orig_filter_66572582 = _filter
                filterName = 'Quantity'
                if self._CHEETAH__filters.has_key("Quantity"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.QORDER",True) # '$item.QORDER' on line 28, col 131
                if _v is not None: write(_filter(_v, rawExpr='$item.QORDER')) # from line 28, col 131.
                _filter = _orig_filter_66572582
                write('''</u></b>)</td>
                    <td>''')
                _v = VFFSL(SL,"coalesceValue",False)(VFFSL(SL,"item.SNAME",True)) # '$coalesceValue($item.SNAME)' on line 29, col 25
                if _v is not None: write(_filter(_v, rawExpr='$coalesceValue($item.SNAME)')) # from line 29, col 25.
                write('''</td>
                <tr>
''')
            write('''            </tbody>
        </table>
''')
        write('''        
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''



''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_WIndex= 'writeBody'

## END CLASS DEFINITION

if not hasattr(WIndex, '_initCheetahAttributes'):
    templateAPIClass = getattr(WIndex, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(WIndex)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=WIndex()).run()


