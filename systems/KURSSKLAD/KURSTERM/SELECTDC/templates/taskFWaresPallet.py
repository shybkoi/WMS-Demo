#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336170.372
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:50 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\SELECTDC\\templates\\taskFWaresPallet.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskFWaresPallet(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 4, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''   
    <b> \xb9 ''')
        _v = VFFSL(SL,"docnum",True) # '$docnum' on line 6, col 11
        if _v is not None: write(_filter(_v, rawExpr='$docnum')) # from line 6, col 11.
        write(''' \xee\xf2 ''')
        _orig_filter_63024486 = _filter
        filterName = 'DateFilter'
        if self._CHEETAH__filters.has_key("DateFilter"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"docdate",True) # '$docdate' on line 6, col 40
        if _v is not None: write(_filter(_v, rawExpr='$docdate')) # from line 6, col 40.
        _filter = _orig_filter_63024486
        write(''' (<u>''')
        _v = VFFSL(SL,"TID",True) # '$TID' on line 6, col 65
        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 6, col 65.
        write('''</u>)</b>
''')
        if VFFSL(SL,"varExists",False)('$TONAME') and VFFSL(SL,"TONAME",True): # generated from line 7, col 5
            write('''        <br>''')
            _v = VFFSL(SL,"TONAME",True) # '$TONAME' on line 8, col 13
            if _v is not None: write(_filter(_v, rawExpr='$TONAME')) # from line 8, col 13.
            write('''<br>
''')
        write('''    <br>
''')
        if VFFSL(SL,"TWPALLETID",True): # generated from line 11, col 5
            if VFFSL(SL,"TWPALLETNUM",True): # generated from line 12, col 9
                write('''            <b>''')
                _v = VFFSL(SL,"TWPALLETNUM",True) # '$TWPALLETNUM' on line 13, col 16
                if _v is not None: write(_filter(_v, rawExpr='$TWPALLETNUM')) # from line 13, col 16.
                write('''</b>(''')
                _v = VFFSL(SL,"SITENAME",True) # '$SITENAME' on line 13, col 33
                if _v is not None: write(_filter(_v, rawExpr='$SITENAME')) # from line 13, col 33.
                write(''')
''')
            else: # generated from line 14, col 9
                write('''            <b>''')
                _v = VFFSL(SL,"SITENAME",True) # '$SITENAME' on line 15, col 16
                if _v is not None: write(_filter(_v, rawExpr='$SITENAME')) # from line 15, col 16.
                write('''</b>
''')
            write("""        <br><br>
        <form action='taskFWaresPallet'>
            <input type=hidden name=twid value=""")
            _v = VFFSL(SL,"TWID",True) # '$TWID' on line 19, col 48
            if _v is not None: write(_filter(_v, rawExpr='$TWID')) # from line 19, col 48.
            write('''>
            ''')
            if False:
                _('ШК поддона')
            _v = VFFSL(SL,"_",False)('ШК поддона') # "$_('\xd8\xca \xef\xee\xe4\xe4\xee\xed\xe0')" on line 20, col 13
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd8\xca \xef\xee\xe4\xe4\xee\xed\xe0')")) # from line 20, col 13.
            write(''': <br> <input type=text name=barcode id="barcode:scan">
        </form>   
''')
        elif not VFFSL(SL,"varExists",False)('$datalist') or len(VFFSL(SL,"datalist",True)) == 0: # generated from line 22, col 5
            write("""        <a href='qTaskFWaresNo?twid=""")
            _v = VFFSL(SL,"TWID",True) # '$TWID' on line 23, col 37
            if _v is not None: write(_filter(_v, rawExpr='$TWID')) # from line 23, col 37.
            write('''\' onClick="return confirm(\'\xcf\xee\xe4\xf2\xe2\xe5\xf0\xe4\xe8\xf2\xe5 \xed\xe5\xe2\xee\xe7\xec\xee\xe6\xed\xee\xf1\xf2\xfc \xee\xf2\xe1\xee\xf0\xea\xe8 \xef\xee\xe7\xe8\xf6\xe8\xe8\')">''')
            if False:
                _('Нет товара на остатках')
            _v = VFFSL(SL,"_",False)('Нет товара на остатках') # "$_('\xcd\xe5\xf2 \xf2\xee\xe2\xe0\xf0\xe0 \xed\xe0 \xee\xf1\xf2\xe0\xf2\xea\xe0\xf5')" on line 23, col 114
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xe5\xf2 \xf2\xee\xe2\xe0\xf0\xe0 \xed\xe0 \xee\xf1\xf2\xe0\xf2\xea\xe0\xf5')")) # from line 23, col 114.
            write('''</a>
\t\t<br>
''')
        write("""    <a href='qTaskFWaresNoPlace?twid=""")
        _v = VFFSL(SL,"TWID",True) # '$TWID' on line 26, col 38
        if _v is not None: write(_filter(_v, rawExpr='$TWID')) # from line 26, col 38.
        write('''\' onClick="return confirm(\'''')
        if False:
            _('Нет места на поддоне')
        _v = VFFSL(SL,"_",False)('Нет места на поддоне') # "$_('\xcd\xe5\xf2 \xec\xe5\xf1\xf2\xe0 \xed\xe0 \xef\xee\xe4\xe4\xee\xed\xe5')" on line 26, col 70
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xe5\xf2 \xec\xe5\xf1\xf2\xe0 \xed\xe0 \xef\xee\xe4\xe4\xee\xed\xe5')")) # from line 26, col 70.
        write('''\\n---------------------------------\\n''')
        if False:
            _('Вы уверены?')
        _v = VFFSL(SL,"_",False)('Вы уверены?') # "$_('\xc2\xfb \xf3\xe2\xe5\xf0\xe5\xed\xfb?')" on line 26, col 133
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc2\xfb \xf3\xe2\xe5\xf0\xe5\xed\xfb?')")) # from line 26, col 133.
        write('''\')">''')
        if False:
            _('Нет места на поддоне')
        _v = VFFSL(SL,"_",False)('Нет места на поддоне') # "$_('\xcd\xe5\xf2 \xec\xe5\xf1\xf2\xe0 \xed\xe0 \xef\xee\xe4\xe4\xee\xed\xe5')" on line 26, col 154
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xe5\xf2 \xec\xe5\xf1\xf2\xe0 \xed\xe0 \xef\xee\xe4\xe4\xee\xed\xe5')")) # from line 26, col 154.
        write('''</a>   
   <br><hr>
   <b><u>(''')
        _v = VFFSL(SL,"wcode",True) # '$wcode' on line 28, col 11
        if _v is not None: write(_filter(_v, rawExpr='$wcode')) # from line 28, col 11.
        write(''')</u></b>''')
        _v = VFFSL(SL,"wname",True) # '$wname' on line 28, col 26
        if _v is not None: write(_filter(_v, rawExpr='$wname')) # from line 28, col 26.
        write('''<br>
\t<b>''')
        _orig_filter_32050443 = _filter
        filterName = 'DateFilter2'
        if self._CHEETAH__filters.has_key("DateFilter2"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"twplandt",True) # '$twplandt' on line 29, col 25
        if _v is not None: write(_filter(_v, rawExpr='$twplandt')) # from line 29, col 25.
        write(''' ''')
        _filter = _orig_filter_32050443
        write(''' </b> = ''')
        _orig_filter_46056135 = _filter
        filterName = 'Quantity'
        if self._CHEETAH__filters.has_key("Quantity"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"qo",True) # '$qo' on line 29, col 72
        if _v is not None: write(_filter(_v, rawExpr='$qo')) # from line 29, col 72.
        write(''' ''')
        _filter = _orig_filter_46056135
        write('''
\t
''')
        if VFFSL(SL,"varExists",False)('$datalist'): # generated from line 31, col 2
            if len(VFFSL(SL,"datalist",True)) > 0: # generated from line 32, col 3
                write('''\t\t\t<br>
\t\t\t<b>''')
                if False:
                    _('Нужно переместить товар в зону не полных паллетов')
                _v = VFFSL(SL,"_",False)('Нужно переместить товар в зону не полных паллетов') # "$_('\xcd\xf3\xe6\xed\xee \xef\xe5\xf0\xe5\xec\xe5\xf1\xf2\xe8\xf2\xfc \xf2\xee\xe2\xe0\xf0 \xe2 \xe7\xee\xed\xf3 \xed\xe5 \xef\xee\xeb\xed\xfb\xf5 \xef\xe0\xeb\xeb\xe5\xf2\xee\xe2')" on line 34, col 7
                if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xf3\xe6\xed\xee \xef\xe5\xf0\xe5\xec\xe5\xf1\xf2\xe8\xf2\xfc \xf2\xee\xe2\xe0\xf0 \xe2 \xe7\xee\xed\xf3 \xed\xe5 \xef\xee\xeb\xed\xfb\xf5 \xef\xe0\xeb\xeb\xe5\xf2\xee\xe2')")) # from line 34, col 7.
                write('''</b>
''')
            write('''\t\t<table>
\t\t\t<thead>
\t\t\t\t<tr>
\t\t\t\t\t<th>''')
            if False:
                _('МП')
            _v = VFFSL(SL,"_",False)('МП') # "$_('\xcc\xcf')" on line 39, col 10
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcc\xcf')")) # from line 39, col 10.
            write('''</th>
\t\t\t\t\t<th>''')
            if False:
                _('КЭ')
            _v = VFFSL(SL,"_",False)('КЭ') # "$_('\xca\xdd')" on line 40, col 10
            if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xdd')")) # from line 40, col 10.
            write('''</th>
\t\t\t\t\t<th>''')
            if False:
                _('Кол-во')
            _v = VFFSL(SL,"_",False)('Кол-во') # "$_('\xca\xee\xeb-\xe2\xee')" on line 41, col 10
            if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xee\xeb-\xe2\xee')")) # from line 41, col 10.
            write('''</th>
\t\t\t\t</tr>
\t\t\t</thead>
\t\t\t<tbody>
''')
            for item in VFFSL(SL,"datalist",True): # generated from line 45, col 4
                write('''\t\t\t\t<tr>
\t\t\t\t\t<td>''')
                _v = VFFSL(SL,"item.SNAME",True) # '$item.SNAME' on line 47, col 10
                if _v is not None: write(_filter(_v, rawExpr='$item.SNAME')) # from line 47, col 10.
                write('''</td>
\t\t\t\t\t<td>''')
                _v = VFFSL(SL,"item.PCNT",True) # '$item.PCNT' on line 48, col 10
                if _v is not None: write(_filter(_v, rawExpr='$item.PCNT')) # from line 48, col 10.
                write('''</td>
\t\t\t\t\t<td>''')
                _orig_filter_23293556 = _filter
                filterName = 'Quantity'
                if self._CHEETAH__filters.has_key("Quantity"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.PQ",True) # '$item.PQ' on line 49, col 27
                if _v is not None: write(_filter(_v, rawExpr='$item.PQ')) # from line 49, col 27.
                write(''' ''')
                _filter = _orig_filter_23293556
                write('''</td>
\t\t\t\t</tr>
''')
            write('''\t\t\t</tbody>
\t\t</table>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskFWaresPallet= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskFWaresPallet, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskFWaresPallet, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskFWaresPallet)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskFWaresPallet()).run()


