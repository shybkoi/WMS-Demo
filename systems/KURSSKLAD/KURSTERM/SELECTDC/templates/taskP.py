#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main
from systems.KURSSKLAD.cheetahutils import viewQuantity
from systems.KURSSKLAD.cheetahutils import Quantity

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336170.572
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:50 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\SELECTDC\\templates\\taskP.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskP(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 7, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
    <b> \xb9 ''')
        _v = VFFSL(SL,"docnum",True) # '$docnum' on line 9, col 11
        if _v is not None: write(_filter(_v, rawExpr='$docnum')) # from line 9, col 11.
        write(''' \xee\xf2 ''')
        _orig_filter_35230120 = _filter
        filterName = 'DateFilter'
        if self._CHEETAH__filters.has_key("DateFilter"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"docdate",True) # '$docdate' on line 9, col 40
        if _v is not None: write(_filter(_v, rawExpr='$docdate')) # from line 9, col 40.
        _filter = _orig_filter_35230120
        write(''' (<u>''')
        _v = VFFSL(SL,"TID",True) # '$TID' on line 9, col 65
        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 9, col 65.
        write('''</u>)</b>
    <br>
''')
        if VFFSL(SL,"SITENAME",True): # generated from line 11, col 5
            write('''        <b>''')
            _v = VFFSL(SL,"SITENAME",True) # '$SITENAME' on line 12, col 12
            if _v is not None: write(_filter(_v, rawExpr='$SITENAME')) # from line 12, col 12.
            write('''</b><br><br>
''')
        write('''    <b><u>(''')
        _v = VFFSL(SL,"wcode",True) # '$wcode' on line 14, col 12
        if _v is not None: write(_filter(_v, rawExpr='$wcode')) # from line 14, col 12.
        write(''')</u></b>''')
        _v = VFFSL(SL,"wname",True) # '$wname' on line 14, col 27
        if _v is not None: write(_filter(_v, rawExpr='$wname')) # from line 14, col 27.
        write('''\t
''')
        if VFFSL(SL,"varExists",False)('$PLANPRODUCTDATE') and VFFSL(SL,"PLANPRODUCTDATE",True): # generated from line 15, col 2
            write('''\t\t<br><b>''')
            _orig_filter_80636853 = _filter
            filterName = 'DateFilter'
            if self._CHEETAH__filters.has_key("DateFilter"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"PLANPRODUCTDATE",True) # '$PLANPRODUCTDATE' on line 16, col 28
            if _v is not None: write(_filter(_v, rawExpr='$PLANPRODUCTDATE')) # from line 16, col 28.
            _filter = _orig_filter_80636853
            write('''</b> = 
''')
        write('''\t''')
        _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"QPLAN",True),VFFSL(SL,"VUFACTOR",True),VFFSL(SL,"VUCODE",True),VFFSL(SL,"MUFACTOR",True),VFFSL(SL,"MUCODE",True)) # '$viewQuantity($QPLAN,$VUFACTOR,$VUCODE,$MUFACTOR,$MUCODE)' on line 18, col 2
        if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($QPLAN,$VUFACTOR,$VUCODE,$MUFACTOR,$MUCODE)')) # from line 18, col 2.
        write(''' (<u><b>''')
        _v = VFFSL(SL,"Quantity",False)(VFFSL(SL,"QPLAN",True)) # '$Quantity($QPLAN)' on line 18, col 67
        if _v is not None: write(_filter(_v, rawExpr='$Quantity($QPLAN)')) # from line 18, col 67.
        write('''</b></u>)
    <hr>

    <a href="taskP?id=''')
        _v = VFFSL(SL,"TID",True) # '$TID' on line 21, col 23
        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 21, col 23.
        write('''">''')
        if False:
            _('Обновить')
        _v = VFFSL(SL,"_",False)('Обновить') # "$_('\xce\xe1\xed\xee\xe2\xe8\xf2\xfc')" on line 21, col 29
        if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xe1\xed\xee\xe2\xe8\xf2\xfc')")) # from line 21, col 29.
        write('''</a><br>
''')
        if VFFSL(SL,"varExists",False)('$datalist') and len(VFFSL(SL,"datalist",True)) > 0: # generated from line 22, col 2
            write('''\t<font class="yellow"><b>''')
            if False:
                _('Нет подходящего штабеля!')
            _v = VFFSL(SL,"_",False)('Нет подходящего штабеля!') # "$_('\xcd\xe5\xf2 \xef\xee\xe4\xf5\xee\xe4\xff\xf9\xe5\xe3\xee \xf8\xf2\xe0\xe1\xe5\xeb\xff!')" on line 23, col 26
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xe5\xf2 \xef\xee\xe4\xf5\xee\xe4\xff\xf9\xe5\xe3\xee \xf8\xf2\xe0\xe1\xe5\xeb\xff!')")) # from line 23, col 26.
            write('''</b></font>
\t<form action="taskP">
        <input type="hidden" name="id" value="''')
            _v = VFFSL(SL,"TID",True) # '$TID' on line 25, col 47
            if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 25, col 47.
            write('''">\t\t
        ''')
            if False:
                _('Отсканируйте поддон для продолжения отборки:')
            _v = VFFSL(SL,"_",False)('Отсканируйте поддон для продолжения отборки:') # "$_('\xce\xf2\xf1\xea\xe0\xed\xe8\xf0\xf3\xe9\xf2\xe5 \xef\xee\xe4\xe4\xee\xed \xe4\xeb\xff \xef\xf0\xee\xe4\xee\xeb\xe6\xe5\xed\xe8\xff \xee\xf2\xe1\xee\xf0\xea\xe8:')" on line 26, col 9
            if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xf2\xf1\xea\xe0\xed\xe8\xf0\xf3\xe9\xf2\xe5 \xef\xee\xe4\xe4\xee\xed \xe4\xeb\xff \xef\xf0\xee\xe4\xee\xeb\xe6\xe5\xed\xe8\xff \xee\xf2\xe1\xee\xf0\xea\xe8:')")) # from line 26, col 9.
            write(''' <input type="text" id=":scan:text" name="barcode" value="">
\t</form>
\t<table>
\t\t<thead>
\t\t\t<tr>
\t\t\t\t<th>''')
            if False:
                _('Паллет')
            _v = VFFSL(SL,"_",False)('Паллет') # "$_('\xcf\xe0\xeb\xeb\xe5\xf2')" on line 31, col 9
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xe0\xeb\xeb\xe5\xf2')")) # from line 31, col 9.
            write('''</th>
\t\t\t\t<th>''')
            if False:
                _('МП')
            _v = VFFSL(SL,"_",False)('МП') # "$_('\xcc\xcf')" on line 32, col 9
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcc\xcf')")) # from line 32, col 9.
            write('''</th>
\t\t\t</tr>
\t\t</thead>
\t\t<tbody>
''')
            for item in VFFSL(SL,"datalist",True): # generated from line 36, col 3
                write('''\t\t\t<tr>
\t\t\t\t<td>''')
                _v = VFFSL(SL,"item.PNUM",True) # '$item.PNUM' on line 38, col 9
                if _v is not None: write(_filter(_v, rawExpr='$item.PNUM')) # from line 38, col 9.
                write('''</td>
\t\t\t\t<td>''')
                _v = VFFSL(SL,"item.SNAME",True) # '$item.SNAME' on line 39, col 9
                if _v is not None: write(_filter(_v, rawExpr='$item.SNAME')) # from line 39, col 9.
                write('''</td>
\t\t\t</tr>
''')
            write('''\t\t</tbody>
\t</table>
''')
        else: # generated from line 44, col 5
            write('''\t\t<font class="red"><b>''')
            if False:
                _('Нет подходящего паллета!')
            _v = VFFSL(SL,"_",False)('Нет подходящего паллета!') # "$_('\xcd\xe5\xf2 \xef\xee\xe4\xf5\xee\xe4\xff\xf9\xe5\xe3\xee \xef\xe0\xeb\xeb\xe5\xf2\xe0!')" on line 45, col 24
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xe5\xf2 \xef\xee\xe4\xf5\xee\xe4\xff\xf9\xe5\xe3\xee \xef\xe0\xeb\xeb\xe5\xf2\xe0!')")) # from line 45, col 24.
            write('''</b></font><br>
\t\t<a href="taskPEmpty?tid=''')
            _v = VFFSL(SL,"TID",True) # '$TID' on line 46, col 27
            if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 46, col 27.
            write('''">''')
            if False:
                _('Завершить без отборки')
            _v = VFFSL(SL,"_",False)('Завершить без отборки') # "$_('\xc7\xe0\xe2\xe5\xf0\xf8\xe8\xf2\xfc \xe1\xe5\xe7 \xee\xf2\xe1\xee\xf0\xea\xe8')" on line 46, col 33
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc7\xe0\xe2\xe5\xf0\xf8\xe8\xf2\xfc \xe1\xe5\xe7 \xee\xf2\xe1\xee\xf0\xea\xe8')")) # from line 46, col 33.
            write('''</a>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''


''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskP= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskP, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskP, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskP)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskP()).run()


