#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main
from systems.KURSSKLAD.cheetahutils import viewQuantity

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336170.4030001
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:50 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\SELECTDC\\templates\\taskFWaresU.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskFWaresU(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 4, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''   
    <b> \xb9 ''')
        _v = VFFSL(SL,"docnum",True) # '$docnum' on line 6, col 11
        if _v is not None: write(_filter(_v, rawExpr='$docnum')) # from line 6, col 11.
        write(''' \xee\xf2 ''')
        _orig_filter_48963664 = _filter
        filterName = 'DateFilter'
        if self._CHEETAH__filters.has_key("DateFilter"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"docdate",True) # '$docdate' on line 6, col 40
        if _v is not None: write(_filter(_v, rawExpr='$docdate')) # from line 6, col 40.
        _filter = _orig_filter_48963664
        write(''' (<u>''')
        _v = VFFSL(SL,"TID",True) # '$TID' on line 6, col 65
        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 6, col 65.
        write('''</u>)</b>
    <br>''')
        _v = VFFSL(SL,"TONAME",True) # '$TONAME' on line 7, col 9
        if _v is not None: write(_filter(_v, rawExpr='$TONAME')) # from line 7, col 9.
        write('''</br>
    <b><u>(''')
        _v = VFFSL(SL,"wcode",True) # '$wcode' on line 8, col 12
        if _v is not None: write(_filter(_v, rawExpr='$wcode')) # from line 8, col 12.
        write(''')</u></b>''')
        _v = VFFSL(SL,"wname",True) # '$wname' on line 8, col 27
        if _v is not None: write(_filter(_v, rawExpr='$wname')) # from line 8, col 27.
        write('''<br>
    ''')
        _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"QO",True),VFFSL(SL,"VUFACTOR",True),VFFSL(SL,"VUCODE",True),VFFSL(SL,"MUFACTOR",True),VFFSL(SL,"MUCODE",True)) # '$viewQuantity($QO,$VUFACTOR,$VUCODE,$MUFACTOR,$MUCODE)' on line 9, col 5
        if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($QO,$VUFACTOR,$VUCODE,$MUFACTOR,$MUCODE)')) # from line 9, col 5.
        write('''(<b><u>''')
        _orig_filter_18113157 = _filter
        filterName = 'Quantity'
        if self._CHEETAH__filters.has_key("Quantity"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"QO",True) # '$QO' on line 9, col 82
        if _v is not None: write(_filter(_v, rawExpr='$QO')) # from line 9, col 82.
        _filter = _orig_filter_18113157
        write('''</u></b>)    
    <hr>
''')
        if VFFSL(SL,"varExists",False)('$TWPALLETNUM') and VFFSL(SL,"TWPALLETNUM",True): # generated from line 11, col 5
            write('''        <b>''')
            _v = VFFSL(SL,"TWPALLETNUM",True) # '$TWPALLETNUM' on line 12, col 12
            if _v is not None: write(_filter(_v, rawExpr='$TWPALLETNUM')) # from line 12, col 12.
            write('''</b>(''')
            _v = VFFSL(SL,"SITENAME",True) # '$SITENAME' on line 12, col 29
            if _v is not None: write(_filter(_v, rawExpr='$SITENAME')) # from line 12, col 29.
            write(''')
''')
        else: # generated from line 13, col 5
            write('''        <b>''')
            _v = VFFSL(SL,"SITENAME",True) # '$SITENAME' on line 14, col 12
            if _v is not None: write(_filter(_v, rawExpr='$SITENAME')) # from line 14, col 12.
            write('''</b>
''')
        QSite = 0
        if VFFSL(SL,"varExists",False)('$datalist'): # generated from line 17, col 5
            write('''        <table>
            <thead>
                <tr>
                    <th>''')
            if False:
                _('Дата')
            _v = VFFSL(SL,"_",False)('Дата') # "$_('\xc4\xe0\xf2\xe0')" on line 21, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xe0\xf2\xe0')")) # from line 21, col 25.
            write('''</th>
                    <th>''')
            if False:
                _('Кол-во')
            _v = VFFSL(SL,"_",False)('Кол-во') # "$_('\xca\xee\xeb-\xe2\xee')" on line 22, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xee\xeb-\xe2\xee')")) # from line 22, col 25.
            write('''</th>
                </tr>
            </thead>
            <tbody>
''')
            for item in VFFSL(SL,"datalist",True): # generated from line 26, col 13
                write('''                <tr>
                    <td>''')
                _orig_filter_94767222 = _filter
                filterName = 'DateFilter2'
                if self._CHEETAH__filters.has_key("DateFilter2"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.PDATE",True) # '$item.PDATE' on line 28, col 44
                if _v is not None: write(_filter(_v, rawExpr='$item.PDATE')) # from line 28, col 44.
                _filter = _orig_filter_94767222
                write('''</td>
                    <td>''')
                _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.PAMOUNT",True),VFFSL(SL,"VUFACTOR",True),VFFSL(SL,"VUCODE",True),VFFSL(SL,"MUFACTOR",True),VFFSL(SL,"MUCODE",True)) # '$viewQuantity($item.PAMOUNT,$VUFACTOR,$VUCODE,$MUFACTOR,$MUCODE)' on line 29, col 25
                if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.PAMOUNT,$VUFACTOR,$VUCODE,$MUFACTOR,$MUCODE)')) # from line 29, col 25.
                write('''
''')
                if VFFSL(SL,"VUCODE",True): # generated from line 30, col 23
                    write('''                        (<b><u>''')
                    _orig_filter_82254605 = _filter
                    filterName = 'Quantity'
                    if self._CHEETAH__filters.has_key("Quantity"):
                        _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                    else:
                        _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                    _v = VFFSL(SL,"item.PAMOUNT",True) # '$item.PAMOUNT' on line 31, col 48
                    if _v is not None: write(_filter(_v, rawExpr='$item.PAMOUNT')) # from line 31, col 48.
                    _filter = _orig_filter_82254605
                    write('''</u></b>)
''')
                write('''                    </td>
                </tr>
''')
                QSite += VFFSL(SL,"item.PAMOUNT",True)
            write('''            </tbody>
        </table>
''')
        write('''    <hr>    
''')
        if VFFSL(SL,"TWSTAT",True) == '5': # generated from line 41, col 5
            write("""        <a href='taskF?id=""")
            _v = VFFSL(SL,"TID",True) # '$TID' on line 42, col 27
            if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 42, col 27.
            write("""'>""")
            if False:
                _('Обновить')
            _v = VFFSL(SL,"_",False)('Обновить') # "$_('\xce\xe1\xed\xee\xe2\xe8\xf2\xfc')" on line 42, col 33
            if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xe1\xed\xee\xe2\xe8\xf2\xfc')")) # from line 42, col 33.
            write('''</a><br>
''')
        else            : # generated from line 43, col 5
            write("""        <form action='taskFWares'>
            <input type=hidden name=twid value=""")
            _v = VFFSL(SL,"TWID",True) # '$TWID' on line 45, col 48
            if _v is not None: write(_filter(_v, rawExpr='$TWID')) # from line 45, col 48.
            write('''>
\t\t\t''')
            if False:
                _('При сканировании ШК паллета будет отобрано ')
            _v = VFFSL(SL,"_",False)('При сканировании ШК паллета будет отобрано ') # "$_('\xcf\xf0\xe8 \xf1\xea\xe0\xed\xe8\xf0\xee\xe2\xe0\xed\xe8\xe8 \xd8\xca \xef\xe0\xeb\xeb\xe5\xf2\xe0 \xe1\xf3\xe4\xe5\xf2 \xee\xf2\xee\xe1\xf0\xe0\xed\xee ')" on line 46, col 4
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xf0\xe8 \xf1\xea\xe0\xed\xe8\xf0\xee\xe2\xe0\xed\xe8\xe8 \xd8\xca \xef\xe0\xeb\xeb\xe5\xf2\xe0 \xe1\xf3\xe4\xe5\xf2 \xee\xf2\xee\xe1\xf0\xe0\xed\xee ')")) # from line 46, col 4.
            write(''' 
''')
            if VFFSL(SL,"QO",True) > VFFSL(SL,"QSite",True): # generated from line 47, col 4
                write('''\t\t\t\t<input type="hidden" name="qselect" value="''')
                _v = VFFSL(SL,"QSite",True) # '$QSite' on line 48, col 48
                if _v is not None: write(_filter(_v, rawExpr='$QSite')) # from line 48, col 48.
                write('''">
\t\t\t\t<br><b>''')
                _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"QSite",True),VFFSL(SL,"VUFACTOR",True),VFFSL(SL,"VUCODE",True),VFFSL(SL,"MUFACTOR",True),VFFSL(SL,"MUCODE",True)) # '$viewQuantity($QSite,$VUFACTOR,$VUCODE,$MUFACTOR,$MUCODE)' on line 49, col 12
                if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($QSite,$VUFACTOR,$VUCODE,$MUFACTOR,$MUCODE)')) # from line 49, col 12.
                write('''</b>
''')
            else : # generated from line 50, col 4
                write('''\t\t\t\t<input type="hidden" name="qselect" value="''')
                _v = VFFSL(SL,"QO",True) # '$QO' on line 51, col 48
                if _v is not None: write(_filter(_v, rawExpr='$QO')) # from line 51, col 48.
                write('''">
\t\t\t\t<br><b>''')
                _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"QO",True),VFFSL(SL,"VUFACTOR",True),VFFSL(SL,"VUCODE",True),VFFSL(SL,"MUFACTOR",True),VFFSL(SL,"MUCODE",True)) # '$viewQuantity($QO,$VUFACTOR,$VUCODE,$MUFACTOR,$MUCODE)' on line 52, col 12
                if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($QO,$VUFACTOR,$VUCODE,$MUFACTOR,$MUCODE)')) # from line 52, col 12.
                write('''</b>
''')
            write('''\t\t\t<input type=text name=barcode id="barcode:scan">
''')
            # $_('ШК поддона'): <br> <input type=text name=barcode id="barcode:scan">
            write("""        </form>
        
        <br>  

        <a href='taskFWaresUQuant?twid=""")
            _v = VFFSL(SL,"TWID",True) # '$TWID' on line 60, col 40
            if _v is not None: write(_filter(_v, rawExpr='$TWID')) # from line 60, col 40.
            write("""'>""")
            if False:
                _('Фактическое количество')
            _v = VFFSL(SL,"_",False)('Фактическое количество') # "$_('\xd4\xe0\xea\xf2\xe8\xf7\xe5\xf1\xea\xee\xe5 \xea\xee\xeb\xe8\xf7\xe5\xf1\xf2\xe2\xee')" on line 60, col 47
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd4\xe0\xea\xf2\xe8\xf7\xe5\xf1\xea\xee\xe5 \xea\xee\xeb\xe8\xf7\xe5\xf1\xf2\xe2\xee')")) # from line 60, col 47.
            write("""</a><br>
        <a href='qTaskFWaresNoPlace?twid=""")
            _v = VFFSL(SL,"TWID",True) # '$TWID' on line 61, col 42
            if _v is not None: write(_filter(_v, rawExpr='$TWID')) # from line 61, col 42.
            write('''\' onClick="return confirm(\'''')
            if False:
                _('Нет места на поддоне')
            _v = VFFSL(SL,"_",False)('Нет места на поддоне') # "$_('\xcd\xe5\xf2 \xec\xe5\xf1\xf2\xe0 \xed\xe0 \xef\xee\xe4\xe4\xee\xed\xe5')" on line 61, col 74
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xe5\xf2 \xec\xe5\xf1\xf2\xe0 \xed\xe0 \xef\xee\xe4\xe4\xee\xed\xe5')")) # from line 61, col 74.
            write('''\\n---------------------------------\\n''')
            if False:
                _('Вы уверены?')
            _v = VFFSL(SL,"_",False)('Вы уверены?') # "$_('\xc2\xfb \xf3\xe2\xe5\xf0\xe5\xed\xfb?')" on line 61, col 137
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc2\xfb \xf3\xe2\xe5\xf0\xe5\xed\xfb?')")) # from line 61, col 137.
            write('''\')">''')
            if False:
                _('Нет места на поддоне')
            _v = VFFSL(SL,"_",False)('Нет места на поддоне') # "$_('\xcd\xe5\xf2 \xec\xe5\xf1\xf2\xe0 \xed\xe0 \xef\xee\xe4\xe4\xee\xed\xe5')" on line 61, col 158
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xe5\xf2 \xec\xe5\xf1\xf2\xe0 \xed\xe0 \xef\xee\xe4\xe4\xee\xed\xe5')")) # from line 61, col 158.
            write('''</a>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskFWaresU= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskFWaresU, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskFWaresU, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskFWaresU)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskFWaresU()).run()


