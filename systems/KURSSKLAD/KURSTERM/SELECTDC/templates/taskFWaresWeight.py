#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main
from systems.KURSSKLAD.cheetahutils import viewQuantity

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336170.48
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:50 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\SELECTDC\\templates\\taskFWaresWeight.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskFWaresWeight(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData     at line 5, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''    <b> \xb9 ''')
        _v = VFFSL(SL,"docnum",True) # '$docnum' on line 6, col 11
        if _v is not None: write(_filter(_v, rawExpr='$docnum')) # from line 6, col 11.
        write(''' \xee\xf2 ''')
        _orig_filter_61286539 = _filter
        filterName = 'DateFilter'
        if self._CHEETAH__filters.has_key("DateFilter"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"docdate",True) # '$docdate' on line 6, col 40
        if _v is not None: write(_filter(_v, rawExpr='$docdate')) # from line 6, col 40.
        _filter = _orig_filter_61286539
        write(''' (<u>''')
        _v = VFFSL(SL,"TID",True) # '$TID' on line 6, col 65
        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 6, col 65.
        write('''</u>)</b>
    <br>''')
        _v = VFFSL(SL,"TONAME",True) # '$TONAME' on line 7, col 9
        if _v is not None: write(_filter(_v, rawExpr='$TONAME')) # from line 7, col 9.
        write('''</br>
    <b><u>(''')
        _v = VFFSL(SL,"wcode",True) # '$wcode' on line 8, col 12
        if _v is not None: write(_filter(_v, rawExpr='$wcode')) # from line 8, col 12.
        write(''')</u></b>''')
        _v = VFFSL(SL,"wname",True) # '$wname' on line 8, col 27
        if _v is not None: write(_filter(_v, rawExpr='$wname')) # from line 8, col 27.
        write('''<br>
    \xc7\xe0\xea\xe0\xe7: <b><u>''')
        _orig_filter_87541058 = _filter
        filterName = 'Quantity'
        if self._CHEETAH__filters.has_key("Quantity"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"QO",True) # '$QO' on line 9, col 34
        if _v is not None: write(_filter(_v, rawExpr='$QO')) # from line 9, col 34.
        _filter = _orig_filter_87541058
        write('''</u></b>''')
        _v = VFFSL(SL,"MUCODE",True) # '$MUCODE' on line 9, col 57
        if _v is not None: write(_filter(_v, rawExpr='$MUCODE')) # from line 9, col 57.
        write('''
    <hr>
''')
        if VFFSL(SL,"varExists",False)('$TWPALLETNUM') and VFFSL(SL,"TWPALLETNUM",True): # generated from line 11, col 5
            write('''        <b>''')
            _v = VFFSL(SL,"TWPALLETNUM",True) # '$TWPALLETNUM' on line 12, col 12
            if _v is not None: write(_filter(_v, rawExpr='$TWPALLETNUM')) # from line 12, col 12.
            write('''</b>(''')
            _v = VFFSL(SL,"SITENAME",True) # '$SITENAME' on line 12, col 29
            if _v is not None: write(_filter(_v, rawExpr='$SITENAME')) # from line 12, col 29.
            write(''')
''')
        else: # generated from line 13, col 5
            write('''        <b>''')
            _v = VFFSL(SL,"SITENAME",True) # '$SITENAME' on line 14, col 12
            if _v is not None: write(_filter(_v, rawExpr='$SITENAME')) # from line 14, col 12.
            write('''</b>
''')
        if VFFSL(SL,"varExists",False)('$datalist'): # generated from line 16, col 5
            write('''        <table>
            <thead>
                <tr>
                    <th>''')
            if False:
                _('Дата')
            _v = VFFSL(SL,"_",False)('Дата') # "$_('\xc4\xe0\xf2\xe0')" on line 20, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xe0\xf2\xe0')")) # from line 20, col 25.
            write('''</th>
                    <th>''')
            if False:
                _('Кол-во')
            _v = VFFSL(SL,"_",False)('Кол-во') # "$_('\xca\xee\xeb-\xe2\xee')" on line 21, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xee\xeb-\xe2\xee')")) # from line 21, col 25.
            write('''</th>
                </tr>
            </thead>
            <tbody>
''')
            for item in VFFSL(SL,"datalist",True): # generated from line 25, col 13
                write('''                <tr>
                    <td>''')
                _orig_filter_71718637 = _filter
                filterName = 'DateFilter2'
                if self._CHEETAH__filters.has_key("DateFilter2"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.PDATE",True) # '$item.PDATE' on line 27, col 44
                if _v is not None: write(_filter(_v, rawExpr='$item.PDATE')) # from line 27, col 44.
                _filter = _orig_filter_71718637
                write('''</td>
                    <td>''')
                _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.PAMOUNT",True),VFFSL(SL,"VUFACTOR",True),VFFSL(SL,"VUCODE",True),VFFSL(SL,"MUFACTOR",True),VFFSL(SL,"MUCODE",True)) # '$viewQuantity($item.PAMOUNT,$VUFACTOR,$VUCODE,$MUFACTOR,$MUCODE)' on line 28, col 25
                if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.PAMOUNT,$VUFACTOR,$VUCODE,$MUFACTOR,$MUCODE)')) # from line 28, col 25.
                write('''
''')
                if VFFSL(SL,"VUCODE",True): # generated from line 29, col 23
                    write('''                        (<b><u>''')
                    _orig_filter_12849053 = _filter
                    filterName = 'Quantity'
                    if self._CHEETAH__filters.has_key("Quantity"):
                        _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                    else:
                        _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                    _v = VFFSL(SL,"item.PAMOUNT",True) # '$item.PAMOUNT' on line 30, col 48
                    if _v is not None: write(_filter(_v, rawExpr='$item.PAMOUNT')) # from line 30, col 48.
                    _filter = _orig_filter_12849053
                    write('''</u></b>)
''')
                write('''                    </td>
                </tr>
''')
            write('''            </tbody>
        </table>
''')
        write('''    <hr>    
    <form action="taskFWaresWeight">
        <input type="hidden" name="twid" value="''')
        _v = VFFSL(SL,"TWID",True) # '$TWID' on line 40, col 49
        if _v is not None: write(_filter(_v, rawExpr='$TWID')) # from line 40, col 49.
        write('''">
        \xc2\xe5\xf1: <input type="text" name="weight" id="::float" size="6" value="''')
        _v = VFFSL(SL,"weight",True) # '$weight' on line 41, col 76
        if _v is not None: write(_filter(_v, rawExpr='$weight')) # from line 41, col 76.
        write('''">
        <button type="submit">Ok</button>
\t</form>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskFWaresWeight= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskFWaresWeight, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskFWaresWeight, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskFWaresWeight)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskFWaresWeight()).run()


