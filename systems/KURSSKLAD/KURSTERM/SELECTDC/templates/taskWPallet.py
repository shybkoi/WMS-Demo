#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336170.6670001
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:50 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\SELECTDC\\templates\\taskWPallet.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskWPallet(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData     at line 4, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''\t<form action="taskWPallet">
        <input type="hidden" name="palletid" value="''')
        _v = VFFSL(SL,"PID",True) # '$PID' on line 6, col 53
        if _v is not None: write(_filter(_v, rawExpr='$PID')) # from line 6, col 53.
        write('''">
        ''')
        if False:
            _('ШК')
        _v = VFFSL(SL,"_",False)('ШК') # "$_('\xd8\xca')" on line 7, col 9
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd8\xca')")) # from line 7, col 9.
        write(''': <input type="text" id=":scan:text" name="barcode" value="" title="''')
        if False:
            _('Поддон')
        _v = VFFSL(SL,"_",False)('Поддон') # "$_('\xcf\xee\xe4\xe4\xee\xed')" on line 7, col 85
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xee\xe4\xe4\xee\xed')")) # from line 7, col 85.
        write(''', ''')
        if False:
            _('Товар')
        _v = VFFSL(SL,"_",False)('Товар') # "$_('\xd2\xee\xe2\xe0\xf0')" on line 7, col 99
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd2\xee\xe2\xe0\xf0')")) # from line 7, col 99.
        write('''"><br>
\t</form>    
    <br>
    \xcf\xee\xe4\xe4\xee\xed: <b><u>''')
        _v = VFFSL(SL,"PNUM",True) # '$PNUM' on line 10, col 19
        if _v is not None: write(_filter(_v, rawExpr='$PNUM')) # from line 10, col 19.
        write('''</u></b>(''')
        _v = VFFSL(SL,"SNAME",True) # '$SNAME' on line 10, col 33
        if _v is not None: write(_filter(_v, rawExpr='$SNAME')) # from line 10, col 33.
        write(''')<br><br>
    
''')
        if VFFSL(SL,"varExists",False)('$datalist'): # generated from line 12, col 5
            write('''        <table>
            <thead>
                <tr>
                    <th>\xd2\xee\xe2\xe0\xf0</th>
                    <th>\xca\xee\xeb-\xe2\xee</th>
                    <th>\xc8\xf2\xee\xe3\xee</th>
                <tr>
            </thead>
            <tbody>
''')
            for item in VFFSL(SL,"datalist",True): # generated from line 22, col 13
                write('''                <tr>
                    <td><a href="taskWPalletWares?palletid=''')
                _v = VFFSL(SL,"PID",True) # '$PID' on line 24, col 60
                if _v is not None: write(_filter(_v, rawExpr='$PID')) # from line 24, col 60.
                write('''&waresid=''')
                _v = VFFSL(SL,"item.WID",True) # '$item.WID' on line 24, col 73
                if _v is not None: write(_filter(_v, rawExpr='$item.WID')) # from line 24, col 73.
                write('''" title="''')
                _v = VFN(VFFSL(SL,"item.WNAME",True),"replace",False)('"',"'") # '$item.WNAME.replace(\'"\',"\'")' on line 24, col 91
                if _v is not None: write(_filter(_v, rawExpr='$item.WNAME.replace(\'"\',"\'")')) # from line 24, col 91.
                write('''">''')
                _v = VFFSL(SL,"item.WCODE",True) # '$item.WCODE' on line 24, col 121
                if _v is not None: write(_filter(_v, rawExpr='$item.WCODE')) # from line 24, col 121.
                write('''</a></td>
                    <td>
''')
                if VFFSL(SL,"item.AMOUNT",True) and float(VFFSL(SL,"item.AMOUNT",True))>0.00001: # generated from line 26, col 25
                    if VFFSL(SL,"item.VUAMOUNT",True) and float(VFFSL(SL,"item.VUAMOUNT",True))>0.00001: # generated from line 27, col 29
                        write('''                                ''')
                        _orig_filter_66673336 = _filter
                        filterName = 'Quantity'
                        if self._CHEETAH__filters.has_key("Quantity"):
                            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                        else:
                            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                        _v = VFFSL(SL,"item.VUAMOUNT",True) # '$item.VUAMOUNT' on line 28, col 50
                        if _v is not None: write(_filter(_v, rawExpr='$item.VUAMOUNT')) # from line 28, col 50.
                        write(''' ''')
                        _filter = _orig_filter_66673336
                        write(''' ''')
                        _v = VFFSL(SL,"item.VUCODE",True) # '$item.VUCODE' on line 28, col 78
                        if _v is not None: write(_filter(_v, rawExpr='$item.VUCODE')) # from line 28, col 78.
                        write('''
''')
                    if VFFSL(SL,"item.MUAMOUNT",True) and float(VFFSL(SL,"item.MUAMOUNT",True))>0.00001: # generated from line 30, col 29
                        write('''                                ''')
                        _orig_filter_45747403 = _filter
                        filterName = 'Quantity'
                        if self._CHEETAH__filters.has_key("Quantity"):
                            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                        else:
                            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                        _v = VFFSL(SL,"item.MUAMOUNT",True) # '$item.MUAMOUNT' on line 31, col 50
                        if _v is not None: write(_filter(_v, rawExpr='$item.MUAMOUNT')) # from line 31, col 50.
                        write(''' ''')
                        _filter = _orig_filter_45747403
                        write(''' ''')
                        _v = VFFSL(SL,"item.MUCODE",True) # '$item.MUCODE' on line 31, col 78
                        if _v is not None: write(_filter(_v, rawExpr='$item.MUCODE')) # from line 31, col 78.
                        write('''
''')
                else: # generated from line 33, col 25
                    write('''                            &nbsp;
''')
                write('''                    </td>
                    <td>''')
                _orig_filter_27455207 = _filter
                filterName = 'Quantity'
                if self._CHEETAH__filters.has_key("Quantity"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.AMOUNT",True) # '$item.AMOUNT' on line 37, col 42
                if _v is not None: write(_filter(_v, rawExpr='$item.AMOUNT')) # from line 37, col 42.
                write(''' ''')
                _filter = _orig_filter_27455207
                write('''</td>
                </tr>
''')
            write('''            </tbody>
        </table>
        <br>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskWPallet= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskWPallet, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskWPallet, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskWPallet)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskWPallet()).run()


