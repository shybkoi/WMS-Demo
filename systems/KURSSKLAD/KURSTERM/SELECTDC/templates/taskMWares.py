#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main
from systems.KURSSKLAD.cheetahutils import viewQuantity

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336170.5510001
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:50 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\SELECTDC\\templates\\taskMWares.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskMWares(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 5, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''    \xb9 <b>''')
        _v = VFFSL(SL,"docnum",True) # '$docnum' on line 6, col 10
        if _v is not None: write(_filter(_v, rawExpr='$docnum')) # from line 6, col 10.
        write('''</b> \xee\xf2 <b>''')
        _orig_filter_22397595 = _filter
        filterName = 'DateFilter'
        if self._CHEETAH__filters.has_key("DateFilter"):
            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
        else:
            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
        _v = VFFSL(SL,"docdate",True) # '$docdate' on line 6, col 46
        if _v is not None: write(_filter(_v, rawExpr='$docdate')) # from line 6, col 46.
        _filter = _orig_filter_22397595
        write(''' (<u>''')
        _v = VFFSL(SL,"TID",True) # '$TID' on line 6, col 71
        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 6, col 71.
        write('''</u>)</b>
''')
        if VFFSL(SL,"varExists",False)('$TONAME') and VFFSL(SL,"TONAME",True): # generated from line 7, col 5
            write('''        <br>''')
            _v = VFFSL(SL,"TONAME",True) # '$TONAME' on line 8, col 13
            if _v is not None: write(_filter(_v, rawExpr='$TONAME')) # from line 8, col 13.
            write('''<br>
''')
        write('''    <b><u>''')
        _v = VFFSL(SL,"INFONAME",True) # '$INFONAME' on line 10, col 11
        if _v is not None: write(_filter(_v, rawExpr='$INFONAME')) # from line 10, col 11.
        write('''</u></b>
    <hr>
    <form action="taskMWares">
        <input type="hidden" name="taskid" value="''')
        _v = VFFSL(SL,"TID",True) # '$TID' on line 13, col 51
        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 13, col 51.
        write('''">
        <input type="hidden" name="waresid" value="''')
        _v = VFFSL(SL,"WID",True) # '$WID' on line 14, col 52
        if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 14, col 52.
        write('''">
        ''')
        if False:
            _('ШК')
        _v = VFFSL(SL,"_",False)('ШК') # "$_('\xd8\xca')" on line 15, col 9
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd8\xca')")) # from line 15, col 9.
        write(''': <input type="text" id=":scan:text" name="barcode" title="''')
        if False:
            _('Товар')
        _v = VFFSL(SL,"_",False)('Товар') # "$_('\xd2\xee\xe2\xe0\xf0')" on line 15, col 76
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd2\xee\xe2\xe0\xf0')")) # from line 15, col 76.
        write('''"><br>
    </form>
    <hr>

    <b><u>(''')
        _v = VFFSL(SL,"WCODE",True) # '$WCODE' on line 19, col 12
        if _v is not None: write(_filter(_v, rawExpr='$WCODE')) # from line 19, col 12.
        write(''')</u></b>''')
        _v = VFFSL(SL,"WNAME",True) # '$WNAME' on line 19, col 27
        if _v is not None: write(_filter(_v, rawExpr='$WNAME')) # from line 19, col 27.
        write('''
''')
        if VFFSL(SL,"varExists",False)('$ARTICUL') and VFFSL(SL,"ARTICUL",True): # generated from line 20, col 5
            write('''    \t<b>(<u>''')
            _v = VFFSL(SL,"ARTICUL",True) # '$ARTICUL' on line 21, col 13
            if _v is not None: write(_filter(_v, rawExpr='$ARTICUL')) # from line 21, col 13.
            write('''</u>)</b>
''')
        write('''    <br>
''')
        if VFFSL(SL,"VWUID",True): # generated from line 24, col 5
            write('''        <b>''')
            _v = VFFSL(SL,"VWUCODE",True) # '$VWUCODE' on line 25, col 12
            if _v is not None: write(_filter(_v, rawExpr='$VWUCODE')) # from line 25, col 12.
            write(''' = ''')
            _orig_filter_68095643 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"VWUFACTOR",True) # '$VWUFACTOR' on line 25, col 39
            if _v is not None: write(_filter(_v, rawExpr='$VWUFACTOR')) # from line 25, col 39.
            _filter = _orig_filter_68095643
            write(''' ''')
            _v = VFFSL(SL,"MWUCODE",True) # '$MWUCODE' on line 25, col 62
            if _v is not None: write(_filter(_v, rawExpr='$MWUCODE')) # from line 25, col 62.
            write(''' </b><br>
''')
        write('''    <br>

''')
        if VFFSL(SL,"varExists",False)('$datalist') and VFFSL(SL,"datalist",True) and len(VFFSL(SL,"datalist",True))>0: # generated from line 29, col 5
            wuamount = 0
            amount = 0
            write('''    <form action=taskMWaresSave method=post>
        <input type=hidden name=waresid value=''')
            _v = VFFSL(SL,"wid",True) # '$wid' on line 33, col 47
            if _v is not None: write(_filter(_v, rawExpr='$wid')) # from line 33, col 47.
            write('''>
        <input type=hidden name=taskid value=''')
            _v = VFFSL(SL,"tid",True) # '$tid' on line 34, col 46
            if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 34, col 46.
            write('''>
        <input type=hidden name=dbeg value="''')
            _v = VFFSL(SL,"dbeg",True) # '$dbeg' on line 35, col 45
            if _v is not None: write(_filter(_v, rawExpr='$dbeg')) # from line 35, col 45.
            write('''">
        <table>
            <thead>
                <tr>
                    <th>''')
            if False:
                _('Дата')
            _v = VFFSL(SL,"_",False)('Дата') # "$_('\xc4\xe0\xf2\xe0')" on line 39, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xe0\xf2\xe0')")) # from line 39, col 25.
            write('''</th>
                    <th>
                        <select name=wuid id=":focus:">
                            <option value=''')
            _v = VFFSL(SL,"MWUID",True) # '$MWUID' on line 42, col 43
            if _v is not None: write(_filter(_v, rawExpr='$MWUID')) # from line 42, col 43.
            write(''' selected>''')
            _v = VFFSL(SL,"MWUCODE",True) # '$MWUCODE' on line 42, col 59
            if _v is not None: write(_filter(_v, rawExpr='$MWUCODE')) # from line 42, col 59.
            write('''</option>
''')
            if VFFSL(SL,"VWUID",True): # generated from line 43, col 27
                write('''                            <option value=''')
                _v = VFFSL(SL,"VWUID",True) # '$VWUID' on line 44, col 43
                if _v is not None: write(_filter(_v, rawExpr='$VWUID')) # from line 44, col 43.
                write('''>''')
                _v = VFFSL(SL,"VWUCODE",True) # '$VWUCODE' on line 44, col 50
                if _v is not None: write(_filter(_v, rawExpr='$VWUCODE')) # from line 44, col 50.
                write('''</option>
''')
            write('''                        </select>
                    </th>
                    <th>''')
            if False:
                _('Кол-во')
            _v = VFFSL(SL,"_",False)('Кол-во') # "$_('\xca\xee\xeb-\xe2\xee')" on line 48, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xee\xeb-\xe2\xee')")) # from line 48, col 25.
            write('''</th>
                <tr>
            </thead>
            <tbody>
''')
            for item in VFFSL(SL,"datalist",True): # generated from line 52, col 13
                if VFFSL(SL,"item.canedit",True) == '0': # generated from line 53, col 17
                    trClass = 'class="inactive"'
                else: # generated from line 55, col 17
                    trClass = ''
                write('''                <tr ''')
                _v = VFFSL(SL,"trClass",True) # '$trClass' on line 58, col 21
                if _v is not None: write(_filter(_v, rawExpr='$trClass')) # from line 58, col 21.
                write('''>
                    <td>''')
                _orig_filter_88920082 = _filter
                filterName = 'DateFilter2'
                if self._CHEETAH__filters.has_key("DateFilter2"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.productdate",True) # '$item.productdate' on line 59, col 44
                if _v is not None: write(_filter(_v, rawExpr='$item.productdate')) # from line 59, col 44.
                _filter = _orig_filter_88920082
                write('''</td>
''')
                if VFFSL(SL,"item.canedit",True) == '1': # generated from line 60, col 19
                    write('''                    <td><input type="text" name="WL_''')
                    _v = VFFSL(SL,"item.WLOTID",True) # '$item.WLOTID' on line 61, col 53
                    if _v is not None: write(_filter(_v, rawExpr='$item.WLOTID')) # from line 61, col 53.
                    write('''" id="::float" title="''')
                    _v = VFFSL(SL,"item.WLNUMBER",True) # '$item.WLNUMBER' on line 61, col 87
                    if _v is not None: write(_filter(_v, rawExpr='$item.WLNUMBER')) # from line 61, col 87.
                    write('''" value="''')
                    _orig_filter_30262987 = _filter
                    filterName = 'Quantity'
                    if self._CHEETAH__filters.has_key("Quantity"):
                        _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                    else:
                        _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                    _v = VFFSL(SL,"item.AMOUNT",True) # '$item.AMOUNT' on line 61, col 126
                    if _v is not None: write(_filter(_v, rawExpr='$item.AMOUNT')) # from line 61, col 126.
                    _filter = _orig_filter_30262987
                    write('''" size="4"></td>
''')
                else: # generated from line 62, col 19
                    write('''                    <td><a href=\'#\' title="''')
                    _v = VFFSL(SL,"item.WLNUMBER",True) # '$item.WLNUMBER' on line 63, col 44
                    if _v is not None: write(_filter(_v, rawExpr='$item.WLNUMBER')) # from line 63, col 44.
                    write('''">''')
                    _orig_filter_14753798 = _filter
                    filterName = 'Quantity'
                    if self._CHEETAH__filters.has_key("Quantity"):
                        _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                    else:
                        _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                    _v = VFFSL(SL,"item.AMOUNT",True) # '$item.AMOUNT' on line 63, col 76
                    if _v is not None: write(_filter(_v, rawExpr='$item.AMOUNT')) # from line 63, col 76.
                    _filter = _orig_filter_14753798
                    write('''</a></td>
''')
                write('''                    <td>''')
                _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.AMOUNT",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($item.AMOUNT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 65, col 25
                if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.AMOUNT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 65, col 25.
                write('''(<b><u>''')
                _orig_filter_57748425 = _filter
                filterName = 'Quantity'
                if self._CHEETAH__filters.has_key("Quantity"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.AMOUNT",True) # '$item.AMOUNT' on line 65, col 115
                if _v is not None: write(_filter(_v, rawExpr='$item.AMOUNT')) # from line 65, col 115.
                _filter = _orig_filter_57748425
                write('''</u></b>)</td>
                </tr>
''')
                amount += float(VFFSL(SL,"item.AMOUNT",True))
            write('''            </tbody>
            <tfoot>
                <tr>
                    <th>''')
            if False:
                _('Итого')
            _v = VFFSL(SL,"_",False)('Итого') # "$_('\xc8\xf2\xee\xe3\xee')" on line 72, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc8\xf2\xee\xe3\xee')")) # from line 72, col 25.
            write(''':</th>
                    <th colspan=2>''')
            _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"amount",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($amount,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 73, col 35
            if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($amount,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 73, col 35.
            write('''(<b><u>''')
            _orig_filter_11841561 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"amount",True) # '$amount' on line 73, col 120
            if _v is not None: write(_filter(_v, rawExpr='$amount')) # from line 73, col 120.
            _filter = _orig_filter_11841561
            write('''</u></b>)</th>
                </tr>
            </tfoot>
        </table>
        <input type="submit" value="''')
            if False:
                _('Сохранить')
            _v = VFFSL(SL,"_",False)('Сохранить') # "$_('\xd1\xee\xf5\xf0\xe0\xed\xe8\xf2\xfc')" on line 77, col 37
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd1\xee\xf5\xf0\xe0\xed\xe8\xf2\xfc')")) # from line 77, col 37.
            write('''">
    </form>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskMWares= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskMWares, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskMWares, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskMWares)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskMWares()).run()


