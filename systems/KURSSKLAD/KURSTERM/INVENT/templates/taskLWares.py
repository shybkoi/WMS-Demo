#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main
from systems.KURSSKLAD.cheetahutils import viewQuantity

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336169.592
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:49 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\INVENT\\templates\\taskLWares.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskLWares(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 5, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''    ''')
        _v = VFFSL(SL,"ZONENAME",True) # '$ZONENAME' on line 6, col 5
        if _v is not None: write(_filter(_v, rawExpr='$ZONENAME')) # from line 6, col 5.
        write('''</br>
    <b>\xb9''')
        _v = VFFSL(SL,"TID",True) # '$TID' on line 7, col 9
        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 7, col 9.
        write('''</b>(''')
        _v = VFFSL(SL,"ALGORITHM",True) # '$ALGORITHM' on line 7, col 18
        if _v is not None: write(_filter(_v, rawExpr='$ALGORITHM')) # from line 7, col 18.
        write(''')

    <br><b><u>(''')
        _v = VFFSL(SL,"WCODE",True) # '$WCODE' on line 9, col 16
        if _v is not None: write(_filter(_v, rawExpr='$WCODE')) # from line 9, col 16.
        write(''')</u></b>''')
        _v = VFFSL(SL,"WNAME",True) # '$WNAME' on line 9, col 31
        if _v is not None: write(_filter(_v, rawExpr='$WNAME')) # from line 9, col 31.
        write('''<br>
''')
        if VFFSL(SL,"VWUID",True): # generated from line 10, col 5
            write('''        <b>''')
            _v = VFFSL(SL,"VWUCODE",True) # '$VWUCODE' on line 11, col 12
            if _v is not None: write(_filter(_v, rawExpr='$VWUCODE')) # from line 11, col 12.
            write(''' = ''')
            _orig_filter_16148104 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"VWUFACTOR",True) # '$VWUFACTOR' on line 11, col 39
            if _v is not None: write(_filter(_v, rawExpr='$VWUFACTOR')) # from line 11, col 39.
            _filter = _orig_filter_16148104
            write(''' ''')
            _v = VFFSL(SL,"MWUCODE",True) # '$MWUCODE' on line 11, col 62
            if _v is not None: write(_filter(_v, rawExpr='$MWUCODE')) # from line 11, col 62.
            write(''' </b><br>
''')
        if VFFSL(SL,"TRASHREST",True): # generated from line 13, col 5
            write('''        <b>''')
            _v = VFFSL(SL,"trashname",True) # '$trashname' on line 14, col 12
            if _v is not None: write(_filter(_v, rawExpr='$trashname')) # from line 14, col 12.
            write('''</b>: ''')
            _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"TRASHREST",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($TRASHREST,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 14, col 28
            if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($TRASHREST,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 14, col 28.
            write('''<br>
''')
        write('''    <br>
''')
        focus = ":focus:"
        write('''        <a id="''')
        if VFFSL(SL,"view",True)=='all' : # generated from line 18, col 16
            _v =  VFFSL(SL,"focus",True) 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ''
            if _v is not None: write(_filter(_v))
        write('''" href="taskLWares?tid=''')
        _v = VFFSL(SL,"tid",True) # '$tid' on line 18, col 76
        if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 18, col 76.
        write('''&wid=''')
        _v = VFFSL(SL,"wid",True) # '$wid' on line 18, col 85
        if _v is not None: write(_filter(_v, rawExpr='$wid')) # from line 18, col 85.
        write('''&view=all">\xc2\xf1\xe5</a>&nbsp;
        <a id="''')
        if VFFSL(SL,"view",True)!='all' : # generated from line 19, col 16
            _v =  VFFSL(SL,"focus",True) 
            if _v is not None: write(_filter(_v))
        else:
            _v =  ''
            if _v is not None: write(_filter(_v))
        write('''" href="taskLWares?tid=''')
        _v = VFFSL(SL,"tid",True) # '$tid' on line 19, col 76
        if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 19, col 76.
        write('''&wid=''')
        _v = VFFSL(SL,"wid",True) # '$wid' on line 19, col 85
        if _v is not None: write(_filter(_v, rawExpr='$wid')) # from line 19, col 85.
        write('''&view=diff">\xcd\xe5 \xe7\xe0\xe2\xe5\xf0\xf8\xe5\xed\xed\xfb\xe5</a></br>
    <a href="javascript: if (confirm(\'''')
        if False:
            _('Вы  уверены?')
        _v = VFFSL(SL,"_",False)('Вы  уверены?') # "$_('\xc2\xfb  \xf3\xe2\xe5\xf0\xe5\xed\xfb?')" on line 20, col 39
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc2\xfb  \xf3\xe2\xe5\xf0\xe5\xed\xfb?')")) # from line 20, col 39.
        write("""')) location.href='taskLEndWares?tid=""")
        _v = VFFSL(SL,"tid",True) # '$tid' on line 20, col 94
        if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 20, col 94.
        write('''&wid=''')
        _v = VFFSL(SL,"wid",True) # '$wid' on line 20, col 103
        if _v is not None: write(_filter(_v, rawExpr='$wid')) # from line 20, col 103.
        write('''\'">\xc7\xe0\xe2\xe5\xf0\xf8\xe8\xf2\xfc \xf2\xee\xe2\xe0\xf0</a>
    <br>
    <br>
    <form action="taskLWares">
        <input type="hidden" name="tid" value="''')
        _v = VFFSL(SL,"tid",True) # '$tid' on line 24, col 48
        if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 24, col 48.
        write('''">
        <input type="hidden" name="wid" value="''')
        _v = VFFSL(SL,"wid",True) # '$wid' on line 25, col 48
        if _v is not None: write(_filter(_v, rawExpr='$wid')) # from line 25, col 48.
        write('''">
        ''')
        if False:
            _('ШК')
        _v = VFFSL(SL,"_",False)('ШК') # "$_('\xd8\xca')" on line 26, col 9
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd8\xca')")) # from line 26, col 9.
        write(''': <input type="text" id=":scan:text" name="barcode" title="''')
        if False:
            _('Поддон')
        _v = VFFSL(SL,"_",False)('Поддон') # "$_('\xcf\xee\xe4\xe4\xee\xed')" on line 26, col 76
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xee\xe4\xe4\xee\xed')")) # from line 26, col 76.
        write('''"/><br>
    </form><br>



''')
        if VFFSL(SL,"varExists",False)('$datalist') and VFFSL(SL,"datalist",True): # generated from line 31, col 5
            for item in VFFSL(SL,"datalist",True): # generated from line 32, col 9
                if VFFSL(SL,"view",True) != 'all' and VFFSL(SL,"item.IS_INVENT",True) != 1: # generated from line 33, col 13
                    write('''                <a href="taskLPallet?tid=''')
                    _v = VFFSL(SL,"tid",True) # '$tid' on line 34, col 42
                    if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 34, col 42.
                    write('''&pid=''')
                    _v = VFFSL(SL,"item.PALLETID",True) # '$item.PALLETID' on line 34, col 51
                    if _v is not None: write(_filter(_v, rawExpr='$item.PALLETID')) # from line 34, col 51.
                    write('''&wid=''')
                    _v = VFFSL(SL,"wid",True) # '$wid' on line 34, col 70
                    if _v is not None: write(_filter(_v, rawExpr='$wid')) # from line 34, col 70.
                    write('''">
''')
                    if VFFSL(SL,"item.PNUMBER",True): # generated from line 35, col 22
                        write('''                        ''')
                        _v = VFFSL(SL,"item.PNUMBER",True) # '$item.PNUMBER' on line 36, col 25
                        if _v is not None: write(_filter(_v, rawExpr='$item.PNUMBER')) # from line 36, col 25.
                        write('''
''')
                    else: # generated from line 37, col 22
                        write('''                       ''')
                        if False:
                            _('МО')
                        _v = VFFSL(SL,"_",False)('МО') # "$_('\xcc\xce')" on line 38, col 24
                        if _v is not None: write(_filter(_v, rawExpr="$_('\xcc\xce')")) # from line 38, col 24.
                        write('''
''')
                    write('''
                     (''')
                    _v = VFFSL(SL,"item.SNAME",True) # '$item.SNAME' on line 41, col 23
                    if _v is not None: write(_filter(_v, rawExpr='$item.SNAME')) # from line 41, col 23.
                    write(''')
                </a>
                     &nbsp;
''')
                    if VFFSL(SL,"item.IS_INVENT",True) == 1: # generated from line 44, col 22
                        write('''                       +
''')
                    else: # generated from line 46, col 22
                        write('''                       -
''')
                    write('''                <br>
''')
                elif VFFSL(SL,"view",True) == 'all': # generated from line 50, col 13
                    write('''                <a href="taskLPallet?tid=''')
                    _v = VFFSL(SL,"tid",True) # '$tid' on line 51, col 42
                    if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 51, col 42.
                    write('''&pid=''')
                    _v = VFFSL(SL,"item.PALLETID",True) # '$item.PALLETID' on line 51, col 51
                    if _v is not None: write(_filter(_v, rawExpr='$item.PALLETID')) # from line 51, col 51.
                    write('''&wid=''')
                    _v = VFFSL(SL,"wid",True) # '$wid' on line 51, col 70
                    if _v is not None: write(_filter(_v, rawExpr='$wid')) # from line 51, col 70.
                    write('''">
''')
                    if VFFSL(SL,"item.PNUMBER",True): # generated from line 52, col 22
                        write('''                        ''')
                        _v = VFFSL(SL,"item.PNUMBER",True) # '$item.PNUMBER' on line 53, col 25
                        if _v is not None: write(_filter(_v, rawExpr='$item.PNUMBER')) # from line 53, col 25.
                        write('''
''')
                    else: # generated from line 54, col 22
                        write('''                       ''')
                        if False:
                            _('МО')
                        _v = VFFSL(SL,"_",False)('МО') # "$_('\xcc\xce')" on line 55, col 24
                        if _v is not None: write(_filter(_v, rawExpr="$_('\xcc\xce')")) # from line 55, col 24.
                        write('''
''')
                    write('''
                     (''')
                    _v = VFFSL(SL,"item.SNAME",True) # '$item.SNAME' on line 58, col 23
                    if _v is not None: write(_filter(_v, rawExpr='$item.SNAME')) # from line 58, col 23.
                    write(''')
                </a>
                     &nbsp;
''')
                    if VFFSL(SL,"item.IS_INVENT",True) == 1: # generated from line 61, col 22
                        write('''                       +
''')
                    else: # generated from line 63, col 22
                        write('''                       -
''')
                    write('''                <br>
''')
            write('''
''')
        else: # generated from line 70, col 5
            write('''        ''')
            if False:
                _('Паллеты не найдены')
            _v = VFFSL(SL,"_",False)('Паллеты не найдены') # "$_('\xcf\xe0\xeb\xeb\xe5\xf2\xfb \xed\xe5 \xed\xe0\xe9\xe4\xe5\xed\xfb')" on line 71, col 9
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xe0\xeb\xeb\xe5\xf2\xfb \xed\xe5 \xed\xe0\xe9\xe4\xe5\xed\xfb')")) # from line 71, col 9.
            write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskLWares= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskLWares, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskLWares, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskLWares)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskLWares()).run()


