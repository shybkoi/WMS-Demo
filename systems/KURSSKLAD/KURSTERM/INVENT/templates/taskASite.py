#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336169.3970001
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:49 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\INVENT\\templates\\taskASite.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskASite(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 4, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''    <style>
        div.w100 { width: 100%; height: 20px; position: relative; }
        div.w50 { width: 50%; height: 100%; display: block; float: left; }
        .r { text-align: right; }
        .l { text-align: left; }
        a { text-decoration: none; }
    </style>


    ''')
        _v = VFFSL(SL,"ZONENAME",True) # '$ZONENAME' on line 14, col 5
        if _v is not None: write(_filter(_v, rawExpr='$ZONENAME')) # from line 14, col 5.
        write('''</br>
    <b>\xb9''')
        _v = VFFSL(SL,"TID",True) # '$TID' on line 15, col 9
        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 15, col 9.
        write('''</b>(''')
        _v = VFFSL(SL,"ALGORITHM",True) # '$ALGORITHM' on line 15, col 18
        if _v is not None: write(_filter(_v, rawExpr='$ALGORITHM')) # from line 15, col 18.
        write(''')
    <br>
    <br>

''')
        sid = False
        if VFFSL(SL,"varExists",False)('$datalist') and VFFSL(SL,"datalist",True): # generated from line 20, col 5
            for item in VFFSL(SL,"datalist",True): # generated from line 21, col 9
                write('''            <div class="w100">
''')
                if not VFFSL(SL,"sid",True) or VFFSL(SL,"item.SITEID",True) != VFFSL(SL,"sid",True): # generated from line 23, col 13
                    write('''                <div class="w50 r">
''')
                    if VFFSL(SL,"item.PTYPE",True) != '1': # generated from line 25, col 21
                        write('''                        <a href="taskAPalletAdd?tid=''')
                        _v = VFFSL(SL,"tid",True) # '$tid' on line 26, col 53
                        if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 26, col 53.
                        write('''&sid=''')
                        _v = VFFSL(SL,"item.SITEID",True) # '$item.SITEID' on line 26, col 62
                        if _v is not None: write(_filter(_v, rawExpr='$item.SITEID')) # from line 26, col 62.
                        write('''" title="''')
                        if False:
                            _('Добавить паллет')
                        _v = VFFSL(SL,"_",False)('Добавить паллет') # "$_('\xc4\xee\xe1\xe0\xe2\xe8\xf2\xfc \xef\xe0\xeb\xeb\xe5\xf2')" on line 26, col 83
                        if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xee\xe1\xe0\xe2\xe8\xf2\xfc \xef\xe0\xeb\xeb\xe5\xf2')")) # from line 26, col 83.
                        write('''">+</a>
''')
                    write('''                    <b>''')
                    _v = VFFSL(SL,"item.SNAME",True) # '$item.SNAME' on line 28, col 24
                    if _v is not None: write(_filter(_v, rawExpr='$item.SNAME')) # from line 28, col 24.
                    write(''':</b>
                </div>
''')
                    sid = VFFSL(SL,"item.SITEID",True)
                else: # generated from line 31, col 13
                    write('''                <div class="w50 r"></div>
''')
                write('''            <div class="w50">
''')
                if VFFSL(SL,"item.PALLETID",True): # generated from line 35, col 17
                    write('''                    <a href="taskAPallet?tid=''')
                    _v = VFFSL(SL,"tid",True) # '$tid' on line 36, col 46
                    if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 36, col 46.
                    write('''&pid=''')
                    _v = VFFSL(SL,"item.PALLETID",True) # '$item.PALLETID' on line 36, col 55
                    if _v is not None: write(_filter(_v, rawExpr='$item.PALLETID')) # from line 36, col 55.
                    write('''">
''')
                    if VFFSL(SL,"item.PTYPE",True) == '1': # generated from line 37, col 21
                        write('''                        ''')
                        if False:
                            _('__МО__')
                        _v = VFFSL(SL,"_",False)('__МО__') # "$_('__\xcc\xce__')" on line 38, col 25
                        if _v is not None: write(_filter(_v, rawExpr="$_('__\xcc\xce__')")) # from line 38, col 25.
                        write('''
''')
                    else: # generated from line 39, col 21
                        write('''                        ''')
                        _v = VFFSL(SL,"item.PNUMBER",True) # '$item.PNUMBER' on line 40, col 25
                        if _v is not None: write(_filter(_v, rawExpr='$item.PNUMBER')) # from line 40, col 25.
                        write('''
''')
                    write('''                    </a>
                    &nbsp;
''')
                    if VFFSL(SL,"item.TPSTATUS",True) == 'w': # generated from line 44, col 21
                        write('''                        <span>~</span>
''')
                    elif VFFSL(SL,"item.TPSTATUS",True) == '1': # generated from line 46, col 21
                        write('''                        <span>v</span>
''')
                    else: # generated from line 48, col 21
                        write('''                        <span>-</span>
''')
                else: # generated from line 51, col 17
                    write('''
''')
                write('''
            </div>
            </div>
''')
        write('''\t<form action="taskAScanPallet">
        <input type=hidden name=tid value=''')
        _v = VFFSL(SL,"TID",True) # '$TID' on line 60, col 43
        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 60, col 43.
        write('''>
        ''')
        if False:
            _('ШК')
        _v = VFFSL(SL,"_",False)('ШК') # "$_('\xd8\xca')" on line 61, col 9
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd8\xca')")) # from line 61, col 9.
        write(''': <input type=text id=":scan:text" name=barcode value="" title="''')
        if False:
            _('Поддон')
        _v = VFFSL(SL,"_",False)('Поддон') # "$_('\xcf\xee\xe4\xe4\xee\xed')" on line 61, col 81
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xee\xe4\xe4\xee\xed')")) # from line 61, col 81.
        write('''"><br>
\t</form>
    <br>
    <br>
    <a href="taskAPalletDelete?tid=''')
        _v = VFFSL(SL,"tid",True) # '$tid' on line 65, col 36
        if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 65, col 36.
        write('''&sid=''')
        _v = VFFSL(SL,"hsid",True) # '$hsid' on line 65, col 45
        if _v is not None: write(_filter(_v, rawExpr='$hsid')) # from line 65, col 45.
        write('''">''')
        if False:
            _('Нет паллета')
        _v = VFFSL(SL,"_",False)('Нет паллета') # "$_('\xcd\xe5\xf2 \xef\xe0\xeb\xeb\xe5\xf2\xe0')" on line 65, col 52
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xe5\xf2 \xef\xe0\xeb\xeb\xe5\xf2\xe0')")) # from line 65, col 52.
        write('''</a><br>
    <a href="taskAEndSite?tid=''')
        _v = VFFSL(SL,"tid",True) # '$tid' on line 66, col 31
        if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 66, col 31.
        write('''&sid=''')
        _v = VFFSL(SL,"hsid",True) # '$hsid' on line 66, col 40
        if _v is not None: write(_filter(_v, rawExpr='$hsid')) # from line 66, col 40.
        write('''">''')
        if False:
            _('Завершить МП')
        _v = VFFSL(SL,"_",False)('Завершить МП') # "$_('\xc7\xe0\xe2\xe5\xf0\xf8\xe8\xf2\xfc \xcc\xcf')" on line 66, col 47
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc7\xe0\xe2\xe5\xf0\xf8\xe8\xf2\xfc \xcc\xcf')")) # from line 66, col 47.
        write('''</a><br>
    ''')
        _v = VFFSL(SL,"username",True) # '$username' on line 67, col 5
        if _v is not None: write(_filter(_v, rawExpr='$username')) # from line 67, col 5.
        write('''

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskASite= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskASite, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskASite, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskASite)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskASite()).run()


