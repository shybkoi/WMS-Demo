#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main
from systems.KURSSKLAD.cheetahutils import viewQuantity

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336169.5409999
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:49 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\INVENT\\templates\\taskLPalletWares.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskLPalletWares(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 5, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
    <form action="taskLScanPalletWares">
        <input type="hidden" name="pid" value="''')
        _v = VFFSL(SL,"PID",True) # '$PID' on line 8, col 48
        if _v is not None: write(_filter(_v, rawExpr='$PID')) # from line 8, col 48.
        write('''">
        <input type="hidden" name="wid" value="''')
        _v = VFFSL(SL,"WID",True) # '$WID' on line 9, col 48
        if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 9, col 48.
        write('''">
        <input type="hidden" name="tid" value="''')
        _v = VFFSL(SL,"tid",True) # '$tid' on line 10, col 48
        if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 10, col 48.
        write('''">
        ''')
        if False:
            _('ШК')
        _v = VFFSL(SL,"_",False)('ШК') # "$_('\xd8\xca')" on line 11, col 9
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd8\xca')")) # from line 11, col 9.
        write(''': <input type="text" id=":scan:text" name="barcode" title="''')
        if False:
            _('МП')
        _v = VFFSL(SL,"_",False)('МП') # "$_('\xcc\xcf')" on line 11, col 76
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcc\xcf')")) # from line 11, col 76.
        write(''', ''')
        if False:
            _('Поддон')
        _v = VFFSL(SL,"_",False)('Поддон') # "$_('\xcf\xee\xe4\xe4\xee\xed')" on line 11, col 86
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xee\xe4\xe4\xee\xed')")) # from line 11, col 86.
        write(''', ''')
        if False:
            _('Товар')
        _v = VFFSL(SL,"_",False)('Товар') # "$_('\xd2\xee\xe2\xe0\xf0')" on line 11, col 100
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd2\xee\xe2\xe0\xf0')")) # from line 11, col 100.
        write('''"/><br>
    </form><br>

''')
        if VFFSL(SL,"varExists",False)('$PNUM') and VFFSL(SL,"PNUM",True): # generated from line 14, col 2
            write('''\t\t''')
            if False:
                _('Поддон')
            _v = VFFSL(SL,"_",False)('Поддон') # "$_('\xcf\xee\xe4\xe4\xee\xed')" on line 15, col 3
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xee\xe4\xe4\xee\xed')")) # from line 15, col 3.
            write(''': <b><u>''')
            _v = VFFSL(SL,"PNUM",True) # '$PNUM' on line 15, col 23
            if _v is not None: write(_filter(_v, rawExpr='$PNUM')) # from line 15, col 23.
            write('''</u></b>(''')
            _v = VFFSL(SL,"SNAME",True) # '$SNAME' on line 15, col 37
            if _v is not None: write(_filter(_v, rawExpr='$SNAME')) # from line 15, col 37.
            write(''')
''')
        else: # generated from line 16, col 2
            write('''\t    <b>''')
            _v = VFFSL(SL,"SNAME",True) # '$SNAME' on line 17, col 9
            if _v is not None: write(_filter(_v, rawExpr='$SNAME')) # from line 17, col 9.
            write('''</b>
''')
        write('''    <br><b><u>(''')
        _v = VFFSL(SL,"WCODE",True) # '$WCODE' on line 19, col 16
        if _v is not None: write(_filter(_v, rawExpr='$WCODE')) # from line 19, col 16.
        write(''')</u></b>''')
        _v = VFFSL(SL,"WNAME",True) # '$WNAME' on line 19, col 31
        if _v is not None: write(_filter(_v, rawExpr='$WNAME')) # from line 19, col 31.
        write('''<br>
''')
        if VFFSL(SL,"VWUID",True): # generated from line 20, col 5
            write('''        <b>''')
            _v = VFFSL(SL,"VWUCODE",True) # '$VWUCODE' on line 21, col 12
            if _v is not None: write(_filter(_v, rawExpr='$VWUCODE')) # from line 21, col 12.
            write(''' = ''')
            _orig_filter_69085551 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"VWUFACTOR",True) # '$VWUFACTOR' on line 21, col 39
            if _v is not None: write(_filter(_v, rawExpr='$VWUFACTOR')) # from line 21, col 39.
            _filter = _orig_filter_69085551
            write(''' ''')
            _v = VFFSL(SL,"MWUCODE",True) # '$MWUCODE' on line 21, col 62
            if _v is not None: write(_filter(_v, rawExpr='$MWUCODE')) # from line 21, col 62.
            write(''' </b><br>
''')
        write('''    <br>

''')
        if VFFSL(SL,"SPCODE",True)!='TRASH': # generated from line 25, col 5
            if VFFSL(SL,"varExists",False)('$datalist') and VFFSL(SL,"datalist",True) and len(VFFSL(SL,"datalist",True))>0: # generated from line 26, col 10
                wuamount = 0
                amount = 0
                write('''        <form action=taskLPalletWaresSave method=post>
            <input type=hidden name=wid value=''')
                _v = VFFSL(SL,"wid",True) # '$wid' on line 30, col 47
                if _v is not None: write(_filter(_v, rawExpr='$wid')) # from line 30, col 47.
                write('''>
            <input type=hidden name=pid value=''')
                _v = VFFSL(SL,"pid",True) # '$pid' on line 31, col 47
                if _v is not None: write(_filter(_v, rawExpr='$pid')) # from line 31, col 47.
                write('''>
            <input type=hidden name=tid value=''')
                _v = VFFSL(SL,"tid",True) # '$tid' on line 32, col 47
                if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 32, col 47.
                write('''>
            <table>
                <thead>
                    <tr>
                        <th>''')
                if False:
                    _('Дата')
                _v = VFFSL(SL,"_",False)('Дата') # "$_('\xc4\xe0\xf2\xe0')" on line 36, col 29
                if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xe0\xf2\xe0')")) # from line 36, col 29.
                write('''</th>
                        <th>
                            <select name=wuid id=":focus:">
                                <option value=''')
                _v = VFFSL(SL,"MWUID",True) # '$MWUID' on line 39, col 47
                if _v is not None: write(_filter(_v, rawExpr='$MWUID')) # from line 39, col 47.
                write(''' selected>''')
                _v = VFFSL(SL,"MWUCODE",True) # '$MWUCODE' on line 39, col 63
                if _v is not None: write(_filter(_v, rawExpr='$MWUCODE')) # from line 39, col 63.
                write('''</option>
''')
                if VFFSL(SL,"VWUID",True): # generated from line 40, col 31
                    write('''                                <option value=''')
                    _v = VFFSL(SL,"VWUID",True) # '$VWUID' on line 41, col 47
                    if _v is not None: write(_filter(_v, rawExpr='$VWUID')) # from line 41, col 47.
                    write('''>''')
                    _v = VFFSL(SL,"VWUCODE",True) # '$VWUCODE' on line 41, col 54
                    if _v is not None: write(_filter(_v, rawExpr='$VWUCODE')) # from line 41, col 54.
                    write('''</option>
''')
                write('''                            </select>
                        </th>
                        <th>''')
                if False:
                    _('Quant.')
                _v = VFFSL(SL,"_",False)('Quant.') # "$_('Quant.')" on line 45, col 29
                if _v is not None: write(_filter(_v, rawExpr="$_('Quant.')")) # from line 45, col 29.
                write('''</th>
                    <tr>
                </thead>
                <tbody>
''')
                for item in VFFSL(SL,"datalist",True): # generated from line 49, col 17
                    if VFFSL(SL,"item.canedit",True) == '0': # generated from line 50, col 21
                        trClass = 'class="inactive"'
                    else: # generated from line 52, col 21
                        trClass = ''
                    write('''                    <tr ''')
                    _v = VFFSL(SL,"trClass",True) # '$trClass' on line 55, col 25
                    if _v is not None: write(_filter(_v, rawExpr='$trClass')) # from line 55, col 25.
                    write('''>
                        <td>''')
                    _orig_filter_87032806 = _filter
                    filterName = 'DateFilter2'
                    if self._CHEETAH__filters.has_key("DateFilter2"):
                        _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                    else:
                        _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                    _v = VFFSL(SL,"item.productdate",True) # '$item.productdate' on line 56, col 48
                    if _v is not None: write(_filter(_v, rawExpr='$item.productdate')) # from line 56, col 48.
                    _filter = _orig_filter_87032806
                    write('''</td>
''')
                    if VFFSL(SL,"item.canedit",True) == '1': # generated from line 57, col 23
                        write('''                        <td><input type="text" name="WL_''')
                        _v = VFFSL(SL,"item.WLOTID",True) # '$item.WLOTID' on line 58, col 57
                        if _v is not None: write(_filter(_v, rawExpr='$item.WLOTID')) # from line 58, col 57.
                        write('''" id="::float" value="''')
                        _orig_filter_98570381 = _filter
                        filterName = 'Quantity'
                        if self._CHEETAH__filters.has_key("Quantity"):
                            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                        else:
                            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                        _v = VFFSL(SL,"item.AMOUNT",True) # '$item.AMOUNT' on line 58, col 107
                        if _v is not None: write(_filter(_v, rawExpr='$item.AMOUNT')) # from line 58, col 107.
                        _filter = _orig_filter_98570381
                        write('''" size="4"></td>
''')
                    else: # generated from line 59, col 23
                        write('''                        <td><a href=\'#\' title="">''')
                        _orig_filter_17544364 = _filter
                        filterName = 'Quantity'
                        if self._CHEETAH__filters.has_key("Quantity"):
                            _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                        else:
                            _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                        _v = VFFSL(SL,"item.AMOUNT",True) # '$item.AMOUNT' on line 60, col 66
                        if _v is not None: write(_filter(_v, rawExpr='$item.AMOUNT')) # from line 60, col 66.
                        _filter = _orig_filter_17544364
                        write('''</a></td>
''')
                    write('''                        <td>''')
                    _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.AMOUNT",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($item.AMOUNT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 62, col 29
                    if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.AMOUNT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 62, col 29.
                    write('''(<b><u>''')
                    _orig_filter_15575396 = _filter
                    filterName = 'Quantity'
                    if self._CHEETAH__filters.has_key("Quantity"):
                        _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                    else:
                        _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                    _v = VFFSL(SL,"item.AMOUNT",True) # '$item.AMOUNT' on line 62, col 119
                    if _v is not None: write(_filter(_v, rawExpr='$item.AMOUNT')) # from line 62, col 119.
                    _filter = _orig_filter_15575396
                    write('''</u></b>)</td>
                    </tr>
''')
                    amount += float(VFFSL(SL,"item.AMOUNT",True))
                write('''                </tbody>
                <tfoot>
                    <tr>
                        <th>''')
                if False:
                    _('Итого')
                _v = VFFSL(SL,"_",False)('Итого') # "$_('\xc8\xf2\xee\xe3\xee')" on line 69, col 29
                if _v is not None: write(_filter(_v, rawExpr="$_('\xc8\xf2\xee\xe3\xee')")) # from line 69, col 29.
                write(''':</th>
                        <th colspan=2>''')
                _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"amount",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($amount,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 70, col 39
                if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($amount,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 70, col 39.
                write('''(<b><u>''')
                _orig_filter_93580961 = _filter
                filterName = 'Quantity'
                if self._CHEETAH__filters.has_key("Quantity"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"amount",True) # '$amount' on line 70, col 124
                if _v is not None: write(_filter(_v, rawExpr='$amount')) # from line 70, col 124.
                _filter = _orig_filter_93580961
                write('''</u></b>)</th>
                    </tr>
                </tfoot>
            </table>
            <input type="submit" value="''')
                if False:
                    _('Сохранить')
                _v = VFFSL(SL,"_",False)('Сохранить') # "$_('\xd1\xee\xf5\xf0\xe0\xed\xe8\xf2\xfc')" on line 74, col 41
                if _v is not None: write(_filter(_v, rawExpr="$_('\xd1\xee\xf5\xf0\xe0\xed\xe8\xf2\xfc')")) # from line 74, col 41.
                write('''">
        </form>
''')
            write('''        <br>

        <a href="taskLPalletWaresAdd?pid=''')
            _v = VFFSL(SL,"PID",True) # '$PID' on line 79, col 42
            if _v is not None: write(_filter(_v, rawExpr='$PID')) # from line 79, col 42.
            write('''&wid=''')
            _v = VFFSL(SL,"WID",True) # '$WID' on line 79, col 51
            if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 79, col 51.
            write('''&tid=''')
            _v = VFFSL(SL,"tid",True) # '$tid' on line 79, col 60
            if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 79, col 60.
            write('''">''')
            if False:
                _('Новая партия')
            _v = VFFSL(SL,"_",False)('Новая партия') # "$_('\xcd\xee\xe2\xe0\xff \xef\xe0\xf0\xf2\xe8\xff')" on line 79, col 66
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xee\xe2\xe0\xff \xef\xe0\xf0\xf2\xe8\xff')")) # from line 79, col 66.
            write('''</a>

''')
        else: # generated from line 81, col 5
            if VFFSL(SL,"varExists",False)('$datalist') and VFFSL(SL,"datalist",True) and len(VFFSL(SL,"datalist",True))>0: # generated from line 82, col 5
                amount = 0
                write('''        <table>
            <thead>
                <tr>
                    <th>''')
                if False:
                    _('Дата')
                _v = VFFSL(SL,"_",False)('Дата') # "$_('\xc4\xe0\xf2\xe0')" on line 87, col 25
                if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xe0\xf2\xe0')")) # from line 87, col 25.
                write('''</th>
                    <th>''')
                if False:
                    _('Кол-во')
                _v = VFFSL(SL,"_",False)('Кол-во') # "$_('\xca\xee\xeb-\xe2\xee')" on line 88, col 25
                if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xee\xeb-\xe2\xee')")) # from line 88, col 25.
                write('''</th>
                <tr>
            </thead>
            <tbody>
''')
                for item in VFFSL(SL,"datalist",True): # generated from line 92, col 13
                    write('''                <tr>
                    <td>''')
                    _orig_filter_74636709 = _filter
                    filterName = 'DateFilter2'
                    if self._CHEETAH__filters.has_key("DateFilter2"):
                        _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                    else:
                        _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                    _v = VFFSL(SL,"item.productdate",True) # '$item.productdate' on line 94, col 45
                    if _v is not None: write(_filter(_v, rawExpr='$item.productdate')) # from line 94, col 45.
                    write(''' ''')
                    _filter = _orig_filter_74636709
                    write('''</td>
                    <td>''')
                    _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.AMOUNT",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($item.AMOUNT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 95, col 25
                    if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.AMOUNT,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 95, col 25.
                    write('''(<b><u>''')
                    _orig_filter_84484276 = _filter
                    filterName = 'Quantity'
                    if self._CHEETAH__filters.has_key("Quantity"):
                        _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                    else:
                        _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                    _v = VFFSL(SL,"item.AMOUNT",True) # '$item.AMOUNT' on line 95, col 115
                    if _v is not None: write(_filter(_v, rawExpr='$item.AMOUNT')) # from line 95, col 115.
                    _filter = _orig_filter_84484276
                    write('''</u></b>)</td>
                </tr>
''')
                    amount += float(VFFSL(SL,"item.AMOUNT",True))
                write('''            </tbody>
            <tfoot>
                <tr>
                    <th>''')
                if False:
                    _('Итого')
                _v = VFFSL(SL,"_",False)('Итого') # "$_('\xc8\xf2\xee\xe3\xee')" on line 102, col 25
                if _v is not None: write(_filter(_v, rawExpr="$_('\xc8\xf2\xee\xe3\xee')")) # from line 102, col 25.
                write(''':</th>
                    <th>''')
                _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"amount",True),VFFSL(SL,"VWUFACTOR",True),VFFSL(SL,"VWUCODE",True),VFFSL(SL,"MWUFACTOR",True),VFFSL(SL,"MWUCODE",True)) # '$viewQuantity($amount,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)' on line 103, col 25
                if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($amount,$VWUFACTOR,$VWUCODE,$MWUFACTOR,$MWUCODE)')) # from line 103, col 25.
                write('''(<b><u>''')
                _orig_filter_81630556 = _filter
                filterName = 'Quantity'
                if self._CHEETAH__filters.has_key("Quantity"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.AMOUNT",True) # '$item.AMOUNT' on line 103, col 110
                if _v is not None: write(_filter(_v, rawExpr='$item.AMOUNT')) # from line 103, col 110.
                _filter = _orig_filter_81630556
                write('''</u></b>)</th>
                </tr>
            </tfoot>
        </table>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskLPalletWares= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskLPalletWares, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskLPalletWares, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskLPalletWares)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskLPalletWares()).run()


