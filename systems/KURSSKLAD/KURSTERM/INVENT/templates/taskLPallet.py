#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main
from systems.KURSSKLAD.cheetahutils import viewQuantity

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336169.4649999
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:49 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\INVENT\\templates\\taskLPallet.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskLPallet(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 5, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''\t<form action="taskLPallet">
        <input type=hidden name=pid value=''')
        _v = VFFSL(SL,"PID",True) # '$PID' on line 7, col 43
        if _v is not None: write(_filter(_v, rawExpr='$PID')) # from line 7, col 43.
        write('''>
        <input type=hidden name=tid value=''')
        _v = VFFSL(SL,"TID",True) # '$TID' on line 8, col 43
        if _v is not None: write(_filter(_v, rawExpr='$TID')) # from line 8, col 43.
        write('''>
        <input type=hidden name=wid value=''')
        _v = VFFSL(SL,"WID",True) # '$WID' on line 9, col 43
        if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 9, col 43.
        write('''>
        ''')
        if False:
            _('ШК')
        _v = VFFSL(SL,"_",False)('ШК') # "$_('\xd8\xca')" on line 10, col 9
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd8\xca')")) # from line 10, col 9.
        write(''': <input type=text id=":scan:text" name=barcode value="" title="''')
        if False:
            _('МП')
        _v = VFFSL(SL,"_",False)('МП') # "$_('\xcc\xcf')" on line 10, col 81
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcc\xcf')")) # from line 10, col 81.
        write('''"><br>
\t</form>

    <br>
''')
        if VFFSL(SL,"varExists",False)('$PNUM') and VFFSL(SL,"PNUM",True): # generated from line 14, col 2
            write('''\t\t<b><u>''')
            _v = VFFSL(SL,"PNUM",True) # '$PNUM' on line 15, col 9
            if _v is not None: write(_filter(_v, rawExpr='$PNUM')) # from line 15, col 9.
            write('''</u></b>(''')
            _v = VFFSL(SL,"SNAME",True) # '$SNAME' on line 15, col 23
            if _v is not None: write(_filter(_v, rawExpr='$SNAME')) # from line 15, col 23.
            write(''')
''')
        else: # generated from line 16, col 2
            write('''\t    <b>''')
            _v = VFFSL(SL,"SNAME",True) # '$SNAME' on line 17, col 9
            if _v is not None: write(_filter(_v, rawExpr='$SNAME')) # from line 17, col 9.
            write('''</b>
''')
        write('''    <a href="taskLPalletWaresAdd?pid=''')
        _v = VFFSL(SL,"PID",True) # '$PID' on line 19, col 38
        if _v is not None: write(_filter(_v, rawExpr='$PID')) # from line 19, col 38.
        write('''&wid=''')
        _v = VFFSL(SL,"WID",True) # '$WID' on line 19, col 47
        if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 19, col 47.
        write('''&tid=''')
        _v = VFFSL(SL,"tid",True) # '$tid' on line 19, col 56
        if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 19, col 56.
        write('''">+</a>
    <br><br>
''')
        if VFFSL(SL,"varExists",False)('$datalist'): # generated from line 21, col 5
            write('''        <table>
            <thead>
                <tr>
                    <th>''')
            if False:
                _('Товар')
            _v = VFFSL(SL,"_",False)('Товар') # "$_('\xd2\xee\xe2\xe0\xf0')" on line 25, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd2\xee\xe2\xe0\xf0')")) # from line 25, col 25.
            write('''</th>
                    <th>''')
            if False:
                _('Кол-во')
            _v = VFFSL(SL,"_",False)('Кол-во') # "$_('\xca\xee\xeb-\xe2\xee')" on line 26, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xee\xeb-\xe2\xee')")) # from line 26, col 25.
            write('''</th>
''')
            if VFFSL(SL,"varExists",False)('$TASKID') and VFFSL(SL,"TASKID",True): # generated from line 27, col 17
                write('''                    <th>&nbsp;</th>
''')
            write('''                <tr>
            </thead>
            <tbody>
''')
            for item in VFFSL(SL,"datalist",True): # generated from line 33, col 13
                write('''                <tr>
                <td><a href="taskLPalletWares?pid=''')
                _v = VFFSL(SL,"PID",True) # '$PID' on line 35, col 51
                if _v is not None: write(_filter(_v, rawExpr='$PID')) # from line 35, col 51.
                write('''&wid=''')
                _v = VFFSL(SL,"item.WID",True) # '$item.WID' on line 35, col 60
                if _v is not None: write(_filter(_v, rawExpr='$item.WID')) # from line 35, col 60.
                write('''&tid=''')
                _v = VFFSL(SL,"tid",True) # '$tid' on line 35, col 74
                if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 35, col 74.
                write('''" title="''')
                _v = VFN(VFFSL(SL,"item.WNAME",True),"replace",False)('"',"'") # '$item.WNAME.replace(\'"\',"\'")' on line 35, col 87
                if _v is not None: write(_filter(_v, rawExpr='$item.WNAME.replace(\'"\',"\'")')) # from line 35, col 87.
                write('''">''')
                _v = VFFSL(SL,"item.WCODE",True) # '$item.WCODE' on line 35, col 117
                if _v is not None: write(_filter(_v, rawExpr='$item.WCODE')) # from line 35, col 117.
                write('''</a></td>

                <td>''')
                _v = VFFSL(SL,"viewQuantity",False)(VFFSL(SL,"item.amount",True),VFFSL(SL,"item.VUFACTOR",True),VFFSL(SL,"item.VUCODE",True),VFFSL(SL,"item.MUFACTOR",True),VFFSL(SL,"item.MUCODE",True)) # '$viewQuantity($item.amount,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)' on line 37, col 21
                if _v is not None: write(_filter(_v, rawExpr='$viewQuantity($item.amount,$item.VUFACTOR,$item.VUCODE,$item.MUFACTOR,$item.MUCODE)')) # from line 37, col 21.
                write('''
                    (<b><u>''')
                _orig_filter_51735220 = _filter
                filterName = 'Quantity'
                if self._CHEETAH__filters.has_key("Quantity"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.amount",True) # '$item.amount' on line 38, col 44
                if _v is not None: write(_filter(_v, rawExpr='$item.amount')) # from line 38, col 44.
                _filter = _orig_filter_51735220
                write('''</u></b>)
                </td>

                </tr>
''')
            write('''            </tbody>
        </table>
        <br>
''')
        write('''


    <a href="javascript: if (confirm(\'''')
        if False:
            _('Вы  уверены?')
        _v = VFFSL(SL,"_",False)('Вы  уверены?') # "$_('\xc2\xfb  \xf3\xe2\xe5\xf0\xe5\xed\xfb?')" on line 50, col 39
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc2\xfb  \xf3\xe2\xe5\xf0\xe5\xed\xfb?')")) # from line 50, col 39.
        write("""')) location.href='taskLPalletDelete?tid=""")
        _v = VFFSL(SL,"tid",True) # '$tid' on line 50, col 98
        if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 50, col 98.
        write('''&pid=''')
        _v = VFFSL(SL,"pid",True) # '$pid' on line 50, col 107
        if _v is not None: write(_filter(_v, rawExpr='$pid')) # from line 50, col 107.
        write('''&wid=''')
        _v = VFFSL(SL,"wid",True) # '$wid' on line 50, col 116
        if _v is not None: write(_filter(_v, rawExpr='$wid')) # from line 50, col 116.
        write('''\'">''')
        if False:
            _('Паллет не найден')
        _v = VFFSL(SL,"_",False)('Паллет не найден') # "$_('\xcf\xe0\xeb\xeb\xe5\xf2 \xed\xe5 \xed\xe0\xe9\xe4\xe5\xed')" on line 50, col 123
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xe0\xeb\xeb\xe5\xf2 \xed\xe5 \xed\xe0\xe9\xe4\xe5\xed')")) # from line 50, col 123.
        write('''</a><br>
    <a href="javascript: if (confirm(\'''')
        if False:
            _('Вы  уверены?')
        _v = VFFSL(SL,"_",False)('Вы  уверены?') # "$_('\xc2\xfb  \xf3\xe2\xe5\xf0\xe5\xed\xfb?')" on line 51, col 39
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc2\xfb  \xf3\xe2\xe5\xf0\xe5\xed\xfb?')")) # from line 51, col 39.
        write("""')) location.href='taskLEndPallet?tid=""")
        _v = VFFSL(SL,"tid",True) # '$tid' on line 51, col 95
        if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 51, col 95.
        write('''&pid=''')
        _v = VFFSL(SL,"pid",True) # '$pid' on line 51, col 104
        if _v is not None: write(_filter(_v, rawExpr='$pid')) # from line 51, col 104.
        write('''\'">''')
        if False:
            _('Завершить')
        _v = VFFSL(SL,"_",False)('Завершить') # "$_('\xc7\xe0\xe2\xe5\xf0\xf8\xe8\xf2\xfc')" on line 51, col 111
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc7\xe0\xe2\xe5\xf0\xf8\xe8\xf2\xfc')")) # from line 51, col 111.
        write('''</a>

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskLPallet= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskLPallet, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskLPallet, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskLPallet)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskLPallet()).run()


