#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336169.3699999
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:49 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\INVENT\\templates\\taskAPalletWaresAdd.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class taskAPalletWaresAdd(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData at line 3, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        if VFFSL(SL,"PNUM",True): # generated from line 4, col 5
            write('''        ''')
            if False:
                _('Поддон')
            _v = VFFSL(SL,"_",False)('Поддон') # "$_('\xcf\xee\xe4\xe4\xee\xed')" on line 5, col 9
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xee\xe4\xe4\xee\xed')")) # from line 5, col 9.
            write(''': <b><u>''')
            _v = VFFSL(SL,"PNUM",True) # '$PNUM' on line 5, col 29
            if _v is not None: write(_filter(_v, rawExpr='$PNUM')) # from line 5, col 29.
            write('''</u></b>(''')
            _v = VFFSL(SL,"SNAME",True) # '$SNAME' on line 5, col 43
            if _v is not None: write(_filter(_v, rawExpr='$SNAME')) # from line 5, col 43.
            write(''')<br>
''')
        else: # generated from line 6, col 5
            write('''        <b><u>''')
            _v = VFFSL(SL,"SNAME",True) # '$SNAME' on line 7, col 15
            if _v is not None: write(_filter(_v, rawExpr='$SNAME')) # from line 7, col 15.
            write('''</u></b><br>
''')
        write('''    <b>(<u>''')
        _v = VFFSL(SL,"WCODE",True) # '$WCODE' on line 9, col 12
        if _v is not None: write(_filter(_v, rawExpr='$WCODE')) # from line 9, col 12.
        write('''</u>) </b> ''')
        _v = VFFSL(SL,"WNAME",True) # '$WNAME' on line 9, col 29
        if _v is not None: write(_filter(_v, rawExpr='$WNAME')) # from line 9, col 29.
        write('''<br>
    <hr>
    <form action="taskAPalletWaresAdd" name="frm"  method=post>
        <input type=hidden name=wid value=''')
        _v = VFFSL(SL,"WID",True) # '$WID' on line 12, col 43
        if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 12, col 43.
        write('''>
        <input type=hidden name=pid value=''')
        _v = VFFSL(SL,"PID",True) # '$PID' on line 13, col 43
        if _v is not None: write(_filter(_v, rawExpr='$PID')) # from line 13, col 43.
        write('''>
        <input type=hidden name=tid value=''')
        _v = VFFSL(SL,"tid",True) # '$tid' on line 14, col 43
        if _v is not None: write(_filter(_v, rawExpr='$tid')) # from line 14, col 43.
        write('''>
        <select name=wuid>
''')
        if VFFSL(SL,"wuid",True)==VFFSL(SL,"MWUID",True): # generated from line 16, col 11
            write('''            <option value=''')
            _v = VFFSL(SL,"MWUID",True) # '$MWUID' on line 17, col 27
            if _v is not None: write(_filter(_v, rawExpr='$MWUID')) # from line 17, col 27.
            write(''' selected>''')
            _v = VFFSL(SL,"MWUCODE",True) # '$MWUCODE' on line 17, col 43
            if _v is not None: write(_filter(_v, rawExpr='$MWUCODE')) # from line 17, col 43.
            write('''</option>
''')
        if VFFSL(SL,"VWUID",True): # generated from line 19, col 11
            write('''            <option value=''')
            _v = VFFSL(SL,"VWUID",True) # '$VWUID' on line 20, col 27
            if _v is not None: write(_filter(_v, rawExpr='$VWUID')) # from line 20, col 27.
            write('''>''')
            _v = VFFSL(SL,"VWUCODE",True) # '$VWUCODE' on line 20, col 34
            if _v is not None: write(_filter(_v, rawExpr='$VWUCODE')) # from line 20, col 34.
            write('''</option>
''')
        if VFFSL(SL,"wuid",True) != VFFSL(SL,"MWUID",True): # generated from line 22, col 11
            write('''            <option value=''')
            _v = VFFSL(SL,"MWUID",True) # '$MWUID' on line 23, col 27
            if _v is not None: write(_filter(_v, rawExpr='$MWUID')) # from line 23, col 27.
            write('''>''')
            _v = VFFSL(SL,"MWUCODE",True) # '$MWUCODE' on line 23, col 34
            if _v is not None: write(_filter(_v, rawExpr='$MWUCODE')) # from line 23, col 34.
            write('''</option>
''')
        write('''        </select>:
        <input type="text" name="amount" id=":focus:float" value="''')
        _v = VFFSL(SL,"amount",True) # '$amount' on line 26, col 67
        if _v is not None: write(_filter(_v, rawExpr='$amount')) # from line 26, col 67.
        write('''" size="6"><br><br>
        ''')
        if False:
            _('Дата')
        _v = VFFSL(SL,"_",False)('Дата') # "$_('\xc4\xe0\xf2\xe0')" on line 27, col 9
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xe0\xf2\xe0')")) # from line 27, col 9.
        write(''': <input type="text" name="productdate" id="::date" value="''')
        _v = VFFSL(SL,"productdate",True) # '$productdate' on line 27, col 78
        if _v is not None: write(_filter(_v, rawExpr='$productdate')) # from line 27, col 78.
        write('''" size="6"><br>
        <hr>
        <input type=submit value="''')
        if False:
            _('Сохранить')
        _v = VFFSL(SL,"_",False)('Сохранить') # "$_('\xd1\xee\xf5\xf0\xe0\xed\xe8\xf2\xfc')" on line 29, col 35
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd1\xee\xf5\xf0\xe0\xed\xe8\xf2\xfc')")) # from line 29, col 35.
        write('''">
    </form>

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_taskAPalletWaresAdd= 'writeBody'

## END CLASS DEFINITION

if not hasattr(taskAPalletWaresAdd, '_initCheetahAttributes'):
    templateAPIClass = getattr(taskAPalletWaresAdd, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(taskAPalletWaresAdd)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=taskAPalletWaresAdd()).run()


