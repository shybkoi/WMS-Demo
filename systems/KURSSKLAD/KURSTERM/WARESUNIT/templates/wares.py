#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main
from systems.KURSSKLAD.cheetahutils import viewQuantity

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336171.441
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:51 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\WARESUNIT\\templates\\wares.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class wares(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData     at line 5, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''    <b><u>(''')
        _v = VFFSL(SL,"WCODE",True) # '$WCODE' on line 6, col 12
        if _v is not None: write(_filter(_v, rawExpr='$WCODE')) # from line 6, col 12.
        write(''')</u></b>''')
        _v = VFFSL(SL,"WNAME",True) # '$WNAME' on line 6, col 27
        if _v is not None: write(_filter(_v, rawExpr='$WNAME')) # from line 6, col 27.
        write('''<br>
''')
        if VFFSL(SL,"VWUID",True): # generated from line 7, col 5
            write('''        <b>''')
            _v = VFFSL(SL,"VWUCODE",True) # '$VWUCODE' on line 8, col 12
            if _v is not None: write(_filter(_v, rawExpr='$VWUCODE')) # from line 8, col 12.
            write(''' = ''')
            _orig_filter_47214740 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"VWUFACTOR",True) # '$VWUFACTOR' on line 8, col 39
            if _v is not None: write(_filter(_v, rawExpr='$VWUFACTOR')) # from line 8, col 39.
            _filter = _orig_filter_47214740
            write(''' ''')
            _v = VFFSL(SL,"MWUCODE",True) # '$MWUCODE' on line 8, col 62
            if _v is not None: write(_filter(_v, rawExpr='$MWUCODE')) # from line 8, col 62.
            write(''' </b>
''')
        if VFFSL(SL,"WSITEID",True): # generated from line 10, col 5
            write('''        <font color="gray"><b>''')
            _v = VFFSL(SL,"WSITENAME",True) # '$WSITENAME' on line 11, col 31
            if _v is not None: write(_filter(_v, rawExpr='$WSITENAME')) # from line 11, col 31.
            write('''</b></font>
''')
        write('''    
''')
        if VFFSL(SL,"varExists",False)('$datalist') and VFFSL(SL,"datalist",True): # generated from line 14, col 5
            write('''      <table>
        <thead>
          <tr>
            <th>''')
            if False:
                _('Кр-ть')
            _v = VFFSL(SL,"_",False)('Кр-ть') # "$_('\xca\xf0-\xf2\xfc')" on line 18, col 17
            if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xf0-\xf2\xfc')")) # from line 18, col 17.
            write('''</th>
            <th>''')
            if False:
                _('ЕИ')
            _v = VFFSL(SL,"_",False)('ЕИ') # "$_('\xc5\xc8')" on line 19, col 17
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc5\xc8')")) # from line 19, col 17.
            write('''</th>
            <th>''')
            if False:
                _('ШК')
            _v = VFFSL(SL,"_",False)('ШК') # "$_('\xd8\xca')" on line 20, col 17
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd8\xca')")) # from line 20, col 17.
            write('''</th>
          </tr>
        <tbody>
''')
            for item in VFFSL(SL,"datalist",True): # generated from line 23, col 9
                write('''          <tr>
            <td>''')
                _orig_filter_74239664 = _filter
                filterName = 'Quantity'
                if self._CHEETAH__filters.has_key("Quantity"):
                    _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
                else:
                    _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
                _v = VFFSL(SL,"item.WUFACTOR",True) # '$item.WUFACTOR' on line 25, col 33
                if _v is not None: write(_filter(_v, rawExpr='$item.WUFACTOR')) # from line 25, col 33.
                _filter = _orig_filter_74239664
                write('''</td>
            <td><a href="wuWaresUnit?wid=''')
                _v = VFFSL(SL,"WID",True) # '$WID' on line 26, col 42
                if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 26, col 42.
                write('''&uid=''')
                _v = VFFSL(SL,"item.UID",True) # '$item.UID' on line 26, col 51
                if _v is not None: write(_filter(_v, rawExpr='$item.UID')) # from line 26, col 51.
                write('''">''')
                _v = VFFSL(SL,"item.UCODE",True) # '$item.UCODE' on line 26, col 62
                if _v is not None: write(_filter(_v, rawExpr='$item.UCODE')) # from line 26, col 62.
                write('''</a></td>
''')
                if VFFSL(SL,"item.WUBARCODES",True): # generated from line 27, col 11
                    write('''            <td>
''')
                    bcSplit = VFN(VFFSL(SL,"item.WUBARCODES",True),"split",False)(';')
                    i = 0
                    for bc in VFFSL(SL,"bcSplit",True): # generated from line 31, col 17
                        if VFFSL(SL,"i",True)>0: # generated from line 32, col 21
                            write('''                        <br>
''')
                        write('''                    ''')
                        _v = VFFSL(SL,"bc",True) # '$bc' on line 35, col 21
                        if _v is not None: write(_filter(_v, rawExpr='$bc')) # from line 35, col 21.
                        write('''
''')
                        i += 1
                    write('''            </td>
''')
                else: # generated from line 39, col 11
                    write('''            <td>&nbsp;</td>
''')
                write('''          </tr>
''')
            write('''        </tbody>
      </table>
''')
        write('''    
    <a href="wuWaresGetUnits?wid=''')
        _v = VFFSL(SL,"WID",True) # '$WID' on line 48, col 34
        if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 48, col 34.
        write('''">''')
        if False:
            _('Добавить')
        _v = VFFSL(SL,"_",False)('Добавить') # "$_('\xc4\xee\xe1\xe0\xe2\xe8\xf2\xfc')" on line 48, col 40
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xee\xe1\xe0\xe2\xe8\xf2\xfc')")) # from line 48, col 40.
        write('''</a>
    
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_wares= 'writeBody'

## END CLASS DEFINITION

if not hasattr(wares, '_initCheetahAttributes'):
    templateAPIClass = getattr(wares, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(wares)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=wares()).run()


