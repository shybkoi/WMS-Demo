#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.KURSSKLAD.KURSTERM.templates.main import main
from systems.KURSSKLAD.cheetahutils import viewQuantity

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336171.395
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:51 2016'
__CHEETAH_src__ = 'systems\\KURSSKLAD\\KURSTERM\\WARESUNIT\\templates\\barcodes.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class barcodes(main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def mainData(self, **KWS):



        ## CHEETAH: generated from #def mainData     at line 5, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''    <b><u>(''')
        _v = VFFSL(SL,"WCODE",True) # '$WCODE' on line 6, col 12
        if _v is not None: write(_filter(_v, rawExpr='$WCODE')) # from line 6, col 12.
        write(''')</u></b>''')
        _v = VFFSL(SL,"WNAME",True) # '$WNAME' on line 6, col 27
        if _v is not None: write(_filter(_v, rawExpr='$WNAME')) # from line 6, col 27.
        write('''<br>
''')
        if VFFSL(SL,"WUID",True) == VFFSL(SL,"MWUCODE",True): # generated from line 7, col 5
            write('''        <b>''')
            _v = VFFSL(SL,"UCODE",True) # '$UCODE' on line 8, col 12
            if _v is not None: write(_filter(_v, rawExpr='$UCODE')) # from line 8, col 12.
            write('''</b>
''')
        else: # generated from line 9, col 5
            write('''        <b>''')
            _v = VFFSL(SL,"UCODE",True) # '$UCODE' on line 10, col 12
            if _v is not None: write(_filter(_v, rawExpr='$UCODE')) # from line 10, col 12.
            write(''' = ''')
            _orig_filter_73093900 = _filter
            filterName = 'Quantity'
            if self._CHEETAH__filters.has_key("Quantity"):
                _filter = self._CHEETAH__currentFilter = self._CHEETAH__filters[filterName]
            else:
                _filter = self._CHEETAH__currentFilter = \
			self._CHEETAH__filters[filterName] = getattr(self._CHEETAH__filtersLib, filterName)(self).filter
            _v = VFFSL(SL,"WUFACTOR",True) # '$WUFACTOR' on line 10, col 37
            if _v is not None: write(_filter(_v, rawExpr='$WUFACTOR')) # from line 10, col 37.
            _filter = _orig_filter_73093900
            write(''' ''')
            _v = VFFSL(SL,"MWUCODE",True) # '$MWUCODE' on line 10, col 59
            if _v is not None: write(_filter(_v, rawExpr='$MWUCODE')) # from line 10, col 59.
            write(''' </b>
''')
        if VFFSL(SL,"WSITEID",True): # generated from line 12, col 5
            write('''        <font color="gray"><b>''')
            _v = VFFSL(SL,"WSITENAME",True) # '$WSITENAME' on line 13, col 31
            if _v is not None: write(_filter(_v, rawExpr='$WSITENAME')) # from line 13, col 31.
            write('''</b></font>
''')
        write('''    <hr>
    <form action=wuSetBarcodes>
        <input type=hidden name=uid value=''')
        _v = VFFSL(SL,"UID",True) # '$UID' on line 17, col 43
        if _v is not None: write(_filter(_v, rawExpr='$UID')) # from line 17, col 43.
        write('''>
        <input type=hidden name=wid value=''')
        _v = VFFSL(SL,"WID",True) # '$WID' on line 18, col 43
        if _v is not None: write(_filter(_v, rawExpr='$WID')) # from line 18, col 43.
        write('''>
''')
        if VFFSL(SL,"varExists",False)('$datalist') and VFFSL(SL,"datalist",True): # generated from line 19, col 9
            for item in VFFSL(SL,"datalist",True): # generated from line 20, col 11
                if VFFSL(SL,"item.ORIGIN",True) == '0': # generated from line 21, col 13
                    write('''                <input size=20 style="text-align:center;" type=text name=wbcid''')
                    _v = VFFSL(SL,"item.id",True) # '$item.id' on line 22, col 79
                    if _v is not None: write(_filter(_v, rawExpr='$item.id')) # from line 22, col 79.
                    write(''' value="''')
                    _v = VFFSL(SL,"item.barcode",True) # '$item.barcode' on line 22, col 95
                    if _v is not None: write(_filter(_v, rawExpr='$item.barcode')) # from line 22, col 95.
                    write('''"><br>
''')
                else: # generated from line 23, col 13
                    write('''                <input size=20 style="text-align:center;" readonly type=text name=wbcid''')
                    _v = VFFSL(SL,"item.id",True) # '$item.id' on line 24, col 88
                    if _v is not None: write(_filter(_v, rawExpr='$item.id')) # from line 24, col 88.
                    write(''' value="''')
                    _v = VFFSL(SL,"item.barcode",True) # '$item.barcode' on line 24, col 104
                    if _v is not None: write(_filter(_v, rawExpr='$item.barcode')) # from line 24, col 104.
                    write('''"><br>
''')
            write('''          <br>
''')
        write('''        ''')
        if False:
            _('Новый ШК')
        _v = VFFSL(SL,"_",False)('Новый ШК') # "$_('\xcd\xee\xe2\xfb\xe9 \xd8\xca')" on line 29, col 9
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xee\xe2\xfb\xe9 \xd8\xca')")) # from line 29, col 9.
        write(''': <input type=text name=wbcid0 value="" size=13>
        <br>
        <input type=submit value="''')
        if False:
            _('Сохранить')
        _v = VFFSL(SL,"_",False)('Сохранить') # "$_('\xd1\xee\xf5\xf0\xe0\xed\xe8\xf2\xfc')" on line 31, col 35
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd1\xee\xf5\xf0\xe0\xed\xe8\xf2\xfc')")) # from line 31, col 35.
        write('''">
    </form>
   
    
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_barcodes= 'writeBody'

## END CLASS DEFINITION

if not hasattr(barcodes, '_initCheetahAttributes'):
    templateAPIClass = getattr(barcodes, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(barcodes)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=barcodes()).run()


