#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336166.1159999
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:46 2016'
__CHEETAH_src__ = 'systems\\ENGINE\\ADMINPANEL\\templates\\admin_roles_options.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:12 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class admin_roles_options(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        Template.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''<div class="full_height">
    <div id="dlgroleoptions_caption"></div>
    <br/>
    <table id="dlgroleoptions_tbl">
      <thead>
      <tr>
        <th>''')
        if False:
            _('Тип')
        _v = VFFSL(SL,"_",False)('Тип') # "$_('\xd2\xe8\xef')" on line 8, col 13
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd2\xe8\xef')")) # from line 8, col 13.
        write('''</th>
        <th>''')
        if False:
            _('Объект')
        _v = VFFSL(SL,"_",False)('Объект') # "$_('\xce\xe1\xfa\xe5\xea\xf2')" on line 9, col 13
        if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xe1\xfa\xe5\xea\xf2')")) # from line 9, col 13.
        write('''</th>
        <th>''')
        if False:
            _('Опция')
        _v = VFFSL(SL,"_",False)('Опция') # "$_('\xce\xef\xf6\xe8\xff')" on line 10, col 13
        if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xef\xf6\xe8\xff')")) # from line 10, col 13.
        write('''</th>
        <th>''')
        if False:
            _('Атрибуты')
        _v = VFFSL(SL,"_",False)('Атрибуты') # "$_('\xc0\xf2\xf0\xe8\xe1\xf3\xf2\xfb')" on line 11, col 13
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc0\xf2\xf0\xe8\xe1\xf3\xf2\xfb')")) # from line 11, col 13.
        write('''</th>
        <th><a id="dlgroleoptions_clear_all_options" title="''')
        if False:
            _('Удалить все опции')
        _v = VFFSL(SL,"_",False)('Удалить все опции') # "$_('\xd3\xe4\xe0\xeb\xe8\xf2\xfc \xe2\xf1\xe5 \xee\xef\xf6\xe8\xe8')" on line 12, col 61
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd3\xe4\xe0\xeb\xe8\xf2\xfc \xe2\xf1\xe5 \xee\xef\xf6\xe8\xe8')")) # from line 12, col 61.
        write('''" href="#"><img src="''')
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 12, col 105
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 12, col 105.
        write('''/actions/delete.png"/></a></th>
      </tr>
      </thead>
      <tbody>
''')
        for item in VFFSL(SL,"options",True): # generated from line 16, col 13
            write('''                <tr id="exr_role_id_''')
            _v = VFFSL(SL,"item.EXR_ROLE_ID",True) # '$item.EXR_ROLE_ID' on line 17, col 37
            if _v is not None: write(_filter(_v, rawExpr='$item.EXR_ROLE_ID')) # from line 17, col 37.
            write('''">
                    <td class="type">''')
            _v = VFFSL(SL,"item.TYPE_NAME",True) # '${item.TYPE_NAME}' on line 18, col 38
            if _v is not None: write(_filter(_v, rawExpr='${item.TYPE_NAME}')) # from line 18, col 38.
            write(''' (''')
            _v = VFFSL(SL,"item.TYPE_ID",True) # '$item.TYPE_ID' on line 18, col 57
            if _v is not None: write(_filter(_v, rawExpr='$item.TYPE_ID')) # from line 18, col 57.
            write(''')</td>
                    <td class="obj">''')
            _v = VFFSL(SL,"item.OBJ_NAME",True) # '${item.OBJ_NAME}' on line 19, col 37
            if _v is not None: write(_filter(_v, rawExpr='${item.OBJ_NAME}')) # from line 19, col 37.
            write(''' (''')
            _v = VFFSL(SL,"item.OBJ_ID",True) # '$item.OBJ_ID' on line 19, col 55
            if _v is not None: write(_filter(_v, rawExpr='$item.OBJ_ID')) # from line 19, col 55.
            write(''')</td>
                    <td class="opt">''')
            _v = VFFSL(SL,"item.OPT_NAME",True) # '${item.OPT_NAME}' on line 20, col 37
            if _v is not None: write(_filter(_v, rawExpr='${item.OPT_NAME}')) # from line 20, col 37.
            write(''' (''')
            _v = VFFSL(SL,"item.OPT_ID",True) # '$item.OPT_ID' on line 20, col 55
            if _v is not None: write(_filter(_v, rawExpr='$item.OPT_ID')) # from line 20, col 55.
            write(''')</td>
                    <td class="attrs">''')
            _v = VFFSL(SL,"item.ATTRS",True) # '${item.ATTRS}' on line 21, col 39
            if _v is not None: write(_filter(_v, rawExpr='${item.ATTRS}')) # from line 21, col 39.
            write('''</td>
                    <td class="hac"><a class="dlgroleoptions_del_opt" title="''')
            if False:
                _('Удалить опцию и её атрибуты')
            _v = VFFSL(SL,"_",False)('Удалить опцию и её атрибуты') # "$_('\xd3\xe4\xe0\xeb\xe8\xf2\xfc \xee\xef\xf6\xe8\xfe \xe8 \xe5\xb8 \xe0\xf2\xf0\xe8\xe1\xf3\xf2\xfb')" on line 22, col 78
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd3\xe4\xe0\xeb\xe8\xf2\xfc \xee\xef\xf6\xe8\xfe \xe8 \xe5\xb8 \xe0\xf2\xf0\xe8\xe1\xf3\xf2\xfb')")) # from line 22, col 78.
            write('''" href="#"><img src="''')
            _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 22, col 132
            if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 22, col 132.
            write('''/actions/delete.png"/></a></td>
                </tr>
''')
        write('''      </tbody>
    </table>
</div>
<div class="buttons save footer_btns">
    <span class="right_aligned_btns">
        <button title=''')
        if False:
            _('Добавить опцию')
        _v = VFFSL(SL,"_",False)('Добавить опцию') # "$_('\xc4\xee\xe1\xe0\xe2\xe8\xf2\xfc \xee\xef\xf6\xe8\xfe')" on line 30, col 23
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xee\xe1\xe0\xe2\xe8\xf2\xfc \xee\xef\xf6\xe8\xfe')")) # from line 30, col 23.
        write(''' type="button" id="dlgroleoptions_add_opt_btn"><img src="/ENGINE/images/actions/add.png"/>&nbsp;''')
        if False:
            _('Добавить опцию')
        _v = VFFSL(SL,"_",False)('Добавить опцию') # "$_('\xc4\xee\xe1\xe0\xe2\xe8\xf2\xfc \xee\xef\xf6\xe8\xfe')" on line 30, col 139
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xee\xe1\xe0\xe2\xe8\xf2\xfc \xee\xef\xf6\xe8\xfe')")) # from line 30, col 139.
        write('''</button>
        <button title=''')
        if False:
            _('Обновить список опций')
        _v = VFFSL(SL,"_",False)('Обновить список опций') # "$_('\xce\xe1\xed\xee\xe2\xe8\xf2\xfc \xf1\xef\xe8\xf1\xee\xea \xee\xef\xf6\xe8\xe9')" on line 31, col 23
        if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xe1\xed\xee\xe2\xe8\xf2\xfc \xf1\xef\xe8\xf1\xee\xea \xee\xef\xf6\xe8\xe9')")) # from line 31, col 23.
        write(''' type="button" id="dlgroleoptions_refresh_btn"><img src="/ENGINE/images/actions/refresh.png"/>&nbsp;''')
        if False:
            _('Обновить')
        _v = VFFSL(SL,"_",False)('Обновить') # "$_('\xce\xe1\xed\xee\xe2\xe8\xf2\xfc')" on line 31, col 150
        if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xe1\xed\xee\xe2\xe8\xf2\xfc')")) # from line 31, col 150.
        write('''</button>
        <button type="button" id="dlgroleoptions_save_btn"><img src="/ENGINE/images/actions/accept.png" alt=""/>&nbsp;''')
        if False:
            _('Закрыть')
        _v = VFFSL(SL,"_",False)('Закрыть') # "$_('\xc7\xe0\xea\xf0\xfb\xf2\xfc')" on line 32, col 119
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc7\xe0\xea\xf0\xfb\xf2\xfc')")) # from line 32, col 119.
        write('''</button>&nbsp;
    </span>
</div>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_admin_roles_options= 'respond'

## END CLASS DEFINITION

if not hasattr(admin_roles_options, '_initCheetahAttributes'):
    templateAPIClass = getattr(admin_roles_options, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(admin_roles_options)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=admin_roles_options()).run()


