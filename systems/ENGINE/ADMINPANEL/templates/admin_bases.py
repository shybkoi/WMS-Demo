#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from admin_main import admin_main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336165.7409999
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:45 2016'
__CHEETAH_src__ = 'systems\\ENGINE\\ADMINPANEL\\templates\\admin_bases.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:12 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class admin_bases(admin_main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        admin_main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def adminData(self, **KWS):



        ## CHEETAH: generated from #def adminData at line 3, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''    
''')
        # Scripts
        write('''    <script type="text/javascript" src="''')
        _v = VFFSL(SL,"sp_js",True) # '$sp_js' on line 6, col 41
        if _v is not None: write(_filter(_v, rawExpr='$sp_js')) # from line 6, col 41.
        write('''/admin_bases.js"></script>    
    <script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 7, col 41
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 7, col 41.
        write('''/jquery.contextMenu.min.js" ></script>
    <script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 8, col 41
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 8, col 41.
        write('''/jquery.maskedinput-1.2.1.pack.js"></script>
    <script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 9, col 41
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 9, col 41.
        write('''/k.UpDown.js"></script>
    
''')
        # CSS
        write('''    <link rel="stylesheet" href="''')
        _v = VFFSL(SL,"sp_css",True) # '$sp_css' on line 12, col 34
        if _v is not None: write(_filter(_v, rawExpr='$sp_css')) # from line 12, col 34.
        write('''/admin_bases.css" type="text/css" media="screen"/>    
    
    
    <span style="font: bold 14pt sans-serif; color: gray">''')
        if False:
            _('”правление базами данных')
        _v = VFFSL(SL,"_",False)('”правление базами данных') # "$_('\xd3\xef\xf0\xe0\xe2\xeb\xe5\xed\xe8\xe5 \xe1\xe0\xe7\xe0\xec\xe8 \xe4\xe0\xed\xed\xfb\xf5')" on line 15, col 59
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd3\xef\xf0\xe0\xe2\xeb\xe5\xed\xe8\xe5 \xe1\xe0\xe7\xe0\xec\xe8 \xe4\xe0\xed\xed\xfb\xf5')")) # from line 15, col 59.
        write("""</span>
    <table class='flora' cellspacing='5' id='tblBases' style='width: 90%;'>
      <thead>
          <tr>
            <th>ID_BASE</th><th>DB_PATH</th><th>DB_USER</th><th>DB_IP</th><th>DB_PASS</th><th>DB_ROLE</th><th>DB_CHARSET</th><th>USERS_TABLE_NAME</th><th>USERS_TABLE_ID_FIELD</th>
            <th>USERS_TABLE_FIO_FIELD</th><th>COMMENTS</th><th>CODE</th>
          </tr>
      </thead>
      <tbody>
""")
        for item in VFFSL(SL,"datalist",True): # generated from line 24, col 9
            write("""            <tr idbase='""")
            _v = VFFSL(SL,"item.ID_BASE",True) # '$item.ID_BASE' on line 25, col 25
            if _v is not None: write(_filter(_v, rawExpr='$item.ID_BASE')) # from line 25, col 25.
            write("""'><td class='id_base'>""")
            _v = VFFSL(SL,"item.ID_BASE",True) # '$item.ID_BASE' on line 25, col 60
            if _v is not None: write(_filter(_v, rawExpr='$item.ID_BASE')) # from line 25, col 60.
            write("""</td><td class='db_path'>""")
            _v = VFFSL(SL,"item.DB_PATH",True) # '$item.DB_PATH' on line 25, col 98
            if _v is not None: write(_filter(_v, rawExpr='$item.DB_PATH')) # from line 25, col 98.
            write("""</td><td class='db_user'>""")
            _v = VFFSL(SL,"item.DB_USER",True) # '$item.DB_USER' on line 25, col 136
            if _v is not None: write(_filter(_v, rawExpr='$item.DB_USER')) # from line 25, col 136.
            write("""</td>
                <td class='db_ip'>""")
            _v = VFFSL(SL,"item.DB_IP",True) # '$item.DB_IP' on line 26, col 35
            if _v is not None: write(_filter(_v, rawExpr='$item.DB_IP')) # from line 26, col 35.
            write("""</td><td class='db_pass'>""")
            _v = VFFSL(SL,"item.DB_PASS",True) # '$item.DB_PASS' on line 26, col 71
            if _v is not None: write(_filter(_v, rawExpr='$item.DB_PASS')) # from line 26, col 71.
            write("""</td><td class='db_role'>""")
            _v = VFFSL(SL,"item.DB_ROLE",True) # '$item.DB_ROLE' on line 26, col 109
            if _v is not None: write(_filter(_v, rawExpr='$item.DB_ROLE')) # from line 26, col 109.
            write("""</td><td class='db_charset'>""")
            _v = VFFSL(SL,"item.DB_CHARSET",True) # '$item.DB_CHARSET' on line 26, col 150
            if _v is not None: write(_filter(_v, rawExpr='$item.DB_CHARSET')) # from line 26, col 150.
            write("""</td>
                <td class='users_table_name'>""")
            _v = VFFSL(SL,"item.USERS_TABLE_NAME",True) # '$item.USERS_TABLE_NAME' on line 27, col 46
            if _v is not None: write(_filter(_v, rawExpr='$item.USERS_TABLE_NAME')) # from line 27, col 46.
            write("""</td><td class='users_table_id_field'>""")
            _v = VFFSL(SL,"item.USERS_TABLE_ID_FIELD",True) # '$item.USERS_TABLE_ID_FIELD' on line 27, col 106
            if _v is not None: write(_filter(_v, rawExpr='$item.USERS_TABLE_ID_FIELD')) # from line 27, col 106.
            write("""</td>
                <td class='users_table_fio_field'>""")
            _v = VFFSL(SL,"item.USERS_TABLE_FIO_FIELD",True) # '$item.USERS_TABLE_FIO_FIELD' on line 28, col 51
            if _v is not None: write(_filter(_v, rawExpr='$item.USERS_TABLE_FIO_FIELD')) # from line 28, col 51.
            write("""</td><td class='comments'>""")
            _v = VFFSL(SL,"item.COMMENTS",True) # '$item.COMMENTS' on line 28, col 104
            if _v is not None: write(_filter(_v, rawExpr='$item.COMMENTS')) # from line 28, col 104.
            write("""</td><td class='code'>""")
            _v = VFFSL(SL,"item.CODE",True) # '$item.CODE' on line 28, col 140
            if _v is not None: write(_filter(_v, rawExpr='$item.CODE')) # from line 28, col 140.
            write('''</td>
            </tr>
''')
        write("""      </tbody>
    </table>
    
    <ul id='tblContextMenu' class='contextMenu'>
        <li class='add'><a href='#add_base'>\xc4\xee\xe1\xe0\xe2\xe8\xf2\xfc \xed\xee\xe2\xf3\xfe \xe1\xe0\xe7\xf3</a></li>
        <li class='edit'><a href='#edit_base'>\xd0\xe5\xe4\xe0\xea\xf2\xe8\xf0\xee\xe2\xe0\xf2\xfc</a></li>
        <li class='delete'><a href='#delete_base'>\xd3\xe4\xe0\xeb\xe8\xf2\xfc</a></li>
    </ul>
    
    <div id='admin-base-addedit' class='flora' style='display: none;'>
        <fieldset>
            <legend>\xcf\xe0\xf0\xe0\xec\xe5\xf2\xf0\xfb \xe1\xe0\xe7\xfb \xe4\xe0\xed\xfb\xf5:</legend>
            <form id='add-base-form'>
                <table id='tblBaseParametrs' class='flora' style='width: 100%;'>
                    <tbody>
                        <tr><th class='titles'>DB_PATH:</th><td class='values' colspan='3'><input type='text' notnull name='db_path' id='add-base-db_path'/></td>                        
                        </tr>
                        <tr><th>CODE:</th><td><input type='text' name='code' id='add-base-code' /></td>
                            <th class='titles'>DB_USER:</th><td class='values'><input type='text' notnull name='db_user' id='add-base-db_user' /></td>
                        </tr>
                        <tr><th>DB_IP:</th><td><input type='text' notnull name='db_ip' id='add-base-db_ip' /></td>
                            <th>DB_PASS:</th><td><input type='text' notnull name='db_pass' id='add-base-db_pass' /></td>
                        </tr>
                        <tr><th>DB_ROLE:</th><td><input type='text' name='db_role' id='add-base-db_role' /></td>
                            <th>DB_CHARSET:</th>
                            <td>
                                <select name='db_charset' id='add-base-db_charset'>
                                    <optgroup label='\xc2\xfb\xe1\xe5\xf0\xe8\xf2\xe5 \xea\xee\xe4\xe8\xf0\xee\xe2\xea\xf3'>
                                        <option value='ASCII'>ASCII</option>
                                        <option value='ISO8859'>ISO8859</option>
                                        <option value='NONE'>NONE</option>
                                        <option value='UNICODE_FSS'>UNICODE_FSS</option>
                                        <option value='UTF8'>UTF8</option>
                                        <option value='WIN1251'>WIN1251</option>
                                    </optgroup>
                                </select>
                            </td>                        
                        </tr>
                        
                        <tr><th>USERS_TABLE_NAME:</th><td><input type='text' name='users_table_name' id='add-base-users_table_name' /></td>
                            <th>USERS_TABLE_ID_FIELD:</th><td><input type='text' name='users_table_id_field' id='add-base-users_table_id_field' /></td>
                        </tr>
                        <tr><th>USERS_TABLE_FIO_FIELD:</th><td><input type='text' name='users_table_fio_field' id='add-base-users_table_fio_field' /></td>
                            <th>COMMENTS:</th><td><input type='text' name='comments' id='add-base-comments' /></td>                        
                        </tr>                    
                    </tbody>
                    
                </table>
            </form>
            <div class='buttons'>
                <button id='add-base-btnsave' class='buttons'><img src='""")
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 81, col 73
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 81, col 73.
        write("""/actions/save.png' />\xd1\xee\xf5\xf0\xe0\xed\xe8\xf2\xfc</button>
                <button id='add-base-btnclose' class='buttons'><img src='""")
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 82, col 74
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 82, col 74.
        write("""/actions/delete.png' />\xc7\xe0\xea\xf0\xfb\xf2\xfc</button>
            </div>
\t</fieldset>
    </div>    
""")
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_admin_bases= 'writeBody'

## END CLASS DEFINITION

if not hasattr(admin_bases, '_initCheetahAttributes'):
    templateAPIClass = getattr(admin_bases, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(admin_bases)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=admin_bases()).run()


