#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from admin_main import admin_main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336165.803
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:45 2016'
__CHEETAH_src__ = 'systems\\ENGINE\\ADMINPANEL\\templates\\admin_cpstatus.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:12 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class admin_cpstatus(admin_main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        admin_main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def adminData(self, **KWS):



        ## CHEETAH: generated from #def adminData at line 3, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 5, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 5, col 37.
        write('''/jquery.timer.min.js"></script>

''')
        if VFFSL(SL,"is_linux",True): # generated from line 7, col 1
            write('''  <h3>\xd1\xf2\xe0\xf2\xf3\xf1 \xef\xf0\xee\xf6\xe5\xf1\xf1\xe0 \xf1\xe5\xf0\xe2\xe5\xf0\xe0 CherryPy</h3>  
  <br>
  <table id="tbl_process">
    <thead>
      <tr><th>USER</th><th>PID</th><th>%CPU</th><th>%MEM</th><th>VSZ</th><th>RSS</th><th>TTY</th><th>STAT</th><th>START</th><th>TIME</th><th>COMMAND</th></tr>
    </thead>
    <tbody>
      <tr><td>''')
            _v = VFFSL(SL,"ps.USER",True) # '$ps.USER' on line 15, col 15
            if _v is not None: write(_filter(_v, rawExpr='$ps.USER')) # from line 15, col 15.
            write('''</td><td class="har">''')
            _v = VFFSL(SL,"ps.PID",True) # '$ps.PID' on line 15, col 44
            if _v is not None: write(_filter(_v, rawExpr='$ps.PID')) # from line 15, col 44.
            write('''</td><td class="har">''')
            _v = VFFSL(SL,"ps.CPU",True) # '$ps.CPU' on line 15, col 72
            if _v is not None: write(_filter(_v, rawExpr='$ps.CPU')) # from line 15, col 72.
            write('''</td><td class="har">''')
            _v = VFFSL(SL,"ps.MEM",True) # '$ps.MEM' on line 15, col 100
            if _v is not None: write(_filter(_v, rawExpr='$ps.MEM')) # from line 15, col 100.
            write('''</td><td class="har">''')
            _v = VFFSL(SL,"ps.VSZ",True) # '$ps.VSZ' on line 15, col 128
            if _v is not None: write(_filter(_v, rawExpr='$ps.VSZ')) # from line 15, col 128.
            write('''</td>
      <td class="har">''')
            _v = VFFSL(SL,"ps.RSS",True) # '$ps.RSS' on line 16, col 23
            if _v is not None: write(_filter(_v, rawExpr='$ps.RSS')) # from line 16, col 23.
            write('''</td><td>''')
            _v = VFFSL(SL,"ps.TTY",True) # '$ps.TTY' on line 16, col 39
            if _v is not None: write(_filter(_v, rawExpr='$ps.TTY')) # from line 16, col 39.
            write('''</td><td>''')
            _v = VFFSL(SL,"ps.STAT",True) # '$ps.STAT' on line 16, col 55
            if _v is not None: write(_filter(_v, rawExpr='$ps.STAT')) # from line 16, col 55.
            write('''</td><td>''')
            _v = VFFSL(SL,"ps.START",True) # '$ps.START' on line 16, col 72
            if _v is not None: write(_filter(_v, rawExpr='$ps.START')) # from line 16, col 72.
            write('''</td><td>''')
            _v = VFFSL(SL,"ps.TIME",True) # '$ps.TIME' on line 16, col 90
            if _v is not None: write(_filter(_v, rawExpr='$ps.TIME')) # from line 16, col 90.
            write('''</td><td>''')
            _v = VFFSL(SL,"ps.COMMAND",True) # '$ps.COMMAND' on line 16, col 107
            if _v is not None: write(_filter(_v, rawExpr='$ps.COMMAND')) # from line 16, col 107.
            write('''</td>
      </tr>
    </tbody>
  </table>
''')
        write("""
<br>
<h3>\xd1\xf2\xe0\xf2\xf3\xf1 \xef\xee\xf2\xee\xea\xee\xe2 \xf1\xe5\xf0\xe2\xe5\xf0\xe0 CherryPy</h3>
<h3>\xc0\xe2\xf2\xee\xee\xe1\xed\xee\xe2\xeb\xe5\xed\xe8\xe5 \xf1\xf2\xf0\xe0\xed\xe8\xf6\xfb \xea\xe0\xe6\xe4\xfb\xe5: 
<select id='refresh_time' style='width: 80px;'>
    <optgroup label='\xc2\xfb\xe1\xe5\xf0\xe8\xf2\xe5 \xe8\xed\xf2\xe5\xf0\xe2\xe0\xeb \xee\xe1\xed\xee\xe2\xeb\xe5\xed\xe8\xff'>
        <option value='n'>\xcd\xe5 \xee\xe1\xed\xee\xe2\xeb\xff\xf2\xfc</option>
        <option value='1'>1 \xf1\xe5\xea</option>
        <option value='5'>5 \xf1\xe5\xea</option>
        <option value='10'>10 \xf1\xe5\xea</option>
        <option value='30'>30 \xf1\xe5\xea</option>
        <option value='60'>60 \xf1\xe5\xea</option>
    </optgroup>
</select>
</h3>
<br/>

\xc2\xf1\xe5\xe3\xee: """)
        _v = VFFSL(SL,"thactivecount",True) # '$thactivecount' on line 38, col 8
        if _v is not None: write(_filter(_v, rawExpr='$thactivecount')) # from line 38, col 8.
        write(''' \xe0\xea\xf2\xe8\xe2\xed\xfb\xf5 \xe8\xe7 ''')
        _v = VFFSL(SL,"thcount",True) # '$thcount' on line 38, col 35
        if _v is not None: write(_filter(_v, rawExpr='$thcount')) # from line 38, col 35.
        write(''' \xef\xee\xf2\xee\xea\xee\xe2
<br/>
<table id="tbl_threads">
<thead>
  <tr style="cursor: pointer"><th>\xcd\xee\xec\xe5\xf0</th><th>ID</th><th>\xcf\xf0\xee\xf1\xf2\xee\xe9(\xf1\xe5\xea)</th><th>\xcf\xee\xf1\xeb\xe5\xe4\xed\xe8\xe9 \xe7\xe0\xef\xf0\xee\xf1(\xf1\xe5\xea)</th><th>URL</th></tr>
</thead>
<tbody>
''')
        for th in VFFSL(SL,"datalist",True): # generated from line 45, col 3
            write('''    <tr><th>''')
            _v = VFFSL(SL,"th.number",True) # '$th.number' on line 46, col 13
            if _v is not None: write(_filter(_v, rawExpr='$th.number')) # from line 46, col 13.
            write('''</th><td>''')
            _v = VFFSL(SL,"th.id",True) # '$th.id' on line 46, col 32
            if _v is not None: write(_filter(_v, rawExpr='$th.id')) # from line 46, col 32.
            write('''</td><td class="har">''')
            _v = VFFSL(SL,"th.idle_time",True) # '$th.idle_time' on line 46, col 59
            if _v is not None: write(_filter(_v, rawExpr='$th.idle_time')) # from line 46, col 59.
            write('''</td><td class="har">''')
            _v = VFFSL(SL,"th.last_req_time",True) # '$th.last_req_time' on line 46, col 93
            if _v is not None: write(_filter(_v, rawExpr='$th.last_req_time')) # from line 46, col 93.
            write('''</td><td>''')
            _v = VFFSL(SL,"th.url",True) # '$th.url' on line 46, col 119
            if _v is not None: write(_filter(_v, rawExpr='$th.url')) # from line 46, col 119.
            write('''</td></tr>
''')
        write('''</tbody>
</table>

''')
        # Scripts
        write('''<script type="text/javascript" src="''')
        _v = VFFSL(SL,"sp_js",True) # '$sp_js' on line 52, col 37
        if _v is not None: write(_filter(_v, rawExpr='$sp_js')) # from line 52, col 37.
        write('''/admin_cpstatus.js"></script>

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_admin_cpstatus= 'writeBody'

## END CLASS DEFINITION

if not hasattr(admin_cpstatus, '_initCheetahAttributes'):
    templateAPIClass = getattr(admin_cpstatus, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(admin_cpstatus)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=admin_cpstatus()).run()


