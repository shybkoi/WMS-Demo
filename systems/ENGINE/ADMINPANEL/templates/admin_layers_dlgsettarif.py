#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336165.865
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:45 2016'
__CHEETAH_src__ = 'systems\\ENGINE\\ADMINPANEL\\templates\\admin_layers_dlgsettarif.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:12 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class admin_layers_dlgsettarif(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        Template.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''<form id="dlgsettarif_form" class="full_height">
  <table style=\'width: 100%\'>
    <tr><th>''')
        if False:
            _('ID')
        _v = VFFSL(SL,"_",False)('ID') # "$_('ID')" on line 4, col 13
        if _v is not None: write(_filter(_v, rawExpr="$_('ID')")) # from line 4, col 13.
        write("""</th><td  style='width: 60%'>
        <span id='dlgsettarif_id'></span>
    </td></tr>

    <tr><th>""")
        if False:
            _('Организация')
        _v = VFFSL(SL,"_",False)('Организация') # "$_('\xce\xf0\xe3\xe0\xed\xe8\xe7\xe0\xf6\xe8\xff')" on line 8, col 13
        if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xf0\xe3\xe0\xed\xe8\xe7\xe0\xf6\xe8\xff')")) # from line 8, col 13.
        write("""</th><td>
        <span id='dlgsettarif_organization'/></span>
    </td></tr>

    <tr><th>""")
        if False:
            _('Тариф')
        _v = VFFSL(SL,"_",False)('Тариф') # "$_('\xd2\xe0\xf0\xe8\xf4')" on line 12, col 13
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd2\xe0\xf0\xe8\xf4')")) # from line 12, col 13.
        write("""</th><td>
        <select id='dlgsettarif_tarif_cmb'>
            """)
        # некое не None и не int
        old_disabled = 'undefined'
        for tarif in VFFSL(SL,"tarifs",True): # generated from line 15, col 13
            if VFFSL(SL,"old_disabled",True) != VFFSL(SL,"tarif.DISABLED",True): # generated from line 16, col 17
                if VFFSL(SL,"old_disabled",True) != 'undefined': # generated from line 17, col 21
                    write('''                        </optgroup>
''')
                write('''
''')
                old_disabled = VFFSL(SL,"tarif.DISABLED",True)
                write('''                    <optgroup label=
''')
                if VFFSL(SL,"tarif.DISABLED",True) is None or VFFSL(SL,"tarif.DISABLED",True) == 0: # generated from line 23, col 21
                    write('''                        "\xc2\xea\xeb\xfe\xf7\xe5\xed\xed\xfb\xe5"
''')
                else: # generated from line 25, col 21
                    write('''                        "\xce\xf2\xea\xeb\xfe\xf7\xe5\xed\xed\xfb\xe5"
''')
                write('''                    >
''')
            write('''
''')
            if str(VFFSL(SL,"id_tar",True)) == str(VFFSL(SL,"tarif.ID_TAR",True)): # generated from line 31, col 17
                selected = ' selected = "selected" '
            else: # generated from line 33, col 17
                selected = ' '
            write('''                <option ''')
            _v = VFFSL(SL,"selected",True) # '$selected' on line 36, col 25
            if _v is not None: write(_filter(_v, rawExpr='$selected')) # from line 36, col 25.
            write(""" value='""")
            _v = VFFSL(SL,"tarif.ID_TAR",True) # '$tarif.ID_TAR' on line 36, col 42
            if _v is not None: write(_filter(_v, rawExpr='$tarif.ID_TAR')) # from line 36, col 42.
            write("""'>""")
            _v = VFFSL(SL,"tarif.TAR_NAME",True) # '$tarif.TAR_NAME' on line 36, col 57
            if _v is not None: write(_filter(_v, rawExpr='$tarif.TAR_NAME')) # from line 36, col 57.
            write('''</option>

''')
        if VFFSL(SL,"old_disabled",True) != 'undefined': # generated from line 39, col 13
            write('''                </optgroup>
''')
        write('''        </select>
    </td></tr>

    <tr><th>''')
        if False:
            _('Дата установки тарифа')
        _v = VFFSL(SL,"_",False)('Дата установки тарифа') # "$_('\xc4\xe0\xf2\xe0 \xf3\xf1\xf2\xe0\xed\xee\xe2\xea\xe8 \xf2\xe0\xf0\xe8\xf4\xe0')" on line 45, col 13
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xe0\xf2\xe0 \xf3\xf1\xf2\xe0\xed\xee\xe2\xea\xe8 \xf2\xe0\xf0\xe8\xf4\xe0')")) # from line 45, col 13.
        write('''</th><td>
        <input type="text" name="dlgsettarif_date_from" id="dlgsettarif_date_from" align="center" size=8 title="\xc4\xe0\xf2\xe0 \xf3\xf1\xf2\xe0\xed\xee\xe2\xea\xe8 \xf2\xe0\xf0\xe8\xf4\xe0"/>
    </td></tr>
  </table>

</form>
<div class="buttons save footer_btns right_aligned_btns">
    <button type="button" id="dlgsettarif_save_btn"><img src="''')
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 52, col 63
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 52, col 63.
        write('''/actions/accept.png" alt=""/>&nbsp;''')
        if False:
            _('Сохранить')
        _v = VFFSL(SL,"_",False)('Сохранить') # "$_('\xd1\xee\xf5\xf0\xe0\xed\xe8\xf2\xfc')" on line 52, col 106
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd1\xee\xf5\xf0\xe0\xed\xe8\xf2\xfc')")) # from line 52, col 106.
        write('''</button>&nbsp;
    <button type="button" id="dlgsettarif_cancel_btn"><img src="''')
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 53, col 65
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 53, col 65.
        write('''/actions/cancel.png" alt=""/>&nbsp;''')
        if False:
            _('Отмена')
        _v = VFFSL(SL,"_",False)('Отмена') # "$_('\xce\xf2\xec\xe5\xed\xe0')" on line 53, col 108
        if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xf2\xec\xe5\xed\xe0')")) # from line 53, col 108.
        write('''</button>
</div>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_admin_layers_dlgsettarif= 'respond'

## END CLASS DEFINITION

if not hasattr(admin_layers_dlgsettarif, '_initCheetahAttributes'):
    templateAPIClass = getattr(admin_layers_dlgsettarif, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(admin_layers_dlgsettarif)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=admin_layers_dlgsettarif()).run()


