#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from admin_main import admin_main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336166.4289999
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:46 2016'
__CHEETAH_src__ = 'systems\\ENGINE\\ADMINPANEL\\templates\\admin_tarifs_main.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:12 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class admin_tarifs_main(admin_main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        admin_main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def adminData(self, **KWS):



        ## CHEETAH: generated from #def adminData at line 3, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        # Styles
        write('''<link rel="stylesheet" type="text/css" media="screen" href="''')
        _v = VFFSL(SL,"sp_css",True) # '$sp_css' on line 6, col 61
        if _v is not None: write(_filter(_v, rawExpr='$sp_css')) # from line 6, col 61.
        write('''/admin_tarifs.css" />

''')
        # Scripts
        write('''<script type="text/javascript" src="''')
        _v = VFFSL(SL,"sp_js",True) # '$sp_js' on line 9, col 37
        if _v is not None: write(_filter(_v, rawExpr='$sp_js')) # from line 9, col 37.
        write('''/admin_tarifs.js"></script>
<script type="text/javascript">
''')
        if VFFSL(SL,"varExists",False)('$focused_id'): # generated from line 11, col 1
            if VFFSL(SL,"focused_id",True)!='': # generated from line 12, col 3
                write('''    focused_id=''')
                _v = VFFSL(SL,"focused_id",True) # '$focused_id' on line 13, col 16
                if _v is not None: write(_filter(_v, rawExpr='$focused_id')) # from line 13, col 16.
                write('''
''')
        write('''</script>

<span style="font: bold 14pt sans-serif; color: gray">''')
        if False:
            _('Управление тарифами')
        _v = VFFSL(SL,"_",False)('Управление тарифами') # "$_('\xd3\xef\xf0\xe0\xe2\xeb\xe5\xed\xe8\xe5 \xf2\xe0\xf0\xe8\xf4\xe0\xec\xe8')" on line 18, col 55
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd3\xef\xf0\xe0\xe2\xeb\xe5\xed\xe8\xe5 \xf2\xe0\xf0\xe8\xf4\xe0\xec\xe8')")) # from line 18, col 55.
        write('''</span>

<div id="content">
</div>

<br>
<div class="buttons save">
    <span class="bordered"><img src="''')
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 25, col 38
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 25, col 38.
        write('''/circular/eye.png"/>&nbsp;<input id=\'cbShowDisabled\' type="checkbox"/><label for =\'cbShowDisabled\'>''')
        if False:
            _('Показать отключенные')
        _v = VFFSL(SL,"_",False)('Показать отключенные') # "$_('\xcf\xee\xea\xe0\xe7\xe0\xf2\xfc \xee\xf2\xea\xeb\xfe\xf7\xe5\xed\xed\xfb\xe5')" on line 25, col 145
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xee\xea\xe0\xe7\xe0\xf2\xfc \xee\xf2\xea\xeb\xfe\xf7\xe5\xed\xed\xfb\xe5')")) # from line 25, col 145.
        write('''</label></span>
    <button id="brefresh" type="button"><img src="''')
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 26, col 51
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 26, col 51.
        write('''/actions/refresh.png"/>&nbsp;''')
        if False:
            _('Обновить тарифы')
        _v = VFFSL(SL,"_",False)('Обновить тарифы') # "$_('\xce\xe1\xed\xee\xe2\xe8\xf2\xfc \xf2\xe0\xf0\xe8\xf4\xfb')" on line 26, col 88
        if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xe1\xed\xee\xe2\xe8\xf2\xfc \xf2\xe0\xf0\xe8\xf4\xfb')")) # from line 26, col 88.
        write('''</button>
</div>

''')
        # Context menu
        write('''<ul style="display: none; width: 380px" id="menuTarif" class="contextMenu">
    <li class="addTarif">
        <a href="#addTarif"><img src="''')
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 32, col 39
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 32, col 39.
        write('''/actions/add.png" alt=""/>&nbsp;''')
        if False:
            _('Добавить')
        _v = VFFSL(SL,"_",False)('Добавить') # "$_('\xc4\xee\xe1\xe0\xe2\xe8\xf2\xfc')" on line 32, col 79
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xee\xe1\xe0\xe2\xe8\xf2\xfc')")) # from line 32, col 79.
        write('''</a>
    </li>
    <li class="editTarif">
        <a href="#editTarif"><img src="''')
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 35, col 40
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 35, col 40.
        write('''/actions/edit.png" alt=""/>&nbsp;''')
        if False:
            _('Редактировать')
        _v = VFFSL(SL,"_",False)('Редактировать') # "$_('\xd0\xe5\xe4\xe0\xea\xf2\xe8\xf0\xee\xe2\xe0\xf2\xfc')" on line 35, col 81
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd0\xe5\xe4\xe0\xea\xf2\xe8\xf0\xee\xe2\xe0\xf2\xfc')")) # from line 35, col 81.
        write('''</a>
    </li>
    <li class="delTarif">
        <a href="#delTarif"><img src="''')
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 38, col 39
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 38, col 39.
        write('''/actions/delete.png" alt=""/>&nbsp;''')
        if False:
            _('Удалить')
        _v = VFFSL(SL,"_",False)('Удалить') # "$_('\xd3\xe4\xe0\xeb\xe8\xf2\xfc')" on line 38, col 82
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd3\xe4\xe0\xeb\xe8\xf2\xfc')")) # from line 38, col 82.
        write('''</a>
    </li>
    <li class="disableTarif">
        <a href="#disableTarif"><img src="''')
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 41, col 43
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 41, col 43.
        write('''/actions/cancel.png" alt=""/>&nbsp;<span>''')
        if False:
            _('Отключить')
        _v = VFFSL(SL,"_",False)('Отключить') # "$_('\xce\xf2\xea\xeb\xfe\xf7\xe8\xf2\xfc')" on line 41, col 92
        if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xf2\xea\xeb\xfe\xf7\xe8\xf2\xfc')")) # from line 41, col 92.
        write('''</span></a>
    </li>
    <li class="setDefault">
        <a href="#setDefault"><img src="''')
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 44, col 41
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 44, col 41.
        write('''/circular/flag_yellow.png" alt=""/>&nbsp;<span>''')
        if False:
            _('Назначить тарифом по умолчанию')
        _v = VFFSL(SL,"_",False)('Назначить тарифом по умолчанию') # "$_('\xcd\xe0\xe7\xed\xe0\xf7\xe8\xf2\xfc \xf2\xe0\xf0\xe8\xf4\xee\xec \xef\xee \xf3\xec\xee\xeb\xf7\xe0\xed\xe8\xfe')" on line 44, col 96
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xe0\xe7\xed\xe0\xf7\xe8\xf2\xfc \xf2\xe0\xf0\xe8\xf4\xee\xec \xef\xee \xf3\xec\xee\xeb\xf7\xe0\xed\xe8\xfe')")) # from line 44, col 96.
        write('''</span></a>
    </li>
    <li class="rights">
        <a href="#rights"><img src="''')
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 47, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 47, col 37.
        write('''/actions/rights.gif" alt=""/>&nbsp;''')
        if False:
            _('Права тарифа')
        _v = VFFSL(SL,"_",False)('Права тарифа') # "$_('\xcf\xf0\xe0\xe2\xe0 \xf2\xe0\xf0\xe8\xf4\xe0')" on line 47, col 80
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xf0\xe0\xe2\xe0 \xf2\xe0\xf0\xe8\xf4\xe0')")) # from line 47, col 80.
        write('''</a>
    </li>
    <li class="layers">
        <a href="#layers"><img src="''')
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 50, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 50, col 37.
        write('''/actions/application_view_detail.png" alt=""/>&nbsp;''')
        if False:
            _('Клиенты на тарифе')
        _v = VFFSL(SL,"_",False)('Клиенты на тарифе') # "$_('\xca\xeb\xe8\xe5\xed\xf2\xfb \xed\xe0 \xf2\xe0\xf0\xe8\xf4\xe5')" on line 50, col 97
        if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xeb\xe8\xe5\xed\xf2\xfb \xed\xe0 \xf2\xe0\xf0\xe8\xf4\xe5')")) # from line 50, col 97.
        write('''</a>
    </li>
</ul>

''')
        # Dialog Add/Edit tarif
        write('''<div id="dlgedit" class="dialog flora" title="\xc8\xe7\xec\xe5\xed\xe5\xed\xe8\xe5 \xef\xe0\xf0\xe0\xec\xe5\xf2\xf0\xee\xe2 \xf2\xe0\xf0\xe8\xf4\xe0" align="center"></div>

''')
        # Dialog tarif Rights
        write('''<div id="dlgrights" class="dialog flora" title="\xcf\xf0\xe0\xe2\xe0 \xea\xeb\xe8\xe5\xed\xf2\xe0 \xf1\xee\xe3\xeb\xe0\xf1\xed\xee \xf2\xe0\xf0\xe8\xf4\xe0" align="center"></div>

''')
        # Dialog tarif Layers
        write('''<div id="dlglayers" class="dialog flora" title="\xca\xeb\xe8\xe5\xed\xf2\xfb \xed\xe0 \xf2\xe0\xf0\xe8\xf4\xe5" align="center"></div>

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_admin_tarifs_main= 'writeBody'

## END CLASS DEFINITION

if not hasattr(admin_tarifs_main, '_initCheetahAttributes'):
    templateAPIClass = getattr(admin_tarifs_main, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(admin_tarifs_main)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=admin_tarifs_main()).run()


