#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.engine_main import engine_main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336167.615
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:47 2016'
__CHEETAH_src__ = 'systems\\ENGINE\\UPDATER\\templates\\updater_tmpl.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class updater_tmpl(engine_main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        engine_main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def engineData(self, **KWS):



        ## CHEETAH: generated from #def engineData at line 4, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        # Styles
        write('''<link rel="shortcut icon" href="''')
        _v = VFFSL(SL,"sp_img",True) # '$sp_img' on line 7, col 33
        if _v is not None: write(_filter(_v, rawExpr='$sp_img')) # from line 7, col 33.
        write('''/favicon.png">
<link rel="stylesheet" type="text/css" href="''')
        _v = VFFSL(SL,"sp_css",True) # '$sp_css' on line 8, col 46
        if _v is not None: write(_filter(_v, rawExpr='$sp_css')) # from line 8, col 46.
        write('''/updater.css" />
<link href="''')
        _v = VFFSL(SL,"sp_css",True) # '$sp_css' on line 9, col 13
        if _v is not None: write(_filter(_v, rawExpr='$sp_css')) # from line 9, col 13.
        write('''/contextMenu.css" rel="stylesheet" type="text/css" media="screen"/>

''')
        # Scripts
        write('''<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 12, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 12, col 37.
        write('''/jquery.validate.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 13, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 13, col 37.
        write('''/jquery.form.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 14, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 14, col 37.
        write('''/jquery.timer.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 15, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 15, col 37.
        write('''/jquery.contextMenu.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 16, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 16, col 37.
        write('''/jquery.rightClick.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 17, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 17, col 37.
        write('''/jquery.rowFocus.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 18, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 18, col 37.
        write('''/ui.dialog.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 19, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 19, col 37.
        write('''/kTblScroll.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 20, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 20, col 37.
        write('''/kScrollableToDown.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 21, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 21, col 37.
        write('''/ui.datepicker.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 22, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 22, col 37.
        write('''/i18n/ui.datepicker-ru.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"sp_js",True) # '$sp_js' on line 23, col 37
        if _v is not None: write(_filter(_v, rawExpr='$sp_js')) # from line 23, col 37.
        write('''/updater.js"></script>
<script type="text/javascript">
  var bonds=[];
  var server_time = ''')
        _v = VFFSL(SL,"curtime",True) # '$curtime' on line 26, col 21
        if _v is not None: write(_filter(_v, rawExpr='$curtime')) # from line 26, col 21.
        write(''';
  var user_id = ''')
        _v = VFFSL(SL,"userid",True) # '$userid' on line 27, col 17
        if _v is not None: write(_filter(_v, rawExpr='$userid')) # from line 27, col 17.
        write(''';
''')
        for bond in VFFSL(SL,"datalist_bond",True): # generated from line 28, col 3
            write('''      bonds[bonds.length] = {base:''')
            _v = VFFSL(SL,"bond.ID_BASE",True) # '$bond.ID_BASE' on line 29, col 35
            if _v is not None: write(_filter(_v, rawExpr='$bond.ID_BASE')) # from line 29, col 35.
            write(''', module:''')
            _v = VFFSL(SL,"bond.ID_MODULES",True) # '$bond.ID_MODULES' on line 29, col 57
            if _v is not None: write(_filter(_v, rawExpr='$bond.ID_MODULES')) # from line 29, col 57.
            write('''};
''')
        write('''</script>

<div align="center">
<table class="upload_table" cellpadding="5">
    <thead>
        <tr>
            <th>''')
        if False:
            _('№ п/п')
        _v = VFFSL(SL,"_",False)('№ п/п') # "$_('\xb9 \xef/\xef')" on line 37, col 17
        if _v is not None: write(_filter(_v, rawExpr="$_('\xb9 \xef/\xef')")) # from line 37, col 17.
        write("""</th><th width='7%'>""")
        if False:
            _('Время')
        _v = VFFSL(SL,"_",False)('Время') # "$_('\xc2\xf0\xe5\xec\xff')" on line 37, col 48
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc2\xf0\xe5\xec\xff')")) # from line 37, col 48.
        write("""</th><th width='15%'>""")
        if False:
            _('Ф.И.О.')
        _v = VFFSL(SL,"_",False)('Ф.И.О.') # "$_('\xd4.\xc8.\xce.')" on line 37, col 80
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd4.\xc8.\xce.')")) # from line 37, col 80.
        write("""</th>
            <th width='12%'>""")
        if False:
            _('Куда лить SQL')
        _v = VFFSL(SL,"_",False)('Куда лить SQL') # "$_('\xca\xf3\xe4\xe0 \xeb\xe8\xf2\xfc SQL')" on line 38, col 29
        if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xf3\xe4\xe0 \xeb\xe8\xf2\xfc SQL')")) # from line 38, col 29.
        write("""</th><th width='12%'>""")
        if False:
            _('Куда лить модули')
        _v = VFFSL(SL,"_",False)('Куда лить модули') # "$_('\xca\xf3\xe4\xe0 \xeb\xe8\xf2\xfc \xec\xee\xe4\xf3\xeb\xe8')" on line 38, col 69
        if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xf3\xe4\xe0 \xeb\xe8\xf2\xfc \xec\xee\xe4\xf3\xeb\xe8')")) # from line 38, col 69.
        write("""</th>
            <th width='12%'>""")
        if False:
            _('Файл в архиве 7z')
        _v = VFFSL(SL,"_",False)('Файл в архиве 7z') # "$_('\xd4\xe0\xe9\xeb \xe2 \xe0\xf0\xf5\xe8\xe2\xe5 7z')" on line 39, col 29
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd4\xe0\xe9\xeb \xe2 \xe0\xf0\xf5\xe8\xe2\xe5 7z')")) # from line 39, col 29.
        write('''</th>
            <th>''')
        if False:
            _('Что нового?')
        _v = VFFSL(SL,"_",False)('Что нового?') # "$_('\xd7\xf2\xee \xed\xee\xe2\xee\xe3\xee?')" on line 40, col 17
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd7\xf2\xee \xed\xee\xe2\xee\xe3\xee?')")) # from line 40, col 17.
        write('''</th><th>''')
        if False:
            _('Отправить')
        _v = VFFSL(SL,"_",False)('Отправить') # "$_('\xce\xf2\xef\xf0\xe0\xe2\xe8\xf2\xfc')" on line 40, col 43
        if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xf2\xef\xf0\xe0\xe2\xe8\xf2\xfc')")) # from line 40, col 43.
        write('''</th>
        </tr>
        <tr>
            <th colspan="8" align="left">
                <div class=\'addSign\'>
                    ''')
        if False:
            _('Добавить')
        _v = VFFSL(SL,"_",False)('Добавить') # "$_('\xc4\xee\xe1\xe0\xe2\xe8\xf2\xfc')" on line 45, col 21
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xee\xe1\xe0\xe2\xe8\xf2\xfc')")) # from line 45, col 21.
        write('''
                </div>
            </th>
        </tr>
        <tr>
            <form id="upd_form" action="upload" method="post" enctype="multipart/form-data">
                <th>&nbsp;</th><th><span class="curtime"></span></th><th>''')
        _v = VFFSL(SL,"userfio",True) # '$userfio' on line 51, col 74
        if _v is not None: write(_filter(_v, rawExpr='$userfio')) # from line 51, col 74.
        write('''</th>
                <th>
                    <select id="upd_base_cmb" name="upd_base_cmb" style="width: 400px">
                        <optgroup label="\xc2\xfb\xe1\xe5\xf0\xe8\xf2\xe5 \xe1\xe0\xe7\xf3...">
''')
        for base in VFFSL(SL,"datalist_bases",True): # generated from line 55, col 27
            write('''                              <option value="''')
            _v = VFFSL(SL,"base.ID_BASE",True) # '$base.ID_BASE' on line 56, col 46
            if _v is not None: write(_filter(_v, rawExpr='$base.ID_BASE')) # from line 56, col 46.
            write('''">''')
            _v = VFFSL(SL,"base.SHOW_NAME",True) # '$base.SHOW_NAME' on line 56, col 61
            if _v is not None: write(_filter(_v, rawExpr='$base.SHOW_NAME')) # from line 56, col 61.
            write(''' ''')
            if False:
                _('на сервере')
            _v = VFFSL(SL,"_",False)('на сервере') # "$_('\xed\xe0 \xf1\xe5\xf0\xe2\xe5\xf0\xe5')" on line 56, col 77
            if _v is not None: write(_filter(_v, rawExpr="$_('\xed\xe0 \xf1\xe5\xf0\xe2\xe5\xf0\xe5')")) # from line 56, col 77.
            write(''' ''')
            _v = VFFSL(SL,"base.IP",True) # '$base.IP' on line 56, col 94
            if _v is not None: write(_filter(_v, rawExpr='$base.IP')) # from line 56, col 94.
            write('''</option>
''')
        write('''                        </optgroup>
                    </select>
                </th>
                <th>
                    <select id="upd_module_cmb" name="upd_module_cmb" style="width: 400px">
                        <optgroup label="\xc2\xfb\xe1\xe5\xf0\xe8\xf2\xe5 \xec\xe5\xf1\xf2\xee...">
''')
        for modules in VFFSL(SL,"datalist_modules",True): # generated from line 64, col 27
            write('''                              <option value="''')
            _v = VFFSL(SL,"modules.ID_MODULES",True) # '$modules.ID_MODULES' on line 65, col 46
            if _v is not None: write(_filter(_v, rawExpr='$modules.ID_MODULES')) # from line 65, col 46.
            write('''">''')
            _v = VFFSL(SL,"modules.SHOW_NAME",True) # '$modules.SHOW_NAME' on line 65, col 67
            if _v is not None: write(_filter(_v, rawExpr='$modules.SHOW_NAME')) # from line 65, col 67.
            write(''' ''')
            if False:
                _('на сервере')
            _v = VFFSL(SL,"_",False)('на сервере') # "$_('\xed\xe0 \xf1\xe5\xf0\xe2\xe5\xf0\xe5')" on line 65, col 86
            if _v is not None: write(_filter(_v, rawExpr="$_('\xed\xe0 \xf1\xe5\xf0\xe2\xe5\xf0\xe5')")) # from line 65, col 86.
            write(''' ''')
            _v = VFFSL(SL,"modules.IP",True) # '$modules.IP' on line 65, col 103
            if _v is not None: write(_filter(_v, rawExpr='$modules.IP')) # from line 65, col 103.
            write('''</option>
''')
        write('''                        </optgroup>
                    </select>
                </th>
                <th>
                    <input type="file" name="upd_file" id="upd_file" />
                </th>
                <th>
                    <a href=\'#\' class=\'wnAddStatus\'><img src=\'''')
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 74, col 63
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 74, col 63.
        write('''/actions/stop.png\' class=\'wnAddImg\'/></a>
                </th>

                <th>
                    <button id=\'upload_btn\' type="button"><img src="''')
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 78, col 69
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 78, col 69.
        write('''/actions/arrow_up.png"/>&nbsp;\xc7\xe0\xeb\xe8\xf2\xfc</button>
                </th>
            </form>
        </tr>
        <tr>

            <th colspan="8">
                <div class="addSign">
                    ''')
        if False:
            _('Уже добавлены')
        _v = VFFSL(SL,"_",False)('Уже добавлены') # "$_('\xd3\xe6\xe5 \xe4\xee\xe1\xe0\xe2\xeb\xe5\xed\xfb')" on line 86, col 21
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd3\xe6\xe5 \xe4\xee\xe1\xe0\xe2\xeb\xe5\xed\xfb')")) # from line 86, col 21.
        write("""  <a href='#' class='refreshupdates'>
                    <img src='""")
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 87, col 31
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 87, col 31.
        write("""/actions/refresh.png' /></a>
                </div>
""")
        if VFFSL(SL,"opt",False)('edit','XMLADMIN','admin_mode','other')=='1': # generated from line 89, col 17
            write("""                    <span class='adminfilter'>
                        """)
            if False:
                _('Просмотреть обновления за')
            _v = VFFSL(SL,"_",False)('Просмотреть обновления за') # "$_('\xcf\xf0\xee\xf1\xec\xee\xf2\xf0\xe5\xf2\xfc \xee\xe1\xed\xee\xe2\xeb\xe5\xed\xe8\xff \xe7\xe0')" on line 91, col 25
            if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xf0\xee\xf1\xec\xee\xf2\xf0\xe5\xf2\xfc \xee\xe1\xed\xee\xe2\xeb\xe5\xed\xe8\xff \xe7\xe0')")) # from line 91, col 25.
            write(""" <input type='text' class='admin-update-date' size='8'/>
                        <button id='adminShowUpdates' class='buttons'>
                            <img src='""")
            _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 93, col 39
            if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 93, col 39.
            write("""/actions/find.png' />
                        </button>

                    </span>
""")
        write('''            </th>
        </tr>
    </thead>

    <tbody>
    </tbody>
</table>

<ul id="menuUpdates" class="contextMenu">
    <li class="information"><a href="#info">''')
        if False:
            _('Информация')
        _v = VFFSL(SL,"_",False)('Информация') # "$_('\xc8\xed\xf4\xee\xf0\xec\xe0\xf6\xe8\xff')" on line 107, col 46
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc8\xed\xf4\xee\xf0\xec\xe0\xf6\xe8\xff')")) # from line 107, col 46.
        write('''</a></li>
    <li class="information"><a href="#whatsnew">''')
        if False:
            _('Что нового?')
        _v = VFFSL(SL,"_",False)('Что нового?') # "$_('\xd7\xf2\xee \xed\xee\xe2\xee\xe3\xee?')" on line 108, col 50
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd7\xf2\xee \xed\xee\xe2\xee\xe3\xee?')")) # from line 108, col 50.
        write('''</a></li>
    <li class="delete"><a href="#delete">''')
        if False:
            _('Удалить')
        _v = VFFSL(SL,"_",False)('Удалить') # "$_('\xd3\xe4\xe0\xeb\xe8\xf2\xfc')" on line 109, col 43
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd3\xe4\xe0\xeb\xe8\xf2\xfc')")) # from line 109, col 43.
        write('''</a></li>

    <li class="add"><a href="#commonInfo">''')
        if False:
            _('Сводная (Информация)')
        _v = VFFSL(SL,"_",False)('Сводная (Информация)') # "$_('\xd1\xe2\xee\xe4\xed\xe0\xff (\xc8\xed\xf4\xee\xf0\xec\xe0\xf6\xe8\xff)')" on line 111, col 44
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd1\xe2\xee\xe4\xed\xe0\xff (\xc8\xed\xf4\xee\xf0\xec\xe0\xf6\xe8\xff)')")) # from line 111, col 44.
        write('''</a></li>
    <li class="add"><a href="#commonWhatsNew">''')
        if False:
            _('Сводная (Что нового)')
        _v = VFFSL(SL,"_",False)('Сводная (Что нового)') # "$_('\xd1\xe2\xee\xe4\xed\xe0\xff (\xd7\xf2\xee \xed\xee\xe2\xee\xe3\xee)')" on line 112, col 48
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd1\xe2\xee\xe4\xed\xe0\xff (\xd7\xf2\xee \xed\xee\xe2\xee\xe3\xee)')")) # from line 112, col 48.
        write('''</a><li>
</ul>

<div id="progress">
</div>

''')
        # <iframe id="iframe_status" name="iframe_status" width="100px" height="100px">
        #   tttttt
        #   <script type="text/javascript">
        #   alert(344);
        #   $.timer(500, function (timer) {
        #       alert(123);
        #       /*$.getJSON('upload_stats', null, function(json){
        #         //if (json.data.STATUS=='starting') {
        #         //  $('#progress').text("Подготовка");
        #         //}
        #         //alert (json.data.STATUS);
        #         if (json.data.STATUS=='uploading') {
        #           $('#progress').text(json.data.ETA);
        #         }
        #         else if (json.data.STATUS=='done') {
        #           //$('#progress').text('Файл '+$('#upd_file').val()+' успешно отправлен');
        #           timer.stop();
        #         }
        #       });*/
        #   });
        #   </script>
        # </iframe>
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_updater_tmpl= 'writeBody'

## END CLASS DEFINITION

if not hasattr(updater_tmpl, '_initCheetahAttributes'):
    templateAPIClass = getattr(updater_tmpl, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(updater_tmpl)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=updater_tmpl()).run()


