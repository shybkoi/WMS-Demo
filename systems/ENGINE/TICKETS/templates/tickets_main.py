#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.engine_main import engine_main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336167.527
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:47 2016'
__CHEETAH_src__ = 'systems\\ENGINE\\TICKETS\\templates\\tickets_main.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class tickets_main(engine_main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        engine_main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def searchData(self, **KWS):



        ## CHEETAH: generated from #def searchData at line 3, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
<label for="ticketId">\xd2\xe8\xea\xe5\xf2 ID</label>
<input name="ticketId" id="ticketId" type="text" align="left" size=5 title="Id \xf2\xe8\xea\xe5\xf2\xe0"/>

<label for="dpDBeg">\xcf\xe5\xf0\xe8\xee\xe4 \xe2\xfb\xe4\xe0\xf7\xe8</label>
<input name="dpDBeg" id="dpDBeg" type="text" align="center" size=7 title="\xf1"/>
<input name="dpDEnd" id="dpDEnd" type="text" align="center" size=7 title="\xef\xee"/>

<label for="develId_cmb">\xd0\xe0\xe7\xf0\xe0\xe1\xee\xf2\xf7\xe8\xea</label>
<select id=\'develId_cmb\' title=\'\xd0\xe0\xe7\xf0\xe0\xe1\xee\xf2\xf7\xe8\xea\'>
    <option value=\'\'>\xc2\xf1\xe5 \xf0\xe0\xe7\xf0\xe0\xe1\xee\xf2\xf7\xe8\xea\xe8</option>
''')
        if VFFSL(SL,"varExists",False)('$datalist'): # generated from line 15, col 5
            if VFFSL(SL,"datalist",True): # generated from line 16, col 9
                for item in VFFSL(SL,"datalist",True): # generated from line 17, col 13
                    #  #if str($develId) == str($item.DEVEL_ID)
                    #                     #set $selected = ' selected = "selected" '
                    #                 #else
                    #                     #set $selected = ' '
                    #                 #end if
                    #                 <option $selected value= '$item.DEVEL_ID'>$item.DEVEL_FIO</option>
                    #                 
                    write("""                <option value= '""")
                    _v = VFFSL(SL,"item.DEVEL_ID",True) # '$item.DEVEL_ID' on line 25, col 33
                    if _v is not None: write(_filter(_v, rawExpr='$item.DEVEL_ID')) # from line 25, col 33.
                    write("""'>""")
                    _v = VFFSL(SL,"item.DEVEL_FIO",True) # '$item.DEVEL_FIO' on line 25, col 49
                    if _v is not None: write(_filter(_v, rawExpr='$item.DEVEL_FIO')) # from line 25, col 49.
                    write('''</option>
''')
        write('''</select>
<label for="edtReason">\xcf\xf0\xe8\xf7\xe8\xed\xe0</label>
<input name="edtReason" id="edtReason" type="text" size=10 title="\xd7\xe0\xf1\xf2\xfc \xf2\xe5\xea\xf1\xf2\xe0"/>
<br/>

<label for="ticket">\xd2\xe8\xea\xe5\xf2</label>
<input name="ticket" id="ticket" type="text" align="left" size=20 title="\xd2\xe8\xea\xe5\xf2"/>

<label for="adminId_cmb">\xc0\xe4\xec\xe8\xed</label>
<select id=\'adminId_cmb\' title=\'\xc0\xe4\xec\xe8\xed\'>
    <option value=\'\'>\xc2\xf1\xe5 \xe0\xe4\xec\xe8\xed\xfb</option>
''')
        if VFFSL(SL,"varExists",False)('$admins'): # generated from line 40, col 5
            if VFFSL(SL,"admins",True): # generated from line 41, col 9
                for item in VFFSL(SL,"admins",True): # generated from line 42, col 13
                    #  #if str($develId) == str($item.DEVEL_ID)
                    #                     #set $selected = ' selected = "selected" '
                    #                 #else
                    #                     #set $selected = ' '
                    #                 #end if
                    #                 <option $selected value= '$item.ID_USER'>$item.FIO</option>
                    #                 
                    write("""                <option value= '""")
                    _v = VFFSL(SL,"item.ID_USER",True) # '$item.ID_USER' on line 50, col 33
                    if _v is not None: write(_filter(_v, rawExpr='$item.ID_USER')) # from line 50, col 33.
                    write("""'>""")
                    _v = VFFSL(SL,"item.FIO",True) # '$item.FIO' on line 50, col 48
                    if _v is not None: write(_filter(_v, rawExpr='$item.FIO')) # from line 50, col 48.
                    write('''</option>
''')
        write('''</select>

<label for="idBase_cmb">\xc1\xc4</label>
<select id=\'idBase_cmb\' title=\'\xc1\xc4\'>
    <option value=\'\'>\xc2\xf1\xe5 \xc1\xc4</option>
''')
        if VFFSL(SL,"varExists",False)('$dbs'): # generated from line 59, col 5
            if VFFSL(SL,"dbs",True): # generated from line 60, col 9
                for item in VFFSL(SL,"dbs",True): # generated from line 61, col 13
                    write("""                <option value= '""")
                    _v = VFFSL(SL,"item.ID_BASE",True) # '$item.ID_BASE' on line 62, col 33
                    if _v is not None: write(_filter(_v, rawExpr='$item.ID_BASE')) # from line 62, col 33.
                    write("""'>""")
                    _v = VFFSL(SL,"item.DB_NAME",True) # '$item.DB_NAME' on line 62, col 48
                    if _v is not None: write(_filter(_v, rawExpr='$item.DB_NAME')) # from line 62, col 48.
                    write('''</option>
''')
        write('''</select>

<label for="kind_cmb">\xc2\xe8\xe4</label>
<select id=\'kind_cmb\' title=\'\xc2\xe8\xe4\'>
    <option value=\'\'>\xc2\xf1\xe5 \xe2\xe8\xe4\xfb</option>
    <option value=\'tmp\'>\xc2\xf0\xe5\xec\xe5\xed\xed\xfb\xe5</option>
    <option value=\'perm\'>\xcf\xee\xf1\xf2\xee\xff\xed\xed\xfb\xe5</option>
</select>

<label for="ip">IP</label>
<input name="ip" id="ip" type="text" align="left" size=15 title="IP-\xe0\xe4\xf0\xe5\xf1"/>

<span class=\'buttons\'>
    <button id="bfilters" title="\xcf\xee\xe8\xf1\xea"> <img src="''')
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 79, col 52
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 79, col 52.
        write('''/actions/magnifier.png" alt=""/></button>
</span>

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def engineData(self, **KWS):



        ## CHEETAH: generated from #def engineData at line 84, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        # Styles
        write('''<link rel="stylesheet" href="''')
        _v = VFFSL(SL,"eng_css",True) # '$eng_css' on line 87, col 30
        if _v is not None: write(_filter(_v, rawExpr='$eng_css')) # from line 87, col 30.
        write('''/jquery.cluetip.css" type="text/css"/>
<link rel="stylesheet" href="''')
        _v = VFFSL(SL,"sp_css",True) # '$sp_css' on line 88, col 30
        if _v is not None: write(_filter(_v, rawExpr='$sp_css')) # from line 88, col 30.
        write('''/tables.css" type="text/css"/>
<link rel="stylesheet" href="''')
        _v = VFFSL(SL,"sp_css",True) # '$sp_css' on line 89, col 30
        if _v is not None: write(_filter(_v, rawExpr='$sp_css')) # from line 89, col 30.
        write('''/valid.css" type="text/css"/>
<link rel="stylesheet" href="''')
        _v = VFFSL(SL,"sp_css",True) # '$sp_css' on line 90, col 30
        if _v is not None: write(_filter(_v, rawExpr='$sp_css')) # from line 90, col 30.
        write('''/align.css" type="text/css"/>
<link rel="stylesheet" type="text/css" media="screen" href="''')
        _v = VFFSL(SL,"sp_css",True) # '$sp_css' on line 91, col 61
        if _v is not None: write(_filter(_v, rawExpr='$sp_css')) # from line 91, col 61.
        write('''/tickets.css" />


''')
        # Scripts
        write('''<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 95, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 95, col 37.
        write('''/ui.dialog.min.js"></script>
''')
        # <script type="text/javascript" src="$eng_js/jquery.cluetip.min.js"></script>
        write('''<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 97, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 97, col 37.
        write('''/jquery.validate.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 98, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 98, col 37.
        write('''/jquery.rightClick.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 99, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 99, col 37.
        write('''/jquery.rowFocus.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 100, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 100, col 37.
        write('''/jquery.tablesorter.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 101, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 101, col 37.
        write('''/kTblScroll.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 102, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 102, col 37.
        write('''/kScrollableToDown.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 103, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 103, col 37.
        write('''/ui.datepicker.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 104, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 104, col 37.
        write('''/i18n/ui.datepicker-ru.js"></script>
<script type=\'text/javascript\' src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 105, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 105, col 37.
        write('''/jquery.contextMenu.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"sp_js",True) # '$sp_js' on line 106, col 37
        if _v is not None: write(_filter(_v, rawExpr='$sp_js')) # from line 106, col 37.
        write('''/tickets.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 107, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 107, col 37.
        write('''/jquery.maskedinput-1.2.1.pack.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 108, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 108, col 37.
        write('''/jquery.validate.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 109, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 109, col 37.
        write('''/jquery.boxit.js"></script>

''')
        # <script type="text/javascript" src="$sps_js.KURS/k.formats.js"></script>
        # <script type="text/javascript" src="$sps_js.KURS/k.messages.js"></script>
        # <script type="text/javascript" src="$sps_js.KURS/jquery.blockUI.js"></script>
        # <script type="text/javascript" src="$sps_js.KURS/k.blocks.js"></script>
        write('''
<div id="content">
</div>

<div class=\'buttons\' style=\'float: left;\'>
    <button id="badd" title="\xc4\xee\xe1\xe0\xe2\xe8\xf2\xfc \xf2\xe8\xea\xe5\xf2"> <img src="''')
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 121, col 57
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 121, col 57.
        write('''/actions/add.png" alt=""/>&nbsp;\xc4\xee\xe1\xe0\xe2\xe8\xf2\xfc \xf2\xe8\xea\xe5\xf2</button>
</div>

<ul style="display: none; width: 300px" id="menuTicket" class="contextMenu">
    <li class="addTicket">
        <a href="#addTicket">\xc4\xee\xe1\xe0\xe2\xe8\xf2\xfc \xf2\xe8\xea\xe5\xf2</a>
    </li>
    <li class="delTicket">
        <a href="#delTicket">\xd3\xe4\xe0\xeb\xe8\xf2\xfc \xf2\xe8\xea\xe5\xf2</a>
    </li>
    <li class="delAllTickets">
        <a href="#delAllTmpTickets">\xd3\xe4\xe0\xeb\xe8\xf2\xfc \xe2\xf1\xe5 \xe2\xf0\xe5\xec\xe5\xed\xed\xfb\xe5 \xe7\xe0 \xf1\xe5\xe3\xee\xe4\xed\xff</a>
    </li>
    <li class="delAllTickets">
        <a href="#delAllPermTickets">\xd3\xe4\xe0\xeb\xe8\xf2\xfc \xe2\xf1\xe5 \xef\xe5\xf0\xec\xe0\xed\xe5\xed\xf2\xed\xfb\xe5 \xe7\xe0 \xf1\xe5\xe3\xee\xe4\xed\xff</a>
    </li>
</ul>

''')
        # Dialogs
        write('''<div id="dlgadd" class="dialog flora" title="\xc4\xee\xe1\xe0\xe2\xeb\xe5\xed\xe8\xe5 \xf2\xe8\xea\xe5\xf2\xe0" align="center"></div>

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_tickets_main= 'writeBody'

## END CLASS DEFINITION

if not hasattr(tickets_main, '_initCheetahAttributes'):
    templateAPIClass = getattr(tickets_main, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(tickets_main)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=tickets_main()).run()


