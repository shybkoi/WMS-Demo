#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.engine_main import engine_main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336167.6700001
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:47 2016'
__CHEETAH_src__ = 'systems\\ENGINE\\WEBSERVER\\templates\\webserver_tmpl.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class webserver_tmpl(engine_main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        engine_main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def engineData(self, **KWS):



        ## CHEETAH: generated from #def engineData at line 4, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        # Styles
        write('''<link rel="shortcut icon" href="''')
        _v = VFFSL(SL,"sp_img",True) # '$sp_img' on line 7, col 33
        if _v is not None: write(_filter(_v, rawExpr='$sp_img')) # from line 7, col 33.
        write('''/favicon.png">
<link rel="stylesheet" href="''')
        _v = VFFSL(SL,"eng_css",True) # '$eng_css' on line 8, col 30
        if _v is not None: write(_filter(_v, rawExpr='$eng_css')) # from line 8, col 30.
        write('''/buttons.css" type="text/css" media="screen"/>

''')
        # Scripts
        write('''<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 11, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 11, col 37.
        write('''/jquery.validate.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 12, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 12, col 37.
        write('''/jquery.timer.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 13, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 13, col 37.
        write('''/jquery.tablesorter.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"sp_js",True) # '$sp_js' on line 14, col 37
        if _v is not None: write(_filter(_v, rawExpr='$sp_js')) # from line 14, col 37.
        write('''/webserver.js"></script>


<div align="center">
<form id="webserver_form">
    <fieldset>
        <legend align="center"><strong><label style="display: -moz-inline-box; display: inline-block" for="status_lbl"><span style="display: block; width: 300px;">''')
        if False:
            _('Статус веб-сервера')
        _v = VFFSL(SL,"_",False)('Статус веб-сервера') # "$_('\xd1\xf2\xe0\xf2\xf3\xf1 \xe2\xe5\xe1-\xf1\xe5\xf0\xe2\xe5\xf0\xe0')" on line 20, col 164
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd1\xf2\xe0\xf2\xf3\xf1 \xe2\xe5\xe1-\xf1\xe5\xf0\xe2\xe5\xf0\xe0')")) # from line 20, col 164.
        write(''':</span></label>
        <span id="status_lbl" style="width: 100px"></span></strong></legend>
        <br/>

        <div class="container">
        <p style=\'width: 800px;\'>
        <label style="display: -moz-inline-box; display: inline-block" for="trans_lbl"><span style="display: block; width: 300px;">''')
        if False:
            _('Активных транзакций к серверам БД')
        _v = VFFSL(SL,"_",False)('Активных транзакций к серверам БД') # "$_('\xc0\xea\xf2\xe8\xe2\xed\xfb\xf5 \xf2\xf0\xe0\xed\xe7\xe0\xea\xf6\xe8\xe9 \xea \xf1\xe5\xf0\xe2\xe5\xf0\xe0\xec \xc1\xc4')" on line 26, col 132
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc0\xea\xf2\xe8\xe2\xed\xfb\xf5 \xf2\xf0\xe0\xed\xe7\xe0\xea\xf6\xe8\xe9 \xea \xf1\xe5\xf0\xe2\xe5\xf0\xe0\xec \xc1\xc4')")) # from line 26, col 132.
        write(''':</span></label>
        <span id="trans_lbl"></span>
        <span class="buttons">
            <button id=\'threads_btn\' type="button"><img src="''')
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 29, col 62
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 29, col 62.
        write('''/actions/magnifier.png"/>&nbsp;''')
        if False:
            _('Потоки')
        _v = VFFSL(SL,"_",False)('Потоки') # "$_('\xcf\xee\xf2\xee\xea\xe8')" on line 29, col 101
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xee\xf2\xee\xea\xe8')")) # from line 29, col 101.
        write('''</button>
        </span>
        &nbsp;<label><input type="checkbox" id="showAlert">''')
        if False:
            _('показывать предупреждение')
        _v = VFFSL(SL,"_",False)('показывать предупреждение') # "$_('\xef\xee\xea\xe0\xe7\xfb\xe2\xe0\xf2\xfc \xef\xf0\xe5\xe4\xf3\xef\xf0\xe5\xe6\xe4\xe5\xed\xe8\xe5')" on line 31, col 60
        if _v is not None: write(_filter(_v, rawExpr="$_('\xef\xee\xea\xe0\xe7\xfb\xe2\xe0\xf2\xfc \xef\xf0\xe5\xe4\xf3\xef\xf0\xe5\xe6\xe4\xe5\xed\xe8\xe5')")) # from line 31, col 60.
        write('''</label>
        </p>
        <br/>

        <p style=\'width: 800px;\'>
        <label style="display: -moz-inline-box; display: inline-block" for="cur_time_span"><span style="display: block; width: 300px;">''')
        if False:
            _('Текущее время веб-сервера')
        _v = VFFSL(SL,"_",False)('Текущее время веб-сервера') # "$_('\xd2\xe5\xea\xf3\xf9\xe5\xe5 \xe2\xf0\xe5\xec\xff \xe2\xe5\xe1-\xf1\xe5\xf0\xe2\xe5\xf0\xe0')" on line 36, col 136
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd2\xe5\xea\xf3\xf9\xe5\xe5 \xe2\xf0\xe5\xec\xff \xe2\xe5\xe1-\xf1\xe5\xf0\xe2\xe5\xf0\xe0')")) # from line 36, col 136.
        write(''':</span></label>
        <span id="cur_time_span"></span>
        &nbsp;
        <label style="display: -moz-inline-box; display: inline-block" for="refresh_time"><span style="display: block">''')
        if False:
            _('Автообновление экрана')
        _v = VFFSL(SL,"_",False)('Автообновление экрана') # "$_('\xc0\xe2\xf2\xee\xee\xe1\xed\xee\xe2\xeb\xe5\xed\xe8\xe5 \xfd\xea\xf0\xe0\xed\xe0')" on line 39, col 120
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc0\xe2\xf2\xee\xee\xe1\xed\xee\xe2\xeb\xe5\xed\xe8\xe5 \xfd\xea\xf0\xe0\xed\xe0')")) # from line 39, col 120.
        write(""":</span></label>
        <span>
            <select id='refresh_time'>
                <option value='null'>""")
        if False:
            _('Не обновлять')
        _v = VFFSL(SL,"_",False)('Не обновлять') # "$_('\xcd\xe5 \xee\xe1\xed\xee\xe2\xeb\xff\xf2\xfc')" on line 42, col 38
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcd\xe5 \xee\xe1\xed\xee\xe2\xeb\xff\xf2\xfc')")) # from line 42, col 38.
        write("""</option>
                <option value='1'>1 """)
        if False:
            _('сек')
        _v = VFFSL(SL,"_",False)('сек') # "$_('\xf1\xe5\xea')" on line 43, col 37
        if _v is not None: write(_filter(_v, rawExpr="$_('\xf1\xe5\xea')")) # from line 43, col 37.
        write("""</option>
                <option selected value='3'>3 """)
        if False:
            _('сек')
        _v = VFFSL(SL,"_",False)('сек') # "$_('\xf1\xe5\xea')" on line 44, col 46
        if _v is not None: write(_filter(_v, rawExpr="$_('\xf1\xe5\xea')")) # from line 44, col 46.
        write("""</option>
                <option value='5'>5 """)
        if False:
            _('сек')
        _v = VFFSL(SL,"_",False)('сек') # "$_('\xf1\xe5\xea')" on line 45, col 37
        if _v is not None: write(_filter(_v, rawExpr="$_('\xf1\xe5\xea')")) # from line 45, col 37.
        write("""</option>
                <option value='10'>10 """)
        if False:
            _('сек')
        _v = VFFSL(SL,"_",False)('сек') # "$_('\xf1\xe5\xea')" on line 46, col 39
        if _v is not None: write(_filter(_v, rawExpr="$_('\xf1\xe5\xea')")) # from line 46, col 39.
        write("""</option>
                <option value='30'>30 """)
        if False:
            _('сек')
        _v = VFFSL(SL,"_",False)('сек') # "$_('\xf1\xe5\xea')" on line 47, col 39
        if _v is not None: write(_filter(_v, rawExpr="$_('\xf1\xe5\xea')")) # from line 47, col 39.
        write("""</option>
                <option value='60'>60 """)
        if False:
            _('сек')
        _v = VFFSL(SL,"_",False)('сек') # "$_('\xf1\xe5\xea')" on line 48, col 39
        if _v is not None: write(_filter(_v, rawExpr="$_('\xf1\xe5\xea')")) # from line 48, col 39.
        write('''</option>
            </select>
        </span>

        </p>
        <br/>

        </div>

        <p>
        <label style="display: -moz-inline-box; display: inline-block" for="wait_edt"><span style="display: block; width: 200px;">''')
        if False:
            _('Ждать перед выключением')
        _v = VFFSL(SL,"_",False)('Ждать перед выключением') # "$_('\xc6\xe4\xe0\xf2\xfc \xef\xe5\xf0\xe5\xe4 \xe2\xfb\xea\xeb\xfe\xf7\xe5\xed\xe8\xe5\xec')" on line 58, col 131
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc6\xe4\xe0\xf2\xfc \xef\xe5\xf0\xe5\xe4 \xe2\xfb\xea\xeb\xfe\xf7\xe5\xed\xe8\xe5\xec')")) # from line 58, col 131.
        write('''</span></label>
        <input name="wait_edt" id="wait_edt" type="text" value=60 style="width: 30px"/>
        <label style="display: -moz-inline-box; display: inline-block" for="wait_edt"><span style="display: block; width: 30px;">''')
        if False:
            _('сек')
        _v = VFFSL(SL,"_",False)('сек') # "$_('\xf1\xe5\xea')" on line 60, col 130
        if _v is not None: write(_filter(_v, rawExpr="$_('\xf1\xe5\xea')")) # from line 60, col 130.
        write('''</span></label>
        <span class="buttons">
            <button id=\'stop_btn\' type="button"><img src="''')
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 62, col 59
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 62, col 59.
        write('''/errors/exclamation.png"/>&nbsp;''')
        if False:
            _('Стоп')
        _v = VFFSL(SL,"_",False)('Стоп') # "$_('\xd1\xf2\xee\xef')" on line 62, col 99
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd1\xf2\xee\xef')")) # from line 62, col 99.
        write('''</button>
            <button id=\'cancel_btn\' disabled type="button"><img src="''')
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 63, col 70
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 63, col 70.
        write('''/actions/cancel.png"/>&nbsp;''')
        if False:
            _('Отмена стопа')
        _v = VFFSL(SL,"_",False)('Отмена стопа') # "$_('\xce\xf2\xec\xe5\xed\xe0 \xf1\xf2\xee\xef\xe0')" on line 63, col 106
        if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xf2\xec\xe5\xed\xe0 \xf1\xf2\xee\xef\xe0')")) # from line 63, col 106.
        write('''</button>
        </span>
        </p>
        <p>
            <input type=\'checkbox\' name=\'trans_alert_chk\' id=\'trans_alert_chk\' size=\'8\'/>
            <label style="display: -moz-inline-box; display: inline-block" for="trans_alert_chk">''')
        if False:
            _('Останавливать как только все транзакции завершатся')
        _v = VFFSL(SL,"_",False)('Останавливать как только все транзакции завершатся') # "$_('\xce\xf1\xf2\xe0\xed\xe0\xe2\xeb\xe8\xe2\xe0\xf2\xfc \xea\xe0\xea \xf2\xee\xeb\xfc\xea\xee \xe2\xf1\xe5 \xf2\xf0\xe0\xed\xe7\xe0\xea\xf6\xe8\xe8 \xe7\xe0\xe2\xe5\xf0\xf8\xe0\xf2\xf1\xff')" on line 68, col 98
        if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xf1\xf2\xe0\xed\xe0\xe2\xeb\xe8\xe2\xe0\xf2\xfc \xea\xe0\xea \xf2\xee\xeb\xfc\xea\xee \xe2\xf1\xe5 \xf2\xf0\xe0\xed\xe7\xe0\xea\xf6\xe8\xe8 \xe7\xe0\xe2\xe5\xf0\xf8\xe0\xf2\xf1\xff')")) # from line 68, col 98.
        write('''</label>
        </p>
        <br/>

        <div id="timer_div" style="display:none">
            <p>
            <label style="display: -moz-inline-box; display: inline-block" for="timer_lbl"><span style="display: block; width: 300px;">''')
        if False:
            _('Таймер (веб-сервер остановится через)')
        _v = VFFSL(SL,"_",False)('Таймер (веб-сервер остановится через)') # "$_('\xd2\xe0\xe9\xec\xe5\xf0 (\xe2\xe5\xe1-\xf1\xe5\xf0\xe2\xe5\xf0 \xee\xf1\xf2\xe0\xed\xee\xe2\xe8\xf2\xf1\xff \xf7\xe5\xf0\xe5\xe7)')" on line 74, col 136
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd2\xe0\xe9\xec\xe5\xf0 (\xe2\xe5\xe1-\xf1\xe5\xf0\xe2\xe5\xf0 \xee\xf1\xf2\xe0\xed\xee\xe2\xe8\xf2\xf1\xff \xf7\xe5\xf0\xe5\xe7)')")) # from line 74, col 136.
        write('''</span></label>
            <span id="timer_lbl" style="width: 30px"></span>
            <label style="display: -moz-inline-box; display: inline-block" for="timer_lbl"><span style="display: block; width: 30px;">''')
        if False:
            _('сек')
        _v = VFFSL(SL,"_",False)('сек') # "$_('\xf1\xe5\xea')" on line 76, col 135
        if _v is not None: write(_filter(_v, rawExpr="$_('\xf1\xe5\xea')")) # from line 76, col 135.
        write('''</span></label>
            <span class="buttons">
                <button id=\'reset_btn\' type="button"><img src="''')
        _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 78, col 64
        if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 78, col 64.
        write('''/actions/reset.gif"/>&nbsp;''')
        if False:
            _('Сброс таймера')
        _v = VFFSL(SL,"_",False)('Сброс таймера') # "$_('\xd1\xe1\xf0\xee\xf1 \xf2\xe0\xe9\xec\xe5\xf0\xe0')" on line 78, col 99
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd1\xe1\xf0\xee\xf1 \xf2\xe0\xe9\xec\xe5\xf0\xe0')")) # from line 78, col 99.
        write('''</button>
            </span>
            </p>
            <br/>
       </div>

        <p>
        <div id="msg">
        </div>
        </p>

        <div id="threads_div" style="display:none; text-align: center;">
''')
        if VFFSL(SL,"varExists",False)("useLayers") and VFFSL(SL,"useLayers",True): # generated from line 90, col 13
            write('''                <hr>
                <div style=\'text-align: center; display: inline-block;\'>
                    <div style=\'text-align: left; display: inline-block;\'>
                        <span>
                            <label style="display: -moz-inline-box; display: inline-block; width:100px;" for="layers"><span style="display: block; width: 300px;">\xd1\xeb\xee\xe8:</span></label>
                            <select id=\'layers\'>
                            </select>
                            <span class="buttons">
                                <button id=\'refresh_layers_btn\' type="button"><img src="''')
            _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 99, col 89
            if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 99, col 89.
            write('''/images/refresh.png"/>&nbsp;''')
            if False:
                _('Обновить слои')
            _v = VFFSL(SL,"_",False)('Обновить слои') # "$_('\xce\xe1\xed\xee\xe2\xe8\xf2\xfc \xf1\xeb\xee\xe8')" on line 99, col 125
            if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xe1\xed\xee\xe2\xe8\xf2\xfc \xf1\xeb\xee\xe8')")) # from line 99, col 125.
            write('''</button>
                            </span>
                        </span>
                    </div>
                </div>
                <br/>
''')
        write('''
            <strong>''')
        if False:
            _('Потоки')
        _v = VFFSL(SL,"_",False)('Потоки') # "$_('\xcf\xee\xf2\xee\xea\xe8')" on line 107, col 21
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xee\xf2\xee\xea\xe8')")) # from line 107, col 21.
        write('''</strong>&nbsp;(''')
        if False:
            _('макс.')
        _v = VFFSL(SL,"_",False)('макс.') # "$_('\xec\xe0\xea\xf1.')" on line 107, col 49
        if _v is not None: write(_filter(_v, rawExpr="$_('\xec\xe0\xea\xf1.')")) # from line 107, col 49.
        write(''' <span id="max_threads_span"></span>)
            <table id="threads_tbl">
                <thead>
                    <tr>
                        <th>ID</th>
''')
        if VFFSL(SL,"varExists",False)("useLayers") and VFFSL(SL,"useLayers",True): # generated from line 112, col 25
            write('''                            <th>''')
            if False:
                _('Код слоя')
            _v = VFFSL(SL,"_",False)('Код слоя') # "$_('\xca\xee\xe4 \xf1\xeb\xee\xff')" on line 113, col 33
            if _v is not None: write(_filter(_v, rawExpr="$_('\xca\xee\xe4 \xf1\xeb\xee\xff')")) # from line 113, col 33.
            write('''</th>
                            <th width=200>''')
            if False:
                _('Организация')
            _v = VFFSL(SL,"_",False)('Организация') # "$_('\xce\xf0\xe3\xe0\xed\xe8\xe7\xe0\xf6\xe8\xff')" on line 114, col 43
            if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xf0\xe3\xe0\xed\xe8\xe7\xe0\xf6\xe8\xff')")) # from line 114, col 43.
            write('''</th>
''')
        write('''                        <th>''')
        if False:
            _('Актив транз')
        _v = VFFSL(SL,"_",False)('Актив транз') # "$_('\xc0\xea\xf2\xe8\xe2 \xf2\xf0\xe0\xed\xe7')" on line 116, col 29
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc0\xea\xf2\xe8\xe2 \xf2\xf0\xe0\xed\xe7')")) # from line 116, col 29.
        write('''</th>
                        <th>''')
        if False:
            _('Старт транз')
        _v = VFFSL(SL,"_",False)('Старт транз') # "$_('\xd1\xf2\xe0\xf0\xf2 \xf2\xf0\xe0\xed\xe7')" on line 117, col 29
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd1\xf2\xe0\xf0\xf2 \xf2\xf0\xe0\xed\xe7')")) # from line 117, col 29.
        write('''</th>
                        <th>''')
        if False:
            _('Стоп транз')
        _v = VFFSL(SL,"_",False)('Стоп транз') # "$_('\xd1\xf2\xee\xef \xf2\xf0\xe0\xed\xe7')" on line 118, col 29
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd1\xf2\xee\xef \xf2\xf0\xe0\xed\xe7')")) # from line 118, col 29.
        write('''</th>
                        <th>''')
        if False:
            _('Длит транз')
        _v = VFFSL(SL,"_",False)('Длит транз') # "$_('\xc4\xeb\xe8\xf2 \xf2\xf0\xe0\xed\xe7')" on line 119, col 29
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xeb\xe8\xf2 \xf2\xf0\xe0\xed\xe7')")) # from line 119, col 29.
        write('''</th>
                        <th nowrap width=600>''')
        if False:
            _('Последний SQL-запрос')
        _v = VFFSL(SL,"_",False)('Последний SQL-запрос') # "$_('\xcf\xee\xf1\xeb\xe5\xe4\xed\xe8\xe9 SQL-\xe7\xe0\xef\xf0\xee\xf1')" on line 120, col 46
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xee\xf1\xeb\xe5\xe4\xed\xe8\xe9 SQL-\xe7\xe0\xef\xf0\xee\xf1')")) # from line 120, col 46.
        write('''</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
    </fieldset>
</form>
</div>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_webserver_tmpl= 'writeBody'

## END CLASS DEFINITION

if not hasattr(webserver_tmpl, '_initCheetahAttributes'):
    templateAPIClass = getattr(webserver_tmpl, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(webserver_tmpl)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=webserver_tmpl()).run()


