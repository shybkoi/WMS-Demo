#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from systems.engine_main import engine_main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336166.691
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:46 2016'
__CHEETAH_src__ = 'systems\\ENGINE\\EQUIPMENT\\templates\\equipment_main.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class equipment_main(engine_main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        engine_main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def engineData(self, **KWS):



        ## CHEETAH: generated from #def engineData at line 4, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        # Styles
        write('''<link rel="stylesheet" href="''')
        _v = VFFSL(SL,"sp_css",True) # '$sp_css' on line 7, col 30
        if _v is not None: write(_filter(_v, rawExpr='$sp_css')) # from line 7, col 30.
        write('''/tables.css" type="text/css"/>
<link rel="stylesheet" href="''')
        _v = VFFSL(SL,"sp_css",True) # '$sp_css' on line 8, col 30
        if _v is not None: write(_filter(_v, rawExpr='$sp_css')) # from line 8, col 30.
        write('''/align.css" type="text/css"/>
<link rel="stylesheet" type="text/css" media="screen" href="''')
        _v = VFFSL(SL,"sp_css",True) # '$sp_css' on line 9, col 61
        if _v is not None: write(_filter(_v, rawExpr='$sp_css')) # from line 9, col 61.
        write('''/equipment.css" />

''')
        # Scripts
        write('''<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 12, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 12, col 37.
        write('''/ui.dialog.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 13, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 13, col 37.
        write('''/jquery.tablesorter.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 14, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 14, col 37.
        write('''/jquery.rightClick.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 15, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 15, col 37.
        write('''/jquery.rowFocus.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 16, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 16, col 37.
        write('''/kTblScroll.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 17, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 17, col 37.
        write('''/kScrollableToDown.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 18, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 18, col 37.
        write('''/jquery.blockUI.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 19, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 19, col 37.
        write('''/jquery.validate.min.js"></script>
<script type=\'text/javascript\' src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 20, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 20, col 37.
        write('''/jquery.contextMenu.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 21, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 21, col 37.
        write('''/ui.datepicker.min.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 22, col 37
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 22, col 37.
        write('''/i18n/ui.datepicker-ru.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"sps_js.KURSSKLAD",True) # '$sps_js.KURSSKLAD' on line 23, col 37
        if _v is not None: write(_filter(_v, rawExpr='$sps_js.KURSSKLAD')) # from line 23, col 37.
        write('''/k.formats.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"sps_js.KURSSKLAD",True) # '$sps_js.KURSSKLAD' on line 24, col 37
        if _v is not None: write(_filter(_v, rawExpr='$sps_js.KURSSKLAD')) # from line 24, col 37.
        write('''/k.form.js"></script>
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"sp_js",True) # '$sp_js' on line 25, col 37
        if _v is not None: write(_filter(_v, rawExpr='$sp_js')) # from line 25, col 37.
        write('''/equipment.js"></script>

<div id="content">
</div>

<ul style="display: none; width: 320px" id="menuEquip" class="contextMenu">
    <li class="add">
        <a href="#addEquip">''')
        if False:
            _('Добавить')
        _v = VFFSL(SL,"_",False)('Добавить') # "$_('\xc4\xee\xe1\xe0\xe2\xe8\xf2\xfc')" on line 32, col 29
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xee\xe1\xe0\xe2\xe8\xf2\xfc')")) # from line 32, col 29.
        write('''</a>
    </li>
    <li class="edit">
        <a href="#editEquip">''')
        if False:
            _('Редактировать')
        _v = VFFSL(SL,"_",False)('Редактировать') # "$_('\xd0\xe5\xe4\xe0\xea\xf2\xe8\xf0\xee\xe2\xe0\xf2\xfc')" on line 35, col 30
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd0\xe5\xe4\xe0\xea\xf2\xe8\xf0\xee\xe2\xe0\xf2\xfc')")) # from line 35, col 30.
        write('''</a>
    </li>
    <li class="delete">
        <a href="#delEquip">''')
        if False:
            _('Удалить')
        _v = VFFSL(SL,"_",False)('Удалить') # "$_('\xd3\xe4\xe0\xeb\xe8\xf2\xfc')" on line 38, col 29
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd3\xe4\xe0\xeb\xe8\xf2\xfc')")) # from line 38, col 29.
        write('''</a>
    </li>
    <li class="deactivate">
        <a href="#deactivateEquip">''')
        if False:
            _('Деактивировать')
        _v = VFFSL(SL,"_",False)('Деактивировать') # "$_('\xc4\xe5\xe0\xea\xf2\xe8\xe2\xe8\xf0\xee\xe2\xe0\xf2\xfc')" on line 41, col 36
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xe5\xe0\xea\xf2\xe8\xe2\xe8\xf0\xee\xe2\xe0\xf2\xfc')")) # from line 41, col 36.
        write('''</a>
    </li>
    <li class="refresh">
        <a href="#refreshEquip">''')
        if False:
            _('Обновить список')
        _v = VFFSL(SL,"_",False)('Обновить список') # "$_('\xce\xe1\xed\xee\xe2\xe8\xf2\xfc \xf1\xef\xe8\xf1\xee\xea')" on line 44, col 33
        if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xe1\xed\xee\xe2\xe8\xf2\xfc \xf1\xef\xe8\xf1\xee\xea')")) # from line 44, col 33.
        write('''</a>
    </li>
    <li class="separator">
    </li>
    <li class="quit">
        <a href="#closeSession">''')
        if False:
            _('Принудительно закрыть сессию')
        _v = VFFSL(SL,"_",False)('Принудительно закрыть сессию') # "$_('\xcf\xf0\xe8\xed\xf3\xe4\xe8\xf2\xe5\xeb\xfc\xed\xee \xe7\xe0\xea\xf0\xfb\xf2\xfc \xf1\xe5\xf1\xf1\xe8\xfe')" on line 49, col 33
        if _v is not None: write(_filter(_v, rawExpr="$_('\xcf\xf0\xe8\xed\xf3\xe4\xe8\xf2\xe5\xeb\xfc\xed\xee \xe7\xe0\xea\xf0\xfb\xf2\xfc \xf1\xe5\xf1\xf1\xe8\xfe')")) # from line 49, col 33.
        write('''</a>
    </li>
</ul>

<ul style="display: none; width: 200px" id="menuTypes" class="contextMenu">
    <li class="add">
        <a href="#addType">''')
        if False:
            _('Добавить')
        _v = VFFSL(SL,"_",False)('Добавить') # "$_('\xc4\xee\xe1\xe0\xe2\xe8\xf2\xfc')" on line 55, col 28
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc4\xee\xe1\xe0\xe2\xe8\xf2\xfc')")) # from line 55, col 28.
        write('''</a>
    </li>
    <li class="edit">
        <a href="#editType">''')
        if False:
            _('Редактировать')
        _v = VFFSL(SL,"_",False)('Редактировать') # "$_('\xd0\xe5\xe4\xe0\xea\xf2\xe8\xf0\xee\xe2\xe0\xf2\xfc')" on line 58, col 29
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd0\xe5\xe4\xe0\xea\xf2\xe8\xf0\xee\xe2\xe0\xf2\xfc')")) # from line 58, col 29.
        write('''</a>
    </li>
    <li class="delete">
        <a href="#delType">''')
        if False:
            _('Удалить')
        _v = VFFSL(SL,"_",False)('Удалить') # "$_('\xd3\xe4\xe0\xeb\xe8\xf2\xfc')" on line 61, col 28
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd3\xe4\xe0\xeb\xe8\xf2\xfc')")) # from line 61, col 28.
        write('''</a>
    </li>
    <li class="refresh">
        <a href="#refreshType">''')
        if False:
            _('Обновить список')
        _v = VFFSL(SL,"_",False)('Обновить список') # "$_('\xce\xe1\xed\xee\xe2\xe8\xf2\xfc \xf1\xef\xe8\xf1\xee\xea')" on line 64, col 32
        if _v is not None: write(_filter(_v, rawExpr="$_('\xce\xe1\xed\xee\xe2\xe8\xf2\xfc \xf1\xef\xe8\xf1\xee\xea')")) # from line 64, col 32.
        write('''</a>
    </li>
</ul>

''')
        # Dialogs
        write('''<div id="dlgadd" class="dialog flora" align="center"></div>
<div id="dlgTypes" class="dialog flora" align="center"></div>
<div id="dlgaddType" class="dialog flora" align="center"></div>

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_equipment_main= 'writeBody'

## END CLASS DEFINITION

if not hasattr(equipment_main, '_initCheetahAttributes'):
    templateAPIClass = getattr(equipment_main, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(equipment_main)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=equipment_main()).run()


