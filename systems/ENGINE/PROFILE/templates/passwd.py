#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from profile_main import profile_main

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336167.1259999
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:47 2016'
__CHEETAH_src__ = 'systems\\ENGINE\\PROFILE\\templates\\passwd.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:13 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class passwd(profile_main):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        profile_main.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def profileData(self, **KWS):



        ## CHEETAH: generated from #def profileData at line 3, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''        <link rel="stylesheet" type="text/css" media="screen" href="/ENGINE/PROFILE/css/passwd.css">
        <script>
            jQuery(document).ready(function() {
                // \xe7\xe0\xef\xee\xeb\xed\xe5\xed\xe8\xe5 \xf4\xee\xf0\xec\xfb \xef\xe0\xf0\xe0\xec\xe5\xf2\xf0\xe0\xec\xe8
''')
        if VFFSL(SL,"varExists",False)('fieldvalues'): # generated from line 8, col 17
            for field, val in VFN(VFFSL(SL,"fieldvalues",True),"items",False)(): # generated from line 9, col 21
                write('''                        jQuery("#''')
                _v = VFFSL(SL,"field",True) # '$field' on line 10, col 35
                if _v is not None: write(_filter(_v, rawExpr='$field')) # from line 10, col 35.
                write('''").val("''')
                _v = VFFSL(SL,"val",True) # '$val' on line 10, col 49
                if _v is not None: write(_filter(_v, rawExpr='$val')) # from line 10, col 49.
                write('''");
''')
        write('''                // \xf1\xee\xee\xe1\xf9\xe5\xed\xe8\xff \xee\xe1 \xee\xf8\xe8\xe1\xea\xe0\xf5
''')
        if VFFSL(SL,"varExists",False)('fields'): # generated from line 14, col 17
            for field in VFFSL(SL,"fields",True): # generated from line 15, col 21
                write('''                        jQuery("#''')
                _v = VFFSL(SL,"field.name",True) # '$field.name' on line 16, col 35
                if _v is not None: write(_filter(_v, rawExpr='$field.name')) # from line 16, col 35.
                write('''").after("<div class=\'errormsg\'>''')
                _v = VFFSL(SL,"field.errmes",True) # '$field.errmes' on line 16, col 78
                if _v is not None: write(_filter(_v, rawExpr='$field.errmes')) # from line 16, col 78.
                write('''</div>");
''')
        write('''            });
        </script>
''')
        if VFFSL(SL,"varExists",False)('success') and VFFSL(SL,"success",True): # generated from line 21, col 9
            write("""            <div id='success_msg'>
                """)
            if False:
                _('Ваш пароль успешно изменён!')
            _v = VFFSL(SL,"_",False)('Ваш пароль успешно изменён!') # "$_('\xc2\xe0\xf8 \xef\xe0\xf0\xee\xeb\xfc \xf3\xf1\xef\xe5\xf8\xed\xee \xe8\xe7\xec\xe5\xed\xb8\xed!')" on line 23, col 17
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc2\xe0\xf8 \xef\xe0\xf0\xee\xeb\xfc \xf3\xf1\xef\xe5\xf8\xed\xee \xe8\xe7\xec\xe5\xed\xb8\xed!')")) # from line 23, col 17.
            write('''
            </div>
''')
        write('''        <form method="POST" action="changepasswd" name="changepasswd-form">
            <div class="changepasswd-block">

                <table>
                    <thead>
                        <tr><th colspan="2">''')
        if False:
            _('Изменение пароля пользователя')
        _v = VFFSL(SL,"_",False)('Изменение пароля пользователя') # "$_('\xc8\xe7\xec\xe5\xed\xe5\xed\xe8\xe5 \xef\xe0\xf0\xee\xeb\xff \xef\xee\xeb\xfc\xe7\xee\xe2\xe0\xf2\xe5\xeb\xff')" on line 31, col 45
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc8\xe7\xec\xe5\xed\xe5\xed\xe8\xe5 \xef\xe0\xf0\xee\xeb\xff \xef\xee\xeb\xfc\xe7\xee\xe2\xe0\xf2\xe5\xeb\xff')")) # from line 31, col 45.
        write('''</th></tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td>''')
        if False:
            _('Текущий пароль:')
        _v = VFFSL(SL,"_",False)('Текущий пароль:') # "$_('\xd2\xe5\xea\xf3\xf9\xe8\xe9 \xef\xe0\xf0\xee\xeb\xfc:')" on line 35, col 29
        if _v is not None: write(_filter(_v, rawExpr="$_('\xd2\xe5\xea\xf3\xf9\xe8\xe9 \xef\xe0\xf0\xee\xeb\xfc:')")) # from line 35, col 29.
        write('''</td>
                        <td>
                            <input type="password" value="" size="30" id="oldpasswd" name="oldpasswd">
                        </td>
                      </tr>

''')
        self._handleCheetahInclude('../systems/ENGINE/PROFILE/templates/passwd_verify.tmpl', trans=trans, includeFrom="file", raw=False)
        write('''
                    </tbody>
                </table>
            </div>
            <input type="SUBMIT" value="''')
        if False:
            _('Изменить пароль')
        _v = VFFSL(SL,"_",False)('Изменить пароль') # "$_('\xc8\xe7\xec\xe5\xed\xe8\xf2\xfc \xef\xe0\xf0\xee\xeb\xfc')" on line 46, col 41
        if _v is not None: write(_filter(_v, rawExpr="$_('\xc8\xe7\xec\xe5\xed\xe8\xf2\xfc \xef\xe0\xf0\xee\xeb\xfc')")) # from line 46, col 41.
        write('''" name="submitbutton" id="submitbutton">
        </form>
''')
        if VFFSL(SL,"varExists",False)('has_barcode') and VFFSL(SL,"has_barcode",True): # generated from line 48, col 9
            write('''            <script type="text/javascript" src="/ENGINE/PROFILE/js/printbc.js"></script>

            <div id="printbarcode">
                <table>
                    <thead>
                        <tr><th colspan="2">''')
            if False:
                _('Генерация и печать ШК или QR-кода авторизации')
            _v = VFFSL(SL,"_",False)('Генерация и печать ШК или QR-кода авторизации') # "$_('\xc3\xe5\xed\xe5\xf0\xe0\xf6\xe8\xff \xe8 \xef\xe5\xf7\xe0\xf2\xfc \xd8\xca \xe8\xeb\xe8 QR-\xea\xee\xe4\xe0 \xe0\xe2\xf2\xee\xf0\xe8\xe7\xe0\xf6\xe8\xe8')" on line 54, col 45
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc3\xe5\xed\xe5\xf0\xe0\xf6\xe8\xff \xe8 \xef\xe5\xf7\xe0\xf2\xfc \xd8\xca \xe8\xeb\xe8 QR-\xea\xee\xe4\xe0 \xe0\xe2\xf2\xee\xf0\xe8\xe7\xe0\xf6\xe8\xe8')")) # from line 54, col 45.
            write('''</th></tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td>''')
            if False:
                _('Текущий пароль')
            _v = VFFSL(SL,"_",False)('Текущий пароль') # "$_('\xd2\xe5\xea\xf3\xf9\xe8\xe9 \xef\xe0\xf0\xee\xeb\xfc')" on line 58, col 29
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd2\xe5\xea\xf3\xf9\xe8\xe9 \xef\xe0\xf0\xee\xeb\xfc')")) # from line 58, col 29.
            write(''':</td>
                        <td>
                            <input type="password" value="" size="30" id="passwdBC" name="passwdBC">
                            <div class="errormsg">
                            </div>
                        </td>
                      </tr>
                    </tbody>
                </table>
            </div>

            <div id=\'success_msg_bc\'>
            </div>
            <br>
            <input type="button" value="''')
            if False:
                _('Генерировать код')
            _v = VFFSL(SL,"_",False)('Генерировать код') # "$_('\xc3\xe5\xed\xe5\xf0\xe8\xf0\xee\xe2\xe0\xf2\xfc \xea\xee\xe4')" on line 72, col 41
            if _v is not None: write(_filter(_v, rawExpr="$_('\xc3\xe5\xed\xe5\xf0\xe8\xf0\xee\xe2\xe0\xf2\xfc \xea\xee\xe4')")) # from line 72, col 41.
            write('''" name="genbcbutton" id="genbcbutton">
            <input type="button" value="''')
            if False:
                _('Распечатать ШК')
            _v = VFFSL(SL,"_",False)('Распечатать ШК') # "$_('\xd0\xe0\xf1\xef\xe5\xf7\xe0\xf2\xe0\xf2\xfc \xd8\xca')" on line 73, col 41
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd0\xe0\xf1\xef\xe5\xf7\xe0\xf2\xe0\xf2\xfc \xd8\xca')")) # from line 73, col 41.
            write('''" name="prnbcbutton" id="prnbcbutton">
            <input type="button" value="''')
            if False:
                _('Распечатать QR-код')
            _v = VFFSL(SL,"_",False)('Распечатать QR-код') # "$_('\xd0\xe0\xf1\xef\xe5\xf7\xe0\xf2\xe0\xf2\xfc QR-\xea\xee\xe4')" on line 74, col 41
            if _v is not None: write(_filter(_v, rawExpr="$_('\xd0\xe0\xf1\xef\xe5\xf7\xe0\xf2\xe0\xf2\xfc QR-\xea\xee\xe4')")) # from line 74, col 41.
            write('''" name="prnqrbutton" id="prnqrbutton">
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_passwd= 'writeBody'

## END CLASS DEFINITION

if not hasattr(passwd, '_initCheetahAttributes'):
    templateAPIClass = getattr(passwd, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(passwd)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=passwd()).run()


