#!/usr/bin/env python
# -*- coding: cp1251 -*-



##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0rc8'
__CHEETAH_versionTuple__ = (2, 0, 0, 'candidate', 8)
__CHEETAH_genTime__ = 1482336165.4530001
__CHEETAH_genTimestamp__ = 'Wed Dec 21 18:02:45 2016'
__CHEETAH_src__ = 'systems\\engine_main_mob.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Dec 21 09:10:14 2016'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class engine_main_mob(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        Template.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def engineData_mob(self, **KWS):



        ## CHEETAH: generated from #block engineData_mob at line 55, col 9.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''            \xed\xe5\xf2 \xe8\xed\xf4\xee\xf0\xec\xe0\xf6\xe8\xe8 \xe4\xeb\xff \xee\xf2\xee\xe1\xf0\xe0\xe6\xe5\xed\xe8\xff
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="windows-1251"/>
    <meta name="robots" content="noindex, nofollow">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
''')
        if VFFSL(SL,"varExists",False)("system_name"): # generated from line 8, col 5
            write('''    <title>''')
            _v = VFFSL(SL,"system_name",True) # '$system_name' on line 9, col 12
            if _v is not None: write(_filter(_v, rawExpr='$system_name')) # from line 9, col 12.
            write('''</title>
''')
        if VFFSL(SL,"varExists",False)("eng_img"): # generated from line 11, col 5
            write('''    <link rel="shortcut icon" href="''')
            _v = VFFSL(SL,"eng_img",True) # '$eng_img' on line 12, col 37
            if _v is not None: write(_filter(_v, rawExpr='$eng_img')) # from line 12, col 37.
            write('''/favicon.ico">
''')
        write('''
    <link href="/locale/''')
        _v = VFFSL(SL,"getSesVar",False)('locale') # "$getSesVar('locale')" on line 15, col 25
        if _v is not None: write(_filter(_v, rawExpr="$getSesVar('locale')")) # from line 15, col 25.
        write('''/locale.json" lang="''')
        _v = VFFSL(SL,"getSesVar",False)('locale') # "$getSesVar('locale')" on line 15, col 65
        if _v is not None: write(_filter(_v, rawExpr="$getSesVar('locale')")) # from line 15, col 65.
        write('''" rel="gettext" />
    <script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 16, col 41
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 16, col 41.
        write('''/jquery-1.10.2.min.js"></script>
    <script type="text/javascript" src="''')
        _v = VFFSL(SL,"eng_js",True) # '$eng_js' on line 17, col 41
        if _v is not None: write(_filter(_v, rawExpr='$eng_js')) # from line 17, col 41.
        write('''/bootstrap/bootstrap.min.js"></script>

    <link href="''')
        _v = VFFSL(SL,"eng_css",True) # '$eng_css' on line 19, col 17
        if _v is not None: write(_filter(_v, rawExpr='$eng_css')) # from line 19, col 17.
        write('''/mobile/main_mob.css" rel="stylesheet" type="text/css" media="screen">
    <link href="''')
        _v = VFFSL(SL,"eng_css",True) # '$eng_css' on line 20, col 17
        if _v is not None: write(_filter(_v, rawExpr='$eng_css')) # from line 20, col 17.
        write('''/bootstrap/css/bootstrap.min.css" rel="stylesheet" type="text/css" media="screen">
    <link href="''')
        _v = VFFSL(SL,"eng_css",True) # '$eng_css' on line 21, col 17
        if _v is not None: write(_filter(_v, rawExpr='$eng_css')) # from line 21, col 17.
        write('''/bootstrap/css/bootstrap-responsive.min.css" rel="stylesheet" type="text/css" media="screen">

</head>
<body>
<script>
''')
        if VFFSL(SL,"varExists",False)('$sp_img'): # generated from line 26, col 5
            write('''      sp_img="''')
            _v = VFFSL(SL,"sp_img",True) # '$sp_img' on line 27, col 15
            if _v is not None: write(_filter(_v, rawExpr='$sp_img')) # from line 27, col 15.
            write('''";
''')
        #     #if $varExists('$sp_img.WMSMOBILE')
        #       sps_img="$sps_img.WMSMOBILE";
        #     #end if
        write('''</script>

  <div class="container">
    <!--Begin Head -->
''')
        if VFFSL(SL,"varExists",False)("userfio"): # generated from line 36, col 5
            write('''        <div class="navbar navbar-fixed-top">
            <div class=\'container navbar-inner\'>


                        <p class=\'brand\'>
                            ''')
            _v = VFFSL(SL,"userfio",True) # '$userfio' on line 42, col 29
            if _v is not None: write(_filter(_v, rawExpr='$userfio')) # from line 42, col 29.
            write('''
                        </p>


                    <ul class="nav nav-pills pull-right">
                       <li><a href="exit">\xc2\xfb\xf5\xee\xe4</a></li>
                    </ul>
            </div>
        </div>
''')
        write('''    <div id="container-content-wrapper">
      <div id="container-content" align="center">
        <!--Begin Interface Data-->
''')
        self.engineData_mob(trans=trans)
        write('''        <!--End Interface Data-->
      </div>
    </div>
  </div>

</body>
</html>




''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_engine_main_mob= 'respond'

## END CLASS DEFINITION

if not hasattr(engine_main_mob, '_initCheetahAttributes'):
    templateAPIClass = getattr(engine_main_mob, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(engine_main_mob)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=engine_main_mob()).run()


