(function (jQuery) {
    jQuery.fn.BoxIt = function (options) {
        var headerCheckbox;
        var columnCheckboxes;
        var defaults = {
            column: 'last',
            selectTip: 'Выбрать все',
            unselectTip: 'Убрать отметку со всех',
            stopPropagation: true,
            highlightSelected: false,
            highlightClass: 'boxitselected',
            tdClass: '',
            mode: 'simple',
            additionalItems: [],
            callbackItems: false,
            multiselect: true
        };
        var settings = jQuery.extend({}, defaults, options);
        var table = this;

        function bi_add_nth_column(context, el, injection, elClass) {
            var element = jQuery("<" + el + ">" + injection + "</" + el + ">");
            if (elClass) element.addClass(elClass);
            if (settings.column == 'first') jQuery(context).prepend(element);
            if (settings.column == 'last') jQuery(context).append(element);
            if (!isNaN(settings.column)) jQuery(el + ":nth-child(" + settings.column + ")", context).before(element);
        }

        function bi_setHighlight(box) {
            if (box.checked) jQuery(box).parents('tr').addClass(settings.highlightClass)
            else jQuery(box).parents('tr').removeClass(settings.highlightClass);
        }

        function bi_setCount() {
            var cur_val = jQuery("tbody tr td input:checked", table).length;
            cur_val == 0 ? jQuery('span.boxitcnt', table).text('') : jQuery('span.boxitcnt', table).text(cur_val);
            if (cur_val == jQuery("tbody tr:visible", table).length) headerCheckbox.attr('checked', 'checked');
            else headerCheckbox.attr('checked', '');
            if (!settings.multiselect && cur_val == 1) headerCheckbox.attr('checked', 'checked');
            if (settings.mode == 'extended') {
                jQuery("thead tr:last th:" + settings.column + "-child input", table).attr('checked', (cur_val == jQuery("tbody tr:visible", table).length) ? true : false)
                if (cur_val == jQuery("tbody tr:visible", table).length || cur_val == 0) jQuery("thead tr:last th:" + settings.column + "-child input", table).css({
                    'opacity': '1'
                });
                if (cur_val > 0 && cur_val < jQuery("tbody tr:visible", table).length) jQuery("thead tr:last th:" + settings.column + "-child input", table).attr('checked', true).css({
                    'opacity': '0.5'
                });
            }
        }
        return this.each(function () {
            var self = this;
            if (jQuery("thead tr").length > 1) {
                jQuery("thead tr", this).each(function (i) {
                    var last_th = jQuery('th:last', this);
                    if (last_th.attr('colspan') && parseFloat(last_th.attr('colspan')) > 1) {
                        last_th.attr('colspan', parseFloat(last_th.attr('colspan')) + 1);
                    } else bi_add_nth_column(this, 'th', '');
                });
            } else jQuery("thead tr").append("<th></th>");
            jQuery("tbody tr", this).each(function () {
                bi_add_nth_column(this, "td", "<input type='checkbox'/>", settings.tdClass);
            });
            if (isNaN(settings.column)) {
                jQuery("thead tr:last th:" + settings.column + "-child", this).append("<input type='checkbox'/><span class='boxitcnt'><span/>");
                headerCheckbox = jQuery("thead tr th:" + settings.column + "-child input:checkbox", this);
                if (settings.mode == 'extended') jQuery("thead tr:last th:" + settings.column + "-child input", this).dropCheckbox({
                    items: [{
                        name: 'Все',
                        selector: 'all'
                    }, {
                        name: 'Ничего',
                        selector: 'none'
                    }].concat(settings.additionalItems ? settings.additionalItems : none),
                    width: 130,
                    allSelector: 'all',
                    noneSelector: 'none',
                    callback: function (el, selector) {
                        var checkedStatus = (selector == 'all') ? true : false;
                        columnCheckboxes.each(function () {
                            if (!jQuery(this).parents('tr').is(':hidden')) {
                                if (!jQuery(this).is(':disabled')) {
                                    this.checked = checkedStatus;
                                    if (settings.highlightSelected) bi_setHighlight(this);
                                }
                            }
                        });
                        if (settings.callbackItems) settings.callbackItems.call($(el), $(el), selector);
                        bi_setCount();
                    }
                });
                columnCheckboxes = jQuery("tbody tr td:" + settings.column + "-child input:checkbox", this);
            } else {
                jQuery("thead tr  th:nth-child(" + settings.column + ")", this).append("<input type='checkbox'/>");
                headerCheckbox = jQuery("thead tr th:nth-child(" + settings.column + ") input:checkbox", this);
                columnCheckboxes = jQuery("tbody tr td:nth-child(" + settings.column + ") input:checkbox", this);
            }
            if (settings.mode == 'simple') {
                headerCheckbox.attr("title", settings.selectTip);
                headerCheckbox.click(function (e) {
                    var checkedStatus = this.checked;
                    columnCheckboxes.each(function () {
                        if (!jQuery(this).parents('tr').is(':hidden')) {
                            if (!jQuery(this).is(':disabled')) {
                                if (!settings.multiselect) self.BoxItClear();
                                this.checked = checkedStatus;
                                if (settings.highlightSelected) bi_setHighlight(this);
                                if (!settings.multiselect) return false;
                            }
                        }
                    });
                    if (checkedStatus == true) {
                        jQuery(this).attr("title", settings.unselectTip);
                    } else {
                        jQuery(this).attr("title", settings.selectTip);
                    }
                    bi_setCount();
                    if (settings.stopPropagation) {
                        e.stopPropagation();
                    }
                });
            }

            function CheckboxesInit(box) {
                if (settings.stopPropagation) {
                    box.click(function (e) {
                        e.stopPropagation();
                    });
                }
                box.change(function () {
                    if (!settings.multiselect) {
                        var check = $(this).attr('checked');
                        if (check) {
                            self.BoxItClear();
                            $(this).attr('checked', check);
                        }
                    }
                    if (settings.highlightSelected) bi_setHighlight(this);
                    bi_setCount(self);
                });
            }
            CheckboxesInit(columnCheckboxes);

            function selector() {
                var selector = '';
                if (isNaN(settings.column)) {
                    selector = "td:" + settings.column + "-child";
                } else {
                    selector = "td:nth-child(" + settings.column + ")";
                }
                return selector;
            }
            this.biGetSelected = function (attrs, format) {
                var attrArr = [];
                jQuery("tbody tr " + selector() + " input:checked", self).each(function () {
                    var dic = {};
                    for (var j = 0; j < attrs.length; j++) {
                        dic[attrs[j]] = jQuery(this).parents('tr').attr(attrs[j]);
                    }
                    attrArr.push(dic);
                })
                if (format == 'array') return attrArr;
                else return JSON.stringify(attrArr);
            };
            this.BoxItRow = function (row) {
                bi_add_nth_column(row, "td", "<input type='checkbox'/>", settings.tdClass);
                columnCheckboxes = jQuery(jQuery.merge(columnCheckboxes.get(), jQuery('input:checkbox', row).get()));
                CheckboxesInit(jQuery('input:checkbox', row));
            }
            this.BoxItSelectRow = function (row) {
                jQuery(selector() + " input:checkbox", row).attr('checked', 'checked');
                if (settings.highlightSelected) bi_setHighlight(this);
                bi_setCount();
            }
            this.BoxItSelectRows = function (rows) {
                if (rows.length) {
                    jQuery('tr>' + selector() + " input:checkbox", this).each(function (i) {
                        if ($.inArray($(this).closest('tr').attr('id'), rows) != -1) {
                            this.checked = true;
                            if (settings.highlightSelected) bi_setHighlight(this);
                        }
                    });
                }
                bi_setCount();
            }
            this.BoxItUnSelectRow = function (row) {
                jQuery(selector() + " input:checkbox", row).attr('checked', '');
                if (settings.highlightSelected) bi_setHighlight(this);
                bi_setCount();
            }
            this.BoxItUnSelectRows = function (rows) {
                if (rows.length) jQuery('tr>' + selector() + " input:checkbox", this).each(function (i) {
                    if ($.inArray($(this).closest('tr').attr('id'), rows) != -1) {
                        this.checked = false;
                        if (settings.highlightSelected) bi_setHighlight(this);
                    }
                });
                bi_setCount();
            }
            this.BoxItClear = function () {
                jQuery('tr>' + selector() + " input:checkbox", this).each(function (i) {
                    this.checked = false;
                    if (settings.highlightSelected) bi_setHighlight(this);
                });
                bi_setCount();
            }
            this.bi$GetSelected = function (attrname, format) {
                return jQuery("tbody tr " + selector() + " input:checked", self);
            };
            this.biIsSelected = function (attrname, attrvalue) {
                return jQuery("tbody tr[" + attrname + "=" + attrvalue + "] " + selector() + " input:checkbox", self).is(':checked');
            }
            this.bi$IsSelected = function (row) {
                return jQuery(row).find(selector() + " input:checkbox").is(':checked');
            }
            return jQuery(this);
        });
    };
})(jQuery);